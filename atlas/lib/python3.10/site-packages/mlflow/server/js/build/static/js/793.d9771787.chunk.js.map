{"version":3,"file":"static/js/793.d9771787.chunk.js","mappings":"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","sources":["common/forms/validations.ts","common/utils/StringUtils.ts","experiment-tracking/components/modals/CreateExperimentForm.tsx","experiment-tracking/components/modals/CreateExperimentModal.tsx","experiment-tracking/components/modals/DeleteExperimentModal.tsx","experiment-tracking/components/modals/RenameExperimentModal.tsx","experiment-tracking/components/ExperimentListView.tsx","experiment-tracking/components/experiment-page/contexts/GetExperimentsContext.tsx","common/static/permission-denied-lock.svg","experiment-tracking/components/PermissionDeniedView.tsx","shared/building_blocks/CopyBox.tsx","experiment-tracking/components/modals/GetLinkModal.tsx","experiment-tracking/components/experiment-page/components/header/ExperimentGetShareLinkModal.tsx","experiment-tracking/components/experiment-page/components/header/ExperimentViewHeaderShareButton.tsx","experiment-tracking/components/experiment-page/components/header/ExperimentViewHeaderCompare.tsx","experiment-tracking/components/modals/RestoreRunModal.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewRunModals.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewRunsControlsActions.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewRefreshButton.tsx","experiment-tracking/components/experiment-page/hooks/useExperimentViewLocalStore.ts","experiment-tracking/components/experiment-page/components/runs/RunsSearchTooltipContent.tsx","experiment-tracking/components/experiment-page/components/runs/RunsSearchAutoComplete.utils.tsx","experiment-tracking/components/experiment-page/components/runs/RunsSearchAutoComplete.tsx","experiment-tracking/components/evaluation-artifacts-compare/CreateNotebookRunModal.tsx","experiment-tracking/utils/LLMGatewayUtils.ts","experiment-tracking/sdk/ModelGatewayService.ts","experiment-tracking/components/evaluation-artifacts-compare/hooks/usePromptEvaluationParameters.tsx","experiment-tracking/components/evaluation-artifacts-compare/EvaluationCreatePromptParameters.tsx","experiment-tracking/components/evaluation-artifacts-compare/hooks/usePromptEvaluationPromptTemplateValue.ts","experiment-tracking/components/evaluation-artifacts-compare/components/EvaluationCreateRunPromptTemplateErrors.tsx","experiment-tracking/components/evaluation-artifacts-compare/utils/PromptExamples.ts","experiment-tracking/components/evaluation-artifacts-compare/EvaluationCreatePromptRunModalExamples.tsx","experiment-tracking/components/evaluation-artifacts-compare/components/EvaluationCreatePromptRunOutput.tsx","experiment-tracking/components/experiment-page/hooks/useExperimentPageViewMode.tsx","experiment-tracking/actions/ModelGatewayActions.ts","experiment-tracking/actions/PromptEngineeringActions.ts","experiment-tracking/components/evaluation-artifacts-compare/utils/PromptEngineeringErrorUtils.ts","experiment-tracking/components/evaluation-artifacts-compare/EvaluationCreatePromptRunModal.tsx","experiment-tracking/components/evaluation-artifacts-compare/hooks/usePromptEvaluationInputValues.tsx","experiment-tracking/components/experiment-page/hooks/useCreateNewRun.tsx","experiment-tracking/components/experiment-page/models/ExperimentPageSearchFacetsState.tsx","experiment-tracking/components/experiment-page/utils/persistSearchFacets.serializers.ts","experiment-tracking/components/experiment-page/hooks/useExperimentPageSearchFacets.tsx","experiment-tracking/components/experiment-page/hooks/useShouldShowCombinedRunsTab.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewRunsControlsFilters.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewRunsSortSelector.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewRunsColumnSelector.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewRunsModeSwitch.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewRunsGroupBySelector.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewRunsSortSelectorV2.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewRunsControls.tsx","experiment-tracking/components/experiment-page/hooks/useRunSortOptions.ts","common/components/ag-grid/AgGridLoader.tsx","experiment-tracking/components/experiment-page/utils/experimentPage.fetch-utils.ts","experiment-tracking/components/experiment-page/components/runs/cells/ColumnHeaderCell.tsx","experiment-tracking/components/experiment-page/components/runs/cells/DateCellRenderer.tsx","common/components/TrimmedText.tsx","experiment-tracking/components/experiment-page/components/runs/cells/RunDescriptionCellRenderer.tsx","experiment-tracking/components/experiment-page/components/runs/cells/ExperimentNameCellRenderer.tsx","experiment-tracking/components/experiment-page/components/runs/cells/ModelsCellRenderer.tsx","experiment-tracking/components/experiment-page/components/runs/cells/ModelsHeaderCellRenderer.tsx","experiment-tracking/components/experiment-page/components/runs/cells/VersionCellRenderer.tsx","common/static/icon-visible-fill.svg","experiment-tracking/components/experiment-page/components/runs/cells/RunVisibilityControlButton.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewRunsTableHeaderContext.tsx","experiment-tracking/components/experiment-page/components/runs/cells/RowActionsCellRenderer.tsx","experiment-tracking/components/experiment-page/components/runs/cells/RowActionsHeaderCellRenderer.tsx","experiment-tracking/components/experiment-page/components/runs/cells/GroupParentCellRenderer.tsx","experiment-tracking/components/experiment-page/components/runs/cells/RunNameCellRenderer.tsx","experiment-tracking/components/experiment-page/components/runs/cells/LoadMoreRowRenderer.tsx","experiment-tracking/components/experiment-page/components/runs/cells/DatasetsCellRenderer.tsx","experiment-tracking/components/experiment-page/components/runs/cells/AggregateMetricValueCell.tsx","experiment-tracking/components/experiment-page/utils/experimentPage.column-utils.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewRunsEmptyTable.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewRunsTableAddColumnCTA.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewRunsTableStatusBar.tsx","common/components/PreviewSidebar.tsx","experiment-tracking/components/experiment-page/hooks/useExperimentTableSelectRowHandler.tsx","experiment-tracking/components/experiment-page/hooks/useToggleRowVisibilityCallback.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewRunsTable.tsx","experiment-tracking/components/runs-charts/hooks/useRunsHighlightTableRow.tsx","experiment-tracking/components/experiment-page/models/ExperimentPageViewState.ts","experiment-tracking/components/experiment-page/hooks/useFetchedRunsNotification.tsx","experiment-tracking/components/evaluation-artifacts-compare/hooks/useEvaluateAllRows.tsx","experiment-tracking/components/evaluation-artifacts-compare/contexts/PromptEngineeringContext.tsx","experiment-tracking/components/evaluation-artifacts-compare/components/EvaluationRunHeaderModelIndicator.tsx","experiment-tracking/components/evaluation-artifacts-compare/components/EvaluationRunHeaderDatasetIndicator.tsx","experiment-tracking/components/evaluation-artifacts-compare/components/EvaluationTableHeader.tsx","experiment-tracking/components/evaluation-artifacts-compare/components/EvaluationRunHeaderCellRenderer.tsx","experiment-tracking/components/evaluation-artifacts-compare/components/EvaluationCellEvaluateButton.tsx","experiment-tracking/components/evaluation-artifacts-compare/components/EvaluationTextCellRenderer.tsx","experiment-tracking/components/evaluation-artifacts-compare/EvaluationArtifactCompare.utils.ts","experiment-tracking/components/evaluation-artifacts-compare/components/EvaluationGroupByHeaderCellRenderer.tsx","experiment-tracking/components/evaluation-artifacts-compare/hooks/useEvaluationAddNewInputsModal.tsx","experiment-tracking/components/evaluation-artifacts-compare/components/EvaluationTableActionsColumnRenderer.tsx","experiment-tracking/components/evaluation-artifacts-compare/components/EvaluationTableActionsCellRenderer.tsx","experiment-tracking/components/evaluation-artifacts-compare/components/EvaluationImageCellRenderer.tsx","experiment-tracking/components/evaluation-artifacts-compare/components/EvaluationArtifactCompareTable.tsx","experiment-tracking/components/evaluation-artifacts-compare/hooks/useEvaluationArtifactTableData.ts","experiment-tracking/components/evaluation-artifacts-compare/hooks/useEvaluationArtifactTables.ts","common/hooks/useBrowserKeyShortcutListener.ts","experiment-tracking/components/evaluation-artifacts-compare/hooks/useEvaluationArtifactWriteBack.tsx","experiment-tracking/components/evaluation-artifacts-compare/EvaluationArtifactViewEmptyState.tsx","experiment-tracking/components/evaluation-artifacts-compare/EvaluationArtifactCompareView.tsx","experiment-tracking/components/evaluation-artifacts-compare/hooks/useEvaluationArtifactViewState.tsx","experiment-tracking/components/evaluation-artifacts-compare/hooks/useEvaluationArtifactColumns.ts","experiment-tracking/components/runs-compare/RunsCompare.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewRunsTableResizer.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewRuns.tsx","experiment-tracking/components/experiment-page/hooks/useFetchExperiments.ts","experiment-tracking/components/experiment-page/utils/persistSearchFacets.ts","experiment-tracking/components/experiment-page/hooks/usePersistExperimentPageViewState.tsx","experiment-tracking/components/experiment-page/utils/experimentRuns.selector.ts","experiment-tracking/components/experiment-page/hooks/useExperimentRunsAutoRefresh.tsx","experiment-tracking/components/experiment-page/hooks/useExperimentRuns.tsx","experiment-tracking/components/experiment-page/hooks/useSharedExperimentViewState.ts","experiment-tracking/components/experiment-page/hooks/useInitializeUIState.ts","experiment-tracking/components/experiment-page/utils/expandedRunsViewStateInitializer.ts","experiment-tracking/components/experiment-page/components/ExperimentViewDescriptionNotes.tsx","experiment-tracking/components/experiment-page/components/header/ExperimentViewCopyTitle.tsx","experiment-tracking/components/experiment-page/components/ExperimentViewArtifactLocation.tsx","experiment-tracking/components/experiment-page/components/header/ExperimentViewCopyExperimentId.tsx","experiment-tracking/components/experiment-page/components/header/ExperimentViewCopyArtifactLocation.tsx","experiment-tracking/components/experiment-page/components/header/ExperimentViewHeader.tsx","experiment-tracking/components/experiment-page/hooks/useExperimentPageFeedbackUrl.ts","experiment-tracking/components/experiment-page/components/ExperimentViewTraces.tsx","experiment-tracking/components/experiment-page/ExperimentView.tsx","experiment-tracking/components/experiment-page/hooks/useExperiments.ts","common/utils/useElementHeight.ts","common/static/no-experiments.svg","experiment-tracking/components/NoExperimentView.tsx","experiment-tracking/components/HomePage.tsx"],"sourcesContent":["/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport { MlflowService } from '../../experiment-tracking/sdk/MlflowService';\nimport { Services as ModelRegistryService } from '../../model-registry/services';\n\nexport const getExperimentNameValidator = (getExistingExperimentNames: any) => {\n  return (rule: any, value: any, callback: any) => {\n    if (!value) {\n      // no need to execute below validations when no value is entered\n      // eslint-disable-next-line callback-return\n      callback(undefined);\n    } else if (getExistingExperimentNames().includes(value)) {\n      // getExistingExperimentNames returns the names of all active experiments\n      // check whether the passed value is part of the list\n      // eslint-disable-next-line callback-return\n      callback(`Experiment \"${value}\" already exists.`);\n    } else {\n      // on-demand validation whether experiment already exists in deleted state\n      MlflowService.getExperimentByName({ experiment_name: value })\n        .then((res) =>\n          callback(`Experiment \"${value}\" already exists in deleted state.\n                                 You can restore the experiment, or permanently delete the\n                                 experiment from the .trash folder (under tracking server's\n                                 root folder) in order to use this experiment name again.`),\n        )\n        .catch((e) => callback(undefined)); // no experiment returned\n    }\n  };\n};\n\nexport const modelNameValidator = (rule: any, name: any, callback: any) => {\n  if (!name) {\n    callback(undefined);\n    return;\n  }\n\n  ModelRegistryService.getRegisteredModel({ name: name })\n    .then(() => callback(`Model \"${name}\" already exists.`))\n    .catch((e) => callback(undefined));\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport _ from 'lodash';\n// Import pako lazily to reduce bundle size\nconst lazyPako = () => import('pako');\n\nexport const truncateToFirstLineWithMaxLength = (str: any, maxLength: any) => {\n  const truncated = _.truncate(str, {\n    length: maxLength,\n  });\n  return _.takeWhile(truncated, (char) => char !== '\\n').join('');\n};\n\nexport const capitalizeFirstChar = (str: any) => {\n  if (!str || typeof str !== 'string' || str.length < 1) {\n    return str;\n  }\n  return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();\n};\n\nexport const middleTruncateStr = (str: any, maxLen: any) => {\n  if (str.length > maxLen) {\n    const firstPartLen = Math.floor((maxLen - 3) / 2);\n    const lastPartLen = maxLen - 3 - firstPartLen;\n    return str.substring(0, firstPartLen) + '...' + str.substring(str.length - lastPartLen, str.length);\n  } else {\n    return str;\n  }\n};\n\nexport const capitalizeFirstLetter = (string: any) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\nconst _keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\n/* eslint-disable no-bitwise */\n/**\n * UTF-8 safe version of base64 encoder\n * Source: http://www.webtoolkit.info/javascript_base64.html\n *\n * @param {string} input - Text to encode\n */\nexport const btoaUtf8 = (input: any) => {\n  let output = '';\n  let i = 0;\n\n  const result = _utf8_encode(input);\n\n  while (i < result.length) {\n    const chr1 = result.charCodeAt(i++);\n    const chr2 = result.charCodeAt(i++);\n    const chr3 = result.charCodeAt(i++);\n\n    const enc1 = chr1 >> 2;\n    const enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n    let enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n    let enc4 = chr3 & 63;\n\n    if (isNaN(chr2)) {\n      enc3 = enc4 = 64;\n    } else if (isNaN(chr3)) {\n      enc4 = 64;\n    }\n\n    output = output + _keyStr.charAt(enc1) + _keyStr.charAt(enc2) + _keyStr.charAt(enc3) + _keyStr.charAt(enc4);\n  }\n\n  return output;\n};\n\n/**\n * UTF-8 safe version of base64 decoder\n * Source: http://www.webtoolkit.info/javascript_base64.html\n *\n * @param {string} input - Text to decode\n */\nexport const atobUtf8 = (input: any) => {\n  let output = '';\n  let i = 0;\n\n  const result = input?.replace(/[^A-Za-z0-9+/=]/g, '') || '';\n\n  while (i < result.length) {\n    const enc1 = _keyStr.indexOf(result.charAt(i++));\n    const enc2 = _keyStr.indexOf(result.charAt(i++));\n    const enc3 = _keyStr.indexOf(result.charAt(i++));\n    const enc4 = _keyStr.indexOf(result.charAt(i++));\n\n    const chr1 = (enc1 << 2) | (enc2 >> 4);\n    const chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n    const chr3 = ((enc3 & 3) << 6) | enc4;\n\n    output += String.fromCharCode(chr1);\n\n    if (enc3 !== 64) {\n      output += String.fromCharCode(chr2);\n    }\n\n    if (enc4 !== 64) {\n      output += String.fromCharCode(chr3);\n    }\n  }\n\n  return _utf8_decode(output);\n};\n\n/**\n * (private method) does a UTF-8 encoding\n *\n * @private\n * @param {string} string - Text to encode\n */\nconst _utf8_encode = (string = '') => {\n  const result = string.replace(/\\r\\n/g, '\\n');\n  let utftext = '';\n\n  for (let n = 0; n < result.length; n++) {\n    const c = result.charCodeAt(n);\n\n    if (c < 128) {\n      utftext += String.fromCharCode(c);\n    } else if (c > 127 && c < 2048) {\n      utftext += String.fromCharCode((c >> 6) | 192) + String.fromCharCode((c & 63) | 128);\n    } else {\n      utftext +=\n        String.fromCharCode((c >> 12) | 224) +\n        String.fromCharCode(((c >> 6) & 63) | 128) +\n        String.fromCharCode((c & 63) | 128);\n    }\n  }\n\n  return utftext;\n};\n\n/**\n * (private method) does a UTF-8 decoding\n *\n * @private\n * @param {string} utftext - UTF-8 text to dencode\n */\nconst _utf8_decode = (utftext = '') => {\n  let string = '';\n  let i = 0;\n\n  while (i < utftext.length) {\n    const c = utftext.charCodeAt(i);\n\n    if (c < 128) {\n      string += String.fromCharCode(c);\n      i++;\n    } else if (c > 191 && c < 224) {\n      const c2 = utftext.charCodeAt(i + 1);\n      string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\n      i += 2;\n    } else {\n      const c2 = utftext.charCodeAt(i + 1);\n      const c3 = utftext.charCodeAt(i + 2);\n      string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\n      i += 3;\n    }\n  }\n  return string;\n};\n/* eslint-enable no-bitwise */\n\n/**\n * Returns a SHA256 hash of the input string\n */\nexport const getStringSHA256 = (input: string) => {\n  return crypto.subtle.digest('SHA-256', new TextEncoder().encode(input)).then((arrayBuffer) => {\n    return Array.prototype.map.call(new Uint8Array(arrayBuffer), (x) => ('00' + x.toString(16)).slice(-2)).join('');\n  });\n};\n\nconst COMPRESSED_TEXT_DEFLATE_PREFIX = 'deflate;';\n\nexport const textCompressDeflate = async (text: string) => {\n  const pako = await lazyPako();\n  const binaryData = pako.deflate(text);\n\n  // Buffer-based implementation\n  if (typeof Buffer !== 'undefined') {\n    const b64encoded = Buffer.from(binaryData).toString('base64');\n    return `${COMPRESSED_TEXT_DEFLATE_PREFIX}${b64encoded}`;\n  }\n\n  // btoa-based implementation\n  const binaryString = Array.from(binaryData, (byte) => String.fromCodePoint(byte)).join('');\n  return `${COMPRESSED_TEXT_DEFLATE_PREFIX}${btoa(binaryString)}`;\n};\n\nexport const textDecompressDeflate = async (compressedText: string) => {\n  const pako = await lazyPako();\n  if (!compressedText.startsWith(COMPRESSED_TEXT_DEFLATE_PREFIX)) {\n    throw new Error('Invalid compressed text, payload header invalid');\n  }\n  const compressedTextWithoutPrefix = compressedText.slice(COMPRESSED_TEXT_DEFLATE_PREFIX.length);\n\n  // Buffer-based implementation\n  if (typeof Buffer !== 'undefined') {\n    const binaryString = Buffer.from(compressedTextWithoutPrefix, 'base64');\n    return pako.inflate(binaryString, { to: 'string' });\n  }\n\n  // atob-based implementation\n  const binaryString = atob(compressedTextWithoutPrefix);\n  return pako.inflate(\n    Uint8Array.from(binaryString, (m) => m.codePointAt(0) ?? 0),\n    { to: 'string' },\n  );\n};\n\nexport const isTextCompressedDeflate = (text: string) => text.startsWith(COMPRESSED_TEXT_DEFLATE_PREFIX);\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React, { Component } from 'react';\n\nimport { injectIntl } from 'react-intl';\nimport { Input, Form } from '@databricks/design-system';\n\nexport const EXP_NAME_FIELD = 'experimentName';\nexport const ARTIFACT_LOCATION = 'artifactLocation';\n\ntype Props = {\n  validator?: (...args: any[]) => any;\n  intl: {\n    formatMessage: (...args: any[]) => any;\n  };\n  innerRef: any;\n};\n\n/**\n * Component that renders a form for creating a new experiment.\n */\nclass CreateExperimentFormComponent extends Component<Props> {\n  render() {\n    return (\n      // @ts-expect-error TS(2322): Type '{ children: Element[]; ref: any; layout: \"ve... Remove this comment to see the full error message\n      <Form ref={this.props.innerRef} layout=\"vertical\">\n        <Form.Item\n          label={this.props.intl.formatMessage({\n            defaultMessage: 'Experiment Name',\n            description: 'Label for create experiment modal to enter a valid experiment name',\n          })}\n          name={EXP_NAME_FIELD}\n          rules={[\n            {\n              required: true,\n              message: this.props.intl.formatMessage({\n                defaultMessage: 'Please input a new name for the new experiment.',\n                description: 'Error message for name requirement in create experiment for MLflow',\n              }),\n            },\n            {\n              validator: this.props.validator,\n            },\n          ]}\n        >\n          <Input\n            placeholder={this.props.intl.formatMessage({\n              defaultMessage: 'Input an experiment name',\n              description: 'Input placeholder to enter experiment name for create experiment',\n            })}\n            autoFocus\n          />\n        </Form.Item>\n        <Form.Item\n          name={ARTIFACT_LOCATION}\n          label={this.props.intl.formatMessage({\n            defaultMessage: 'Artifact Location',\n            description: 'Label for create experiment modal to enter a artifact location',\n          })}\n          rules={[\n            {\n              required: false,\n            },\n          ]}\n        >\n          <Input\n            placeholder={this.props.intl.formatMessage({\n              defaultMessage: 'Input an artifact location (optional)',\n              description: 'Input placeholder to enter artifact location for create experiment',\n            })}\n          />\n        </Form.Item>\n      </Form>\n    );\n  }\n}\n\n// @ts-expect-error TS(2769): No overload matches this call.\nexport const CreateExperimentForm = injectIntl(CreateExperimentFormComponent);\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport type { NavigateFunction } from '../../../common/utils/RoutingUtils';\nimport debounce from 'lodash/debounce';\n\nimport Routes from '../../routes';\nimport { GenericInputModal } from './GenericInputModal';\nimport { CreateExperimentForm, EXP_NAME_FIELD, ARTIFACT_LOCATION } from './CreateExperimentForm';\nimport { getExperimentNameValidator } from '../../../common/forms/validations';\n\nimport { createExperimentApi, searchExperimentsApi } from '../../actions';\nimport { getExperiments } from '../../reducers/Reducers';\nimport { withRouterNext } from '../../../common/utils/withRouterNext';\n\ntype CreateExperimentModalImplProps = {\n  isOpen?: boolean;\n  onClose: (...args: any[]) => any;\n  experimentNames: string[];\n  createExperimentApi: (...args: any[]) => any;\n  searchExperimentsApi: (...args: any[]) => any;\n  navigate: NavigateFunction;\n};\n\nexport class CreateExperimentModalImpl extends Component<CreateExperimentModalImplProps> {\n  handleCreateExperiment = async (values: any) => {\n    // get values of input fields\n    const experimentName = values[EXP_NAME_FIELD];\n    const artifactLocation = values[ARTIFACT_LOCATION];\n\n    // Both createExperimentApi and searchExperimentsApi calls need to be fulfilled sequentially\n    // before redirecting the user to the newly created experiment page (history.push())\n    const response = await this.props.createExperimentApi(experimentName, artifactLocation);\n    await this.props.searchExperimentsApi();\n\n    const {\n      value: { experiment_id: newExperimentId },\n    } = response;\n    if (newExperimentId) {\n      this.props.navigate(Routes.getExperimentPageRoute(newExperimentId));\n    }\n  };\n\n  debouncedExperimentNameValidator = debounce(\n    getExperimentNameValidator(() => this.props.experimentNames),\n    400,\n  );\n\n  render() {\n    const { isOpen } = this.props;\n    return (\n      <GenericInputModal\n        title=\"Create Experiment\"\n        okText=\"Create\"\n        isOpen={isOpen}\n        handleSubmit={this.handleCreateExperiment}\n        onClose={this.props.onClose}\n      >\n        {/* @ts-expect-error TS(2322): Type '{ validator: ((rule: any, value: any, callba... Remove this comment to see the full error message */}\n        <CreateExperimentForm validator={this.debouncedExperimentNameValidator} />\n      </GenericInputModal>\n    );\n  }\n}\n\nconst mapStateToProps = (state: any) => {\n  const experiments = getExperiments(state);\n  const experimentNames = experiments.map((e) => e.name);\n  return { experimentNames };\n};\n\nconst mapDispatchToProps = {\n  createExperimentApi,\n  searchExperimentsApi,\n};\n\nexport const CreateExperimentModal = withRouterNext(\n  connect(mapStateToProps, mapDispatchToProps)(CreateExperimentModalImpl),\n);\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React, { Component } from 'react';\nimport { ConfirmModal } from './ConfirmModal';\nimport { deleteExperimentApi, searchExperimentsApi } from '../../actions';\nimport Routes from '../../routes';\nimport Utils from '../../../common/utils/Utils';\nimport { connect } from 'react-redux';\nimport { NavigateFunction } from '../../../common/utils/RoutingUtils';\nimport { getUUID } from '../../../common/utils/ActionUtils';\nimport { withRouterNext } from '../../../common/utils/withRouterNext';\n\ntype Props = {\n  isOpen: boolean;\n  onClose: (...args: any[]) => any;\n  activeExperimentIds?: string[];\n  experimentId: string;\n  experimentName: string;\n  deleteExperimentApi: (...args: any[]) => any;\n  searchExperimentsApi: (...args: any[]) => any;\n  navigate: NavigateFunction;\n};\n\nexport class DeleteExperimentModalImpl extends Component<Props> {\n  handleSubmit = () => {\n    const { experimentId, activeExperimentIds } = this.props;\n    const deleteExperimentRequestId = getUUID();\n\n    const deletePromise = this.props\n      .deleteExperimentApi(experimentId, deleteExperimentRequestId)\n      .then(() => {\n        // reload the page if an active experiment was deleted\n        if (activeExperimentIds?.includes(experimentId)) {\n          if (activeExperimentIds.length === 1) {\n            // send it to root\n            this.props.navigate(Routes.rootRoute);\n          } else {\n            const experimentIds = activeExperimentIds.filter((eid) => eid !== experimentId);\n            const route =\n              experimentIds.length === 1\n                ? Routes.getExperimentPageRoute(experimentIds[0])\n                : Routes.getCompareExperimentsPageRoute(experimentIds);\n            this.props.navigate(route);\n          }\n        }\n      })\n      .then(() => this.props.searchExperimentsApi(deleteExperimentRequestId))\n      .catch((e: any) => {\n        Utils.logErrorAndNotifyUser(e);\n      });\n\n    return deletePromise;\n  };\n\n  render() {\n    return (\n      <ConfirmModal\n        isOpen={this.props.isOpen}\n        onClose={this.props.onClose}\n        handleSubmit={this.handleSubmit}\n        title={`Delete Experiment \"${this.props.experimentName}\"`}\n        helpText={\n          <div>\n            <p>\n              <b>\n                Experiment \"{this.props.experimentName}\" (Experiment ID: {this.props.experimentId}) will be deleted.\n              </b>\n            </p>\n            {/* @ts-expect-error TS(4111): Property 'MLFLOW_SHOW_GDPR_PURGING_MESSAGES' comes from a... Remove this comment to see the full error message */}\n            {process.env.MLFLOW_SHOW_GDPR_PURGING_MESSAGES === 'true' ? (\n              <p>\n                Deleted experiments are restorable for 30 days, after which they are purged along with their associated\n                runs, including metrics, params, tags, and artifacts.\n              </p>\n            ) : (\n              ''\n            )}\n          </div>\n        }\n        confirmButtonText=\"Delete\"\n      />\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  deleteExperimentApi,\n  searchExperimentsApi,\n};\n\nexport const DeleteExperimentModal = withRouterNext(connect(undefined, mapDispatchToProps)(DeleteExperimentModalImpl));\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport debounce from 'lodash/debounce';\n\nimport { GenericInputModal } from './GenericInputModal';\nimport { RenameForm, NEW_NAME_FIELD } from './RenameForm';\nimport { getExperimentNameValidator } from '../../../common/forms/validations';\n\nimport { updateExperimentApi, getExperimentApi } from '../../actions';\nimport { getExperiments } from '../../reducers/Reducers';\n\ntype RenameExperimentModalImplProps = {\n  isOpen?: boolean;\n  experimentId?: string;\n  experimentName?: string;\n  experimentNames: string[];\n  onClose: (...args: any[]) => any;\n  updateExperimentApi: (...args: any[]) => any;\n  getExperimentApi: (...args: any[]) => any;\n};\n\nexport class RenameExperimentModalImpl extends Component<RenameExperimentModalImplProps> {\n  handleRenameExperiment = (values: any) => {\n    // get value of input field\n    const newExperimentName = values[NEW_NAME_FIELD];\n    const updateExperimentPromise = this.props\n      .updateExperimentApi(this.props.experimentId, newExperimentName)\n      .then(() => this.props.getExperimentApi(this.props.experimentId));\n\n    return updateExperimentPromise;\n  };\n\n  debouncedExperimentNameValidator = debounce(\n    getExperimentNameValidator(() => this.props.experimentNames),\n    400,\n  );\n\n  render() {\n    const { isOpen, experimentName } = this.props;\n    return (\n      <GenericInputModal\n        title=\"Rename Experiment\"\n        okText=\"Save\"\n        isOpen={isOpen}\n        handleSubmit={this.handleRenameExperiment}\n        onClose={this.props.onClose}\n      >\n        {/* @ts-expect-error TS(2769): No overload matches this call. */}\n        <RenameForm\n          type=\"experiment\"\n          name={experimentName}\n          visible={isOpen}\n          validator={this.debouncedExperimentNameValidator}\n        />\n      </GenericInputModal>\n    );\n  }\n}\n\nconst mapStateToProps = (state: any) => {\n  const experiments = getExperiments(state);\n  const experimentNames = experiments.map((e) => e.name);\n  return { experimentNames };\n};\n\nconst mapDispatchToProps = {\n  updateExperimentApi,\n  getExperimentApi,\n};\n\nexport const RenameExperimentModal = connect(mapStateToProps, mapDispatchToProps)(RenameExperimentModalImpl);\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React, { Component } from 'react';\nimport { css, Theme } from '@emotion/react';\nimport {\n  Checkbox,\n  CaretDownSquareIcon,\n  PlusCircleIcon,\n  Input,\n  PencilIcon,\n  Typography,\n  WithDesignSystemThemeHoc,\n  DesignSystemHocProps,\n} from '@databricks/design-system';\nimport { List } from 'antd';\nimport { List as VList, AutoSizer } from 'react-virtualized';\nimport 'react-virtualized/styles.css';\nimport { Link, NavigateFunction } from '../../common/utils/RoutingUtils';\nimport Routes from '../routes';\nimport { CreateExperimentModal } from './modals/CreateExperimentModal';\nimport { DeleteExperimentModal } from './modals/DeleteExperimentModal';\nimport { RenameExperimentModal } from './modals/RenameExperimentModal';\nimport { IconButton } from '../../common/components/IconButton';\nimport { withRouterNext } from '../../common/utils/withRouterNext';\nimport { ExperimentEntity } from '../types';\n\ntype Props = {\n  activeExperimentIds: string[];\n  experiments: ExperimentEntity[];\n  navigate: NavigateFunction;\n} & DesignSystemHocProps;\n\ntype State = any;\n\nexport class ExperimentListView extends Component<Props, State> {\n  list: any;\n\n  state = {\n    checkedKeys: this.props.activeExperimentIds,\n    hidden: false,\n    searchInput: '',\n    showCreateExperimentModal: false,\n    showDeleteExperimentModal: false,\n    showRenameExperimentModal: false,\n    selectedExperimentId: '0',\n    selectedExperimentName: '',\n  };\n\n  bindListRef = (ref: any) => {\n    this.list = ref;\n  };\n\n  componentDidUpdate = () => {\n    // Ensure the filter is applied\n    if (this.list) {\n      this.list.forceUpdateGrid();\n    }\n  };\n\n  filterExperiments = (searchInput: any) => {\n    const { experiments } = this.props;\n    const lowerCasedSearchInput = searchInput.toLowerCase();\n    return lowerCasedSearchInput === ''\n      ? this.props.experiments\n      : experiments.filter(({ name }) => name.toLowerCase().includes(lowerCasedSearchInput));\n  };\n\n  handleSearchInputChange = (event: any) => {\n    this.setState({\n      searchInput: event.target.value,\n    });\n  };\n\n  updateSelectedExperiment = (experimentId: any, experimentName: any) => {\n    this.setState({\n      selectedExperimentId: experimentId,\n      selectedExperimentName: experimentName,\n    });\n  };\n\n  handleCreateExperiment = () => {\n    this.setState({\n      showCreateExperimentModal: true,\n    });\n  };\n\n  handleDeleteExperiment = (experimentId: any, experimentName: any) => () => {\n    this.setState({\n      showDeleteExperimentModal: true,\n    });\n    this.updateSelectedExperiment(experimentId, experimentName);\n  };\n\n  handleRenameExperiment = (experimentId: any, experimentName: any) => () => {\n    this.setState({\n      showRenameExperimentModal: true,\n    });\n    this.updateSelectedExperiment(experimentId, experimentName);\n  };\n\n  handleCloseCreateExperimentModal = () => {\n    this.setState({\n      showCreateExperimentModal: false,\n    });\n  };\n\n  handleCloseDeleteExperimentModal = () => {\n    this.setState({\n      showDeleteExperimentModal: false,\n    });\n    // reset\n    this.updateSelectedExperiment('0', '');\n  };\n\n  handleCloseRenameExperimentModal = () => {\n    this.setState({\n      showRenameExperimentModal: false,\n    });\n    // reset\n    this.updateSelectedExperiment('0', '');\n  };\n\n  // Add a key if it does not exist, remove it if it does\n  // Always keep at least one experiment checked if it is only the active one.\n  handleCheck = (isChecked: any, key: any) => {\n    this.setState((prevState: any, props: any) => {\n      let { checkedKeys } = prevState;\n      if (isChecked === true && !props.activeExperimentIds.includes(key)) {\n        checkedKeys = [key, ...props.activeExperimentIds];\n      }\n      if (isChecked === false && props.activeExperimentIds.length !== 1) {\n        checkedKeys = props.activeExperimentIds.filter((i: any) => i !== key);\n      }\n      return { checkedKeys: checkedKeys };\n    }, this.pushExperimentRoute);\n  };\n\n  pushExperimentRoute = () => {\n    if (this.state.checkedKeys.length > 0) {\n      const route =\n        this.state.checkedKeys.length === 1\n          ? Routes.getExperimentPageRoute(this.state.checkedKeys[0])\n          : Routes.getCompareExperimentsPageRoute(this.state.checkedKeys);\n      this.props.navigate(route);\n    }\n  };\n\n  // Avoid calling emotion for every list item\n  activeExperimentListItem = classNames.getExperimentListItemContainer(true, this.props.designSystemThemeApi.theme);\n  inactiveExperimentListItem = classNames.getExperimentListItemContainer(false, this.props.designSystemThemeApi.theme);\n\n  renderListItem = ({ index, key, style, isScrolling, parent }: any) => {\n    // Use the parents props to index.\n    const item = parent.props.data[index];\n    const { activeExperimentIds } = this.props;\n    const isActive = activeExperimentIds.includes(item.experimentId);\n    const dataTestId = isActive ? 'active-experiment-list-item' : 'experiment-list-item';\n    // Clicking the link removes all checks and marks other experiments\n    // as not active.\n    return (\n      <div\n        css={isActive ? this.activeExperimentListItem : this.inactiveExperimentListItem}\n        data-testid={dataTestId}\n        key={key}\n        style={style}\n      >\n        <List.Item\n          key={item.experimentId}\n          // @ts-expect-error TS(2322): Type '{ key: any; bordered: string; prefixCls: str... Remove this comment to see the full error message\n          bordered=\"false\"\n          prefixCls=\"experiment-list-meta\"\n          css={classNames.experimentListItem}\n          actions={[\n            <Checkbox\n              id={item.experimentId}\n              key={item.experimentId}\n              onChange={(isChecked) => this.handleCheck(isChecked, item.experimentId)}\n              isChecked={isActive}\n              data-testid={`${dataTestId}-check-box`}\n            ></Checkbox>,\n            <Link\n              className=\"experiment-link\"\n              to={Routes.getExperimentPageRoute(item.experimentId)}\n              onClick={() => this.setState({ checkedKeys: [item.experimentId] })}\n              title={item.name}\n              data-testid={`${dataTestId}-link`}\n            >\n              {item.name}\n            </Link>,\n            <IconButton\n              icon={<PencilIcon />}\n              // @ts-expect-error TS(2322): Type '{ icon: Element; onClick: () => void; \"data-... Remove this comment to see the full error message\n              onClick={this.handleRenameExperiment(item.experimentId, item.name)}\n              data-testid=\"rename-experiment-button\"\n              css={classNames.renameExperiment}\n            />,\n            <IconButton\n              icon={<i className=\"far fa-trash-o\" />}\n              // @ts-expect-error TS(2322): Type '{ icon: Element; onClick: () => void; css: {... Remove this comment to see the full error message\n              onClick={this.handleDeleteExperiment(item.experimentId, item.name)}\n              css={classNames.deleteExperiment}\n              data-testid=\"delete-experiment-button\"\n            />,\n          ]}\n        ></List.Item>\n      </div>\n    );\n  };\n\n  isRowLoaded = ({ index }: any) => {\n    return !!this.props.experiments[index];\n  };\n\n  unHide = () => this.setState({ hidden: false });\n  hide = () => this.setState({ hidden: true });\n\n  render() {\n    const { hidden } = this.state;\n    const { activeExperimentIds, designSystemThemeApi } = this.props;\n    const { theme } = designSystemThemeApi;\n\n    if (hidden) {\n      return (\n        <CaretDownSquareIcon\n          rotate={-90}\n          onClick={this.unHide}\n          css={classNames.icon(theme)}\n          title=\"Show experiment list\"\n        />\n      );\n    }\n\n    const { searchInput } = this.state;\n    const filteredExperiments = this.filterExperiments(searchInput);\n\n    return (\n      <div id=\"experiment-list-outer-container\" css={classNames.experimentListOuterContainer}>\n        <CreateExperimentModal\n          isOpen={this.state.showCreateExperimentModal}\n          onClose={this.handleCloseCreateExperimentModal}\n        />\n        <DeleteExperimentModal\n          isOpen={this.state.showDeleteExperimentModal}\n          onClose={this.handleCloseDeleteExperimentModal}\n          activeExperimentIds={activeExperimentIds}\n          experimentId={this.state.selectedExperimentId}\n          experimentName={this.state.selectedExperimentName}\n        />\n        <RenameExperimentModal\n          isOpen={this.state.showRenameExperimentModal}\n          onClose={this.handleCloseRenameExperimentModal}\n          experimentId={this.state.selectedExperimentId}\n          experimentName={this.state.selectedExperimentName}\n        />\n        <div css={classNames.experimentTitleContainer}>\n          <Typography.Title level={2} style={{ margin: 0 }}>\n            Experiments\n          </Typography.Title>\n          <div>\n            <PlusCircleIcon\n              onClick={this.handleCreateExperiment}\n              css={classNames.icon(theme)}\n              title=\"New Experiment\"\n              data-testid=\"create-experiment-button\"\n            />\n            <CaretDownSquareIcon\n              onClick={this.hide}\n              rotate={90}\n              css={classNames.icon(theme)}\n              title=\"Hide experiment list\"\n            />\n          </div>\n        </div>\n        <Input\n          placeholder=\"Search Experiments\"\n          aria-label=\"search experiments\"\n          value={searchInput}\n          onChange={this.handleSearchInputChange}\n          data-testid=\"search-experiment-input\"\n        />\n        <div>\n          <AutoSizer>\n            {({ width, height }) => (\n              <VList\n                rowRenderer={this.renderListItem}\n                data={filteredExperiments}\n                ref={this.bindListRef}\n                rowHeight={32}\n                overscanRowCount={10}\n                height={height}\n                width={width}\n                rowCount={filteredExperiments.length}\n              />\n            )}\n          </AutoSizer>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst classNames = {\n  experimentListOuterContainer: css({\n    boxSizing: 'border-box',\n    height: '100%',\n    marginLeft: '24px',\n    marginRight: '8px',\n    paddingRight: '16px',\n    width: '100%',\n    // Ensure it displays experiment names for smaller screens, but don't\n    // take more than 20% of the screen.\n    minWidth: 'max(280px, 20vw)',\n    maxWidth: '20vw',\n    display: 'grid',\n    gridTemplateRows: 'auto auto 1fr',\n  }),\n  experimentTitleContainer: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: '8px',\n  },\n  experimentTitle: {\n    margin: 0,\n  },\n  experimentSearchContainer: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: '2px',\n  },\n  experimentSearchInput: {\n    margin: 0,\n    flex: '6 1 0',\n  },\n  experimentSearchIcon: {\n    fontSize: '24px',\n    marginLeft: 'auto',\n    flex: '1 1 0',\n  },\n  experimentListContainer: {\n    marginTop: '12px',\n  },\n  getExperimentListItemContainer: (isActive: any, theme: any) =>\n    css({\n      display: 'flex',\n      marginRight: '8px',\n      paddingRight: '5px',\n      borderLeft: isActive ? `solid ${theme.colors.primary}` : 'solid transparent',\n      borderLeftWidth: 4,\n      backgroundColor: isActive ? theme.colors.actionDefaultBackgroundPress : 'transparent',\n    }),\n  experimentListItem: css({\n    display: 'grid',\n    // Make the items line up\n    width: '100%',\n    '.experiment-list-meta-item-action': {\n      display: 'grid',\n      gridTemplateColumns: 'auto 1fr auto auto',\n      paddingLeft: '0px',\n      marginBottom: '4px',\n      marginTop: '4px',\n      li: {\n        paddingRight: '4px',\n        paddingLeft: '4px',\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        whiteSpace: 'nowrap',\n        textAlign: 'left',\n        fontSize: '13px',\n      },\n    },\n  }),\n  renameExperiment: {\n    justifySelf: 'end',\n  },\n  // Use a larger margin to avoid overlapping the vertical scrollbar\n  deleteExperiment: {\n    justifySelf: 'end',\n    marginRight: '10px',\n  },\n  icon: (theme: Theme) => ({\n    color: theme.colors.actionDefaultTextDefault,\n    fontSize: theme.general.iconSize,\n    marginLeft: theme.spacing.xs,\n  }),\n};\n\nexport default withRouterNext(WithDesignSystemThemeHoc(ExperimentListView));\n","import { isEqual } from 'lodash';\nimport React, { createContext, useCallback, useMemo, useState } from 'react';\nimport { ErrorWrapper } from '../../../../common/utils/ErrorWrapper';\nimport RequestStateWrapper from '../../../../common/components/RequestStateWrapper';\nimport Utils from '../../../../common/utils/Utils';\nimport type { getExperimentApi, setCompareExperiments, setExperimentTagApi } from '../../../actions';\nimport { useDispatch } from 'react-redux';\nimport { ThunkDispatch } from '../../../../redux-types';\n\nexport interface GetExperimentsContextActions {\n  setExperimentTagApi: typeof setExperimentTagApi;\n  getExperimentApi: typeof getExperimentApi;\n  setCompareExperiments: typeof setCompareExperiments;\n}\n\nexport interface GetExperimentsContextType {\n  /**\n   * Function used to (re)fetch experiments using their IDs.\n   */\n  fetchExperiments: (experimentIds: string[]) => void;\n\n  /**\n   * Indicates if experiments are being loaded at the moment\n   */\n  isLoadingExperiment: boolean;\n\n  /**\n   * Contains error descriptor if fetching runs failed\n   */\n  requestError: ErrorWrapper | null;\n\n  /**\n   * All experiment-related actions creators\n   */\n  actions: GetExperimentsContextActions;\n}\n\n/**\n * Wrapper context that aggregates concrete redux actions necessary to fetch experiments.\n */\nexport const GetExperimentsContext = createContext<GetExperimentsContextType | null>(null);\n\n/**\n * Provider component for GetExperimentsContext.\n * Accepts concrete redux actions for searching experiments.\n */\nexport const GetExperimentsContextProvider = ({\n  children,\n  actions,\n}: React.PropsWithChildren<{\n  actions: GetExperimentsContextActions;\n}>) => {\n  const [fetchExperimentsRequestIds, setFetchExperimentsRequestIds] = useState<string[]>([]);\n  const [isLoadingExperiment, setIsLoadingExperiment] = useState(false);\n\n  const [requestError, setRequestError] = useState<any>(null);\n\n  const dispatch = useDispatch<ThunkDispatch>();\n\n  const fetchExperiments = useCallback(\n    (experimentIds: string[]) => {\n      const fetchFn = () => {\n        const newRequestIds = experimentIds.map((experimentId) => {\n          const requestAction = actions.getExperimentApi(experimentId);\n          dispatch(requestAction).catch((e) => {\n            Utils.logErrorAndNotifyUser(e);\n          });\n          return requestAction.meta.id;\n        });\n        setFetchExperimentsRequestIds((requestIds) =>\n          isEqual(newRequestIds, requestIds) ? requestIds : newRequestIds,\n        );\n      };\n\n      setRequestError(null);\n      fetchFn();\n    },\n    [actions, dispatch],\n  );\n\n  const contextValue = useMemo(\n    () => ({\n      fetchExperiments,\n      isLoadingExperiment,\n      requestError: requestError,\n      actions,\n    }),\n    [actions, fetchExperiments, isLoadingExperiment, requestError],\n  );\n\n  const renderFn = (_isLoading: false, _renderError: any, requests: any[]) => {\n    /**\n     * TODO:\n     * Defer setting this state because currently it might happen inside\n     * RequestStateWrapper's render function which causes React to act up.\n     * Either rebuild RequestStateWrapper or introduce some workaround.\n     */\n    setIsLoadingExperiment(requests.some((r) => fetchExperimentsRequestIds.includes(r.id) && r.active));\n\n    if (!requestError) {\n      requests.forEach((request) => {\n        if (request.error) {\n          setRequestError(request.error);\n        }\n      });\n    }\n\n    return children;\n  };\n\n  return (\n    <GetExperimentsContext.Provider value={contextValue}>\n      <RequestStateWrapper\n        shouldOptimisticallyRender\n        // eslint-disable-next-line no-trailing-spaces\n        requestIds={fetchExperimentsRequestIds}\n      >\n        {renderFn}\n      </RequestStateWrapper>\n    </GetExperimentsContext.Provider>\n  );\n};\n","var _desc, _g;\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nimport * as React from \"react\";\nfunction SvgPermissionDeniedLock(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: \"58px\",\n    height: \"75px\",\n    viewBox: \"0 0 58 75\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title === undefined ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, \"Privacy_Lock\") : title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _desc || (_desc = /*#__PURE__*/React.createElement(\"desc\", null, \"Created with Sketch.\")), _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    id: \"EmptyState\",\n    stroke: \"none\",\n    strokeWidth: 1,\n    fill: \"none\",\n    fillRule: \"evenodd\"\n  }, /*#__PURE__*/React.createElement(\"g\", {\n    id: \"ErrorPage-noPermission\",\n    transform: \"translate(-691.000000, -194.000000)\",\n    fill: \"#43C8EC\"\n  }, /*#__PURE__*/React.createElement(\"g\", {\n    id: \"Privacy_Lock\",\n    transform: \"translate(691.000000, 194.250000)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M45.8,24.31 L45.8,17.16 C45.8,7.84295627 38.2470437,0.29 28.93,0.29 C19.6129563,0.29 12.06,7.84295627 12.06,17.16 L12.06,24.3 L0.14,24.3 L0.14,74.64 L57.71,74.64 L57.71,24.31 L45.8,24.31 Z M14.05,17.16 C14.05,8.94752577 20.7075258,2.29 28.92,2.29 C37.1324742,2.29 43.79,8.94752577 43.79,17.16 L43.79,24.3 L14.05,24.3 L14.05,17.16 Z M55.71,72.64 L2.14,72.64 L2.14,26.31 L55.71,26.31 L55.71,72.64 Z\",\n    id: \"Shape\",\n    fillRule: \"nonzero\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M28.93,37.33 C26.5550177,37.3567611 24.5749652,39.154747 24.319954,41.5161505 C24.0649429,43.8775541 25.6154871,46.0568139 27.93,46.59 L27.93,62.54 L29.93,62.54 L29.93,46.6 C32.2445129,46.0668139 33.7950571,43.8875541 33.540046,41.5261505 C33.2850348,39.164747 31.3049823,37.3667611 28.93,37.34 L28.93,37.33 Z\",\n    id: \"Path\"\n  }))))));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgPermissionDeniedLock);\nexport default __webpack_public_path__ + \"static/media/permission-denied-lock.16036747d57cd663d7df223781a447b2.svg\";\nexport { ForwardRef as ReactComponent };","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport permissionDeniedLock from '../../common/static/permission-denied-lock.svg';\nimport { useDesignSystemTheme } from '@databricks/design-system';\n\nconst defaultMessage = 'The current user does not have permission to view this page.';\n\ntype Props = {\n  errorMessage?: string;\n};\n\nexport function PermissionDeniedView({ errorMessage }: Props) {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <div className=\"center\">\n      <img style={{ height: 300, marginTop: 80 }} src={permissionDeniedLock} alt=\"permission denied\" />\n      <h1 style={{ paddingTop: 10 }}>Permission Denied</h1>\n      <h2 data-testid=\"error-message\" css={{ color: theme.colors.textSecondary }}>\n        {errorMessage || defaultMessage}\n      </h2>\n    </div>\n  );\n}\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport { Input } from '@databricks/design-system';\nimport { CopyButton } from './CopyButton';\n\ntype Props = {\n  copyText: string;\n};\n\nexport const CopyBox = ({ copyText }: Props) => (\n  <div css={{ display: 'flex', gap: 4 }}>\n    <Input readOnly value={copyText} data-test-id=\"copy-box\" />\n    <CopyButton copyText={copyText} />\n  </div>\n);\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Modal } from '@databricks/design-system';\nimport { CopyBox } from '../../../shared/building_blocks/CopyBox';\n\ntype Props = {\n  visible: boolean;\n  onCancel: (...args: any[]) => any;\n  link: string;\n};\n\nexport const GetLinkModal = ({ visible, onCancel, link }: Props) => {\n  return (\n    <Modal\n      title={<FormattedMessage defaultMessage=\"Get Link\" description=\"Title text for get-link modal\" />}\n      visible={visible}\n      onCancel={onCancel}\n    >\n      <CopyBox copyText={link} />\n    </Modal>\n  );\n};\n","import { useCallback, useEffect, useMemo, useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { GenericSkeleton, Input, Modal } from '@databricks/design-system';\nimport { useDispatch } from 'react-redux';\nimport { ThunkDispatch } from '../../../../../redux-types';\nimport { setExperimentTagApi } from '../../../../actions';\nimport Routes from '../../../../routes';\nimport { CopyButton } from '../../../../../shared/building_blocks/CopyButton';\nimport { ExperimentPageSearchFacetsState } from '../../models/ExperimentPageSearchFacetsState';\nimport { ExperimentPageUIState } from '../../models/ExperimentPageUIState';\nimport { getStringSHA256, textCompressDeflate } from '../../../../../common/utils/StringUtils';\nimport Utils from '../../../../../common/utils/Utils';\nimport { EXPERIMENT_PAGE_VIEW_STATE_SHARE_TAG_PREFIX } from '../../../../constants';\nimport { shouldUseCompressedExperimentViewSharedState } from '../../../../../common/utils/FeatureUtils';\n\ntype GetShareLinkModalProps = {\n  onCancel: () => void;\n  visible: boolean;\n  experimentIds: string[];\n  searchFacetsState: ExperimentPageSearchFacetsState;\n  uiState: ExperimentPageUIState;\n};\n\ntype ShareableViewState = ExperimentPageSearchFacetsState & ExperimentPageUIState;\n\n// Typescript-based test to ensure that the keys of the two states are disjoint.\n// If they are not disjoint, the state serialization will not work as expected.\nconst _arePersistedStatesDisjoint: [\n  keyof ExperimentPageSearchFacetsState & keyof ExperimentPageUIState extends never ? true : false,\n] = [true];\n\nconst serializePersistedState = async (state: ShareableViewState) => {\n  if (shouldUseCompressedExperimentViewSharedState()) {\n    return textCompressDeflate(JSON.stringify(state));\n  }\n  return JSON.stringify(state);\n};\n\n/**\n * Modal that displays shareable link for the experiment page.\n * The shareable state is created by serializing the search facets and UI state and storing\n * it as a tag on the experiment.\n */\nexport const ExperimentGetShareLinkModal = ({\n  onCancel,\n  visible,\n  experimentIds,\n  searchFacetsState,\n  uiState,\n}: GetShareLinkModalProps) => {\n  const [sharedStateUrl, setSharedStateUrl] = useState<string>('');\n  const [linkInProgress, setLinkInProgress] = useState(true);\n  const [generatedState, setGeneratedState] = useState<ShareableViewState | null>(null);\n\n  const dispatch = useDispatch<ThunkDispatch>();\n\n  const stateToSerialize = useMemo(() => ({ ...searchFacetsState, ...uiState }), [searchFacetsState, uiState]);\n\n  const createSerializedState = useCallback(\n    async (state: ShareableViewState) => {\n      if (experimentIds.length > 1) {\n        setLinkInProgress(false);\n        setGeneratedState(state);\n        setSharedStateUrl(window.location.href);\n        return;\n      }\n      setLinkInProgress(true);\n      const [experimentId] = experimentIds;\n      try {\n        const data = await serializePersistedState(state);\n        const hash = await getStringSHA256(data);\n\n        const tagName = `${EXPERIMENT_PAGE_VIEW_STATE_SHARE_TAG_PREFIX}${hash}`;\n\n        await dispatch(setExperimentTagApi(experimentId, tagName, data));\n\n        setLinkInProgress(false);\n        setGeneratedState(state);\n        const pageRoute = Routes.getExperimentPageRoute(experimentId, false, hash);\n        const shareURL = `${window.location.origin}${window.location.pathname}#${pageRoute}`;\n        setSharedStateUrl(shareURL);\n      } catch (e) {\n        Utils.logErrorAndNotifyUser('Failed to create shareable link for experiment');\n        throw e;\n      }\n    },\n    [dispatch, experimentIds],\n  );\n\n  useEffect(() => {\n    if (!visible || generatedState === stateToSerialize) {\n      return;\n    }\n    createSerializedState(stateToSerialize);\n  }, [visible, createSerializedState, generatedState, stateToSerialize]);\n\n  return (\n    <Modal\n      title={\n        <FormattedMessage\n          defaultMessage=\"Get shareable link\"\n          description={'Title text for the experiment \"Get link\" modal'}\n        />\n      }\n      visible={visible}\n      onCancel={onCancel}\n    >\n      <div css={{ display: 'flex', gap: 8 }}>\n        {linkInProgress ? (\n          <GenericSkeleton css={{ flex: 1 }} />\n        ) : (\n          <Input placeholder=\"Click button on the right to create shareable state\" value={sharedStateUrl} readOnly />\n        )}\n        <CopyButton loading={linkInProgress} copyText={sharedStateUrl} />\n      </div>\n    </Modal>\n  );\n};\n","import { Button } from '@databricks/design-system';\nimport { useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { GetLinkModal } from '../../../modals/GetLinkModal';\nimport { ExperimentPageSearchFacetsState } from '../../models/ExperimentPageSearchFacetsState';\nimport { ExperimentPageUIState } from '../../models/ExperimentPageUIState';\nimport { ExperimentGetShareLinkModal } from './ExperimentGetShareLinkModal';\n\n/**\n * Experiment page header part responsible for displaying button\n * that displays modal for sharing the link\n */\nexport const ExperimentViewHeaderShareButton = ({\n  searchFacetsState,\n  uiState,\n  experimentIds,\n}: {\n  searchFacetsState?: ExperimentPageSearchFacetsState;\n  uiState?: ExperimentPageUIState;\n  experimentIds?: string[];\n}) => {\n  const [showGetLinkModal, setShowGetLinkModal] = useState(false);\n\n  return (\n    <>\n      {searchFacetsState && uiState && experimentIds ? (\n        <ExperimentGetShareLinkModal\n          searchFacetsState={searchFacetsState}\n          uiState={uiState}\n          visible={showGetLinkModal}\n          onCancel={() => setShowGetLinkModal(false)}\n          experimentIds={experimentIds}\n        />\n      ) : (\n        <GetLinkModal\n          link={window.location.href}\n          visible={showGetLinkModal}\n          onCancel={() => setShowGetLinkModal(false)}\n        />\n      )}\n      {/* TODO: ensure that E2E tests are working after refactor is complete */}\n      <Button\n        componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_header_experimentviewheadersharebutton.tsx_44\"\n        type=\"primary\"\n        onClick={() => setShowGetLinkModal(true)}\n        data-test-id=\"share-button\"\n      >\n        <FormattedMessage defaultMessage=\"Share\" description=\"Text for share button on experiment view page header\" />\n      </Button>\n    </>\n  );\n};\n","import React, { useMemo } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { PageHeader } from '../../../../../shared/building_blocks/PageHeader';\nimport { ExperimentViewHeaderShareButton } from './ExperimentViewHeaderShareButton';\nimport { ExperimentEntity } from '../../../../types';\n\n/**\n * Header for experiment compare page. Displays title and breadcrumbs.\n */\nexport const ExperimentViewHeaderCompare = React.memo(({ experiments }: { experiments: ExperimentEntity[] }) => {\n  const pageTitle = useMemo(\n    () => (\n      <FormattedMessage\n        defaultMessage=\"Displaying Runs from {numExperiments} Experiments\"\n        description=\"Message shown when displaying runs from multiple experiments\"\n        values={{\n          numExperiments: experiments.length,\n        }}\n      />\n    ),\n    [experiments.length],\n  );\n\n  // eslint-disable-next-line prefer-const\n  let breadcrumbs: React.ReactNode[] = [];\n\n  return (\n    <PageHeader title={pageTitle} breadcrumbs={breadcrumbs}>\n      <ExperimentViewHeaderShareButton />\n    </PageHeader>\n  );\n});\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React, { Component } from 'react';\nimport { ConfirmModal } from './ConfirmModal';\nimport { connect } from 'react-redux';\nimport { openErrorModal, restoreRunApi } from '../../actions';\nimport Utils from '../../../common/utils/Utils';\n\ntype Props = {\n  isOpen: boolean;\n  onClose: (...args: any[]) => any;\n  selectedRunIds: string[];\n  openErrorModal: (...args: any[]) => any;\n  restoreRunApi: (...args: any[]) => any;\n  onSuccess?: () => void;\n};\n\nexport class RestoreRunModalImpl extends Component<Props> {\n  constructor(props: Props) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit() {\n    const restorePromises: any = [];\n    this.props.selectedRunIds.forEach((runId) => {\n      restorePromises.push(this.props.restoreRunApi(runId));\n    });\n    return Promise.all(restorePromises)\n      .catch((e) => {\n        let errorMessage = 'While restoring an experiment run, an error occurred.';\n        if (e.textJson && e.textJson.error_code === 'RESOURCE_LIMIT_EXCEEDED') {\n          errorMessage = errorMessage + ' ' + e.textJson.message;\n        }\n        this.props.openErrorModal(errorMessage);\n      })\n      .then(() => {\n        this.props.onSuccess?.();\n      });\n  }\n\n  render() {\n    const number = this.props.selectedRunIds.length;\n    return (\n      <ConfirmModal\n        isOpen={this.props.isOpen}\n        onClose={this.props.onClose}\n        handleSubmit={this.handleSubmit}\n        title={`Restore Experiment ${Utils.pluralize('Run', number)}`}\n        helpText={`${number} experiment ${Utils.pluralize('run', number)} will be restored.`}\n        confirmButtonText=\"Restore\"\n      />\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  restoreRunApi,\n  openErrorModal,\n};\n\nexport default connect(null, mapDispatchToProps)(RestoreRunModalImpl);\n","import { useCallback } from 'react';\nimport DeleteRunModal from '../../../modals/DeleteRunModal';\nimport { RenameRunModal } from '../../../modals/RenameRunModal';\nimport RestoreRunModal from '../../../modals/RestoreRunModal';\n\nexport interface ExperimentViewModalsProps {\n  showDeleteRunModal: boolean;\n  showRestoreRunModal: boolean;\n  showRenameRunModal: boolean;\n  runsSelected: Record<string, boolean>;\n  onCloseDeleteRunModal: () => void;\n  onCloseRestoreRunModal: () => void;\n  onCloseRenameRunModal: () => void;\n  renamedRunName: string;\n  refreshRuns: () => void;\n}\n\n/**\n * A component that contains modals required for the run\n * management, i.e. delete and restore actions.\n */\nexport const ExperimentViewRunModals = ({\n  showDeleteRunModal,\n  showRestoreRunModal,\n  showRenameRunModal,\n  runsSelected,\n  onCloseDeleteRunModal,\n  onCloseRestoreRunModal,\n  onCloseRenameRunModal,\n  renamedRunName,\n  refreshRuns,\n}: ExperimentViewModalsProps) => {\n  const selectedRunIds = Object.entries(runsSelected)\n    .filter(([, selected]) => selected)\n    .map(([key]) => key);\n\n  return (\n    <>\n      <DeleteRunModal\n        isOpen={showDeleteRunModal}\n        onClose={onCloseDeleteRunModal}\n        selectedRunIds={selectedRunIds}\n        onSuccess={() => {\n          refreshRuns();\n        }}\n      />\n      <RestoreRunModal\n        isOpen={showRestoreRunModal}\n        onClose={onCloseRestoreRunModal}\n        selectedRunIds={selectedRunIds}\n        onSuccess={() => {\n          refreshRuns();\n        }}\n      />\n      <RenameRunModal\n        runUuid={selectedRunIds[0]}\n        onClose={onCloseRenameRunModal}\n        runName={renamedRunName}\n        isOpen={showRenameRunModal}\n        onSuccess={() => {\n          refreshRuns();\n        }}\n      />\n    </>\n  );\n};\n","import { Button } from '@databricks/design-system';\nimport { Theme } from '@emotion/react';\nimport React, { useCallback, useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { useNavigate } from '../../../../../common/utils/RoutingUtils';\nimport { LegacyTooltip } from '@databricks/design-system';\nimport { LIFECYCLE_FILTER } from '../../../../constants';\nimport Routes from '../../../../routes';\nimport { ExperimentPageViewState } from '../../models/ExperimentPageViewState';\nimport { ExperimentRunsSelectorResult } from '../../utils/experimentRuns.selector';\nimport { ExperimentViewRunModals } from './ExperimentViewRunModals';\nimport { ExperimentPageSearchFacetsState } from '../../models/ExperimentPageSearchFacetsState';\nimport { RunInfoEntity } from '../../../../types';\n\nexport type ExperimentViewRunsControlsActionsProps = {\n  viewState: ExperimentPageViewState;\n  searchFacetsState: ExperimentPageSearchFacetsState;\n  runsData: ExperimentRunsSelectorResult;\n  refreshRuns: () => void;\n};\n\nconst CompareRunsButtonWrapper: React.FC = ({ children }) => <>{children}</>;\n\nexport const ExperimentViewRunsControlsActions = React.memo(\n  ({ viewState, runsData, searchFacetsState, refreshRuns }: ExperimentViewRunsControlsActionsProps) => {\n    const { runsSelected } = viewState;\n    const { runInfos } = runsData;\n    const { lifecycleFilter } = searchFacetsState;\n\n    const navigate = useNavigate();\n\n    const [showDeleteRunModal, setShowDeleteRunModal] = useState(false);\n    const [showRestoreRunModal, setShowRestoreRunModal] = useState(false);\n    const [showRenameRunModal, setShowRenameRunModal] = useState(false);\n    const [renamedRunName, setRenamedRunName] = useState('');\n\n    const renameButtonClicked = useCallback(() => {\n      const runsSelectedList = Object.keys(runsSelected);\n      const selectedRun = runInfos.find((info) => info.runUuid === runsSelectedList[0]);\n      if (selectedRun) {\n        setRenamedRunName(selectedRun.runName);\n        setShowRenameRunModal(true);\n      }\n    }, [runInfos, runsSelected]);\n\n    const compareButtonClicked = useCallback(() => {\n      const runsSelectedList = Object.keys(runsSelected);\n      const experimentIds = runInfos\n        .filter(({ runUuid }: RunInfoEntity) => runsSelectedList.includes(runUuid))\n        .map(({ experimentId }: any) => experimentId);\n\n      navigate(Routes.getCompareRunPageRoute(runsSelectedList, [...new Set(experimentIds)].sort()));\n    }, [navigate, runInfos, runsSelected]);\n\n    const onDeleteRun = useCallback(() => setShowDeleteRunModal(true), []);\n    const onRestoreRun = useCallback(() => setShowRestoreRunModal(true), []);\n    const onCloseDeleteRunModal = useCallback(() => setShowDeleteRunModal(false), []);\n    const onCloseRestoreRunModal = useCallback(() => setShowRestoreRunModal(false), []);\n    const onCloseRenameRunModal = useCallback(() => setShowRenameRunModal(false), []);\n\n    const selectedRunsCount = Object.values(viewState.runsSelected).filter(Boolean).length;\n    const canRestoreRuns = selectedRunsCount > 0;\n    const canRenameRuns = selectedRunsCount === 1;\n    const canCompareRuns = selectedRunsCount > 1;\n    const showActionButtons = canCompareRuns || canRenameRuns || canRestoreRuns;\n\n    return (\n      <>\n        <div css={styles.controlBar}>\n          <Button\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewrunscontrolsactions.tsx_110\"\n            data-testid=\"run-rename-button\"\n            onClick={renameButtonClicked}\n            disabled={!canRenameRuns}\n          >\n            <FormattedMessage\n              defaultMessage=\"Rename\"\n              description=\"Label for the rename run button above the experiment runs table\"\n            />\n          </Button>\n          {lifecycleFilter === LIFECYCLE_FILTER.ACTIVE ? (\n            <Button\n              componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewrunscontrolsactions.tsx_117\"\n              data-testid=\"runs-delete-button\"\n              disabled={!canRestoreRuns}\n              onClick={onDeleteRun}\n              danger\n            >\n              <FormattedMessage\n                defaultMessage=\"Delete\"\n                // eslint-disable-next-line max-len\n                description=\"String for the delete button to delete a particular experiment run\"\n              />\n            </Button>\n          ) : null}\n          {lifecycleFilter === LIFECYCLE_FILTER.DELETED ? (\n            <Button\n              componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewrunscontrolsactions.tsx_126\"\n              data-testid=\"runs-restore-button\"\n              disabled={!canRestoreRuns}\n              onClick={onRestoreRun}\n            >\n              <FormattedMessage\n                defaultMessage=\"Restore\"\n                // eslint-disable-next-line max-len\n                description=\"String for the restore button to undo the experiments that were deleted\"\n              />\n            </Button>\n          ) : null}\n          <div css={styles.buttonSeparator} />\n          <CompareRunsButtonWrapper>\n            <Button\n              componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewrunscontrolsactions.tsx_136\"\n              data-testid=\"runs-compare-button\"\n              disabled={!canCompareRuns}\n              onClick={compareButtonClicked}\n            >\n              <FormattedMessage\n                defaultMessage=\"Compare\"\n                // eslint-disable-next-line max-len\n                description=\"String for the compare button to compare experiment runs to find an ideal model\"\n              />\n            </Button>\n          </CompareRunsButtonWrapper>\n        </div>\n        <ExperimentViewRunModals\n          runsSelected={runsSelected}\n          onCloseRenameRunModal={onCloseRenameRunModal}\n          onCloseDeleteRunModal={onCloseDeleteRunModal}\n          onCloseRestoreRunModal={onCloseRestoreRunModal}\n          showDeleteRunModal={showDeleteRunModal}\n          showRestoreRunModal={showRestoreRunModal}\n          showRenameRunModal={showRenameRunModal}\n          renamedRunName={renamedRunName}\n          refreshRuns={refreshRuns}\n        />\n      </>\n    );\n  },\n);\n\nconst styles = {\n  buttonSeparator: (theme: Theme) => ({\n    borderLeft: `1px solid ${theme.colors.border}`,\n    marginLeft: theme.spacing.xs,\n    marginRight: theme.spacing.xs,\n    height: '100%',\n  }),\n  controlBar: (theme: Theme) => ({\n    display: 'flex',\n    gap: theme.spacing.sm,\n    alignItems: 'center',\n  }),\n};\n","import { Button, SyncIcon, LegacyTooltip, useDesignSystemTheme } from '@databricks/design-system';\nimport React, { useEffect, useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { MAX_DETECT_NEW_RUNS_RESULTS, POLL_INTERVAL } from '../../../../constants';\nimport { ExperimentStoreEntities } from '../../../../types';\nimport { useExperimentIds } from '../../hooks/useExperimentIds';\nimport { searchRunsPayload } from '../../../../actions';\n\nexport interface ExperimentViewRefreshButtonProps {\n  runInfos: ExperimentStoreEntities['runInfosByUuid'];\n  refreshRuns?: () => void;\n}\n\n/**\n * A component that displays \"refresh runs\" button with the relevant number\n * of the new runs and handles the refresh action.\n */\nexport const ExperimentViewRefreshButtonImpl = React.memo(\n  (props: React.PropsWithChildren<ExperimentViewRefreshButtonProps>) => {\n    const { runInfos } = props;\n    const { theme } = useDesignSystemTheme();\n\n    const { refreshRuns } = props;\n\n    const experimentIds = useExperimentIds();\n\n    // Keeps the time of the last runs fetch\n    const [lastFetchTime, setLastFetchTime] = useState(0);\n\n    // Keeps the number of available new runs\n    const [newRunsCount, setNewRunsCount] = useState(0);\n\n    // We're resetting number of new runs and the fetch date\n    // every time when the runs payload has changed\n    useEffect(() => {\n      setNewRunsCount(0);\n      setLastFetchTime(() => Date.now());\n    }, [runInfos]);\n\n    useEffect(\n      () => {\n        if (!lastFetchTime) {\n          return undefined;\n        }\n        const interval = setInterval(() => {\n          // Let's query for new runs that have started after a certain time\n          const searchPayloadData: any = {\n            experimentIds,\n            filter: `attributes.start_time > ${lastFetchTime}`,\n            // We're not interested in more than 26 new runs\n            maxResults: MAX_DETECT_NEW_RUNS_RESULTS,\n          };\n          searchRunsPayload(searchPayloadData).then((result) => {\n            const newRuns = result.runs?.length || 0;\n            setNewRunsCount(newRuns);\n          });\n        }, POLL_INTERVAL);\n        return () => clearInterval(interval);\n      },\n      // We're resetting the interval each time the reference time or experiment IDs have changed\n      [lastFetchTime, experimentIds],\n    );\n\n    return (\n      <div css={{ position: 'relative' }}>\n        {/* Replace this bespoke Badge item with Dubois component if it ever becomes available. */}\n        {newRunsCount > 0 && (\n          <div\n            title={\n              MAX_DETECT_NEW_RUNS_RESULTS > newRunsCount ? `${newRunsCount}` : `${MAX_DETECT_NEW_RUNS_RESULTS - 1}+`\n            }\n            css={{\n              position: 'absolute',\n              top: 0,\n              right: 0,\n              transform: 'translate(50%, -50%)',\n              display: 'flex',\n              justifyContent: 'center',\n              alignItems: 'center',\n              width: newRunsCount > 9 ? 28 : 20, // Makes the badge wider when count is more than 2 digits\n              height: 20,\n              borderRadius: 10,\n              border: `1px solid ${theme.colors.white}`,\n              backgroundColor: theme.colors.lime, // Why lime?\n              color: theme.colors.white,\n              fontSize: 10,\n              fontWeight: 'bold',\n              userSelect: 'none',\n              zIndex: 1,\n            }}\n          >\n            {MAX_DETECT_NEW_RUNS_RESULTS > newRunsCount ? newRunsCount : `${MAX_DETECT_NEW_RUNS_RESULTS - 1}+`}\n          </div>\n        )}\n        <LegacyTooltip\n          title={\n            <FormattedMessage\n              defaultMessage=\"Refresh\"\n              description=\"refresh button text to refresh the experiment runs\"\n            />\n          }\n          useAsLabel\n        >\n          <Button\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewrefreshbutton.tsx_123\"\n            onClick={refreshRuns}\n            data-testid=\"runs-refresh-button\"\n            icon={<SyncIcon />}\n          />\n        </LegacyTooltip>\n      </div>\n    );\n  },\n);\n\n/**\n * The only thing that we're interested in the store is the current set of runInfos.\n * We're going to monitor it so we will know when new runs are fetched.\n */\nconst mapStateToProps = (state: { entities: ExperimentStoreEntities }) => {\n  return { runInfos: state.entities.runInfosByUuid };\n};\n\nexport const ExperimentViewRefreshButton = connect(mapStateToProps, undefined, undefined, {\n  // We're interested only in \"entities\" sub-tree so we won't\n  // re-render on other state changes (e.g. API request IDs)\n  areStatesEqual: (nextState, prevState) => nextState.entities.runInfosByUuid === prevState.entities.runInfosByUuid,\n})(ExperimentViewRefreshButtonImpl);\n","import { useMemo } from 'react';\nimport LocalStorageUtils from '../../../../common/utils/LocalStorageUtils';\n\n/**\n * This hook returns a memoized version of persistable store namespaced for the ExperimentView.\n * It can serve as a store for persisting state for a particular experiment - in this case,\n * the experiment id should be provided as a `identifier` parameter. It can also serve as a store for some\n * general purpose - e.g. you can provide \"onboarding\" as a identifier to get a store specific\n * for the onboarding section of the experiment view.\n *\n * @param storeIdentifier a unique identifier of created store - can be an experiment id or a general purpose name\n */\nexport const useExperimentViewLocalStore = (storeIdentifier: string) =>\n  useMemo(() => LocalStorageUtils.getStoreForComponent('ExperimentView', storeIdentifier), [storeIdentifier]);\n","import React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { ExperimentSearchSyntaxDocUrl } from '../../../../../common/constants';\n\nexport const RunsSearchTooltipContent = () => {\n  return (\n    <div className=\"search-input-tooltip-content\">\n      <FormattedMessage\n        defaultMessage=\"Search runs using a simplified version of the SQL {whereBold} clause.\"\n        description=\"Tooltip string to explain how to search runs from the experiments table\"\n        values={{ whereBold: <b>WHERE</b> }}\n      />{' '}\n      <FormattedMessage\n        defaultMessage=\"<link>Learn more</link>\"\n        description=\"Learn more tooltip link to learn more on how to search in an experiments run table\"\n        values={{\n          link: (chunks: any) => (\n            <a href={ExperimentSearchSyntaxDocUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n              {chunks}\n            </a>\n          ),\n        }}\n      />\n      <br />\n      <FormattedMessage defaultMessage=\"Examples:\" description=\"Text header for examples of mlflow search syntax\" />\n      <br />\n      {'• metrics.rmse >= 0.8'}\n      <br />\n      {'• metrics.`f1 score` < 1'}\n      <br />\n      • params.model = 'tree'\n      <br />\n      • attributes.run_name = 'my run'\n      <br />\n      • tags.`mlflow.user` = 'myUser'\n      <br />\n      {\"• metric.f1_score > 0.9 AND params.model = 'tree'\"}\n      <br />\n      • dataset.name IN ('dataset1', 'dataset2')\n      <br />\n      • attributes.run_id IN ('a1b2c3d4', 'e5f6g7h8')\n      <br />• tags.model_class LIKE 'sklearn.linear_model%'\n    </div>\n  );\n};\n","import React from 'react';\nimport { ExperimentRunsSelectorResult } from '../../utils/experimentRuns.selector';\n\nexport type Option = {\n  label?: string | React.ReactNode;\n  value: string;\n};\n\nexport type OptionGroup = {\n  label: string;\n  options: Option[];\n};\n\nexport type Entity = {\n  name: string;\n  startIndex: number;\n  endIndex: number;\n};\n\nexport type Clause = {\n  clause: string;\n  startIndex: number;\n};\n\nexport type EntityNameGroup = {\n  metricNames: string[];\n  paramNames: string[];\n  tagNames: string[];\n};\n\nexport const ATTRIBUTE_OPTIONS = [\n  'run_id',\n  'run_name',\n  'status',\n  'artifact_uri',\n  'user_id',\n  'start_time',\n  'end_time',\n  'created',\n].map((s) => ({ value: `attributes.${s}` }));\n\nexport const getEntityNamesFromRunsData = (\n  newRunsData: ExperimentRunsSelectorResult,\n  existingNames: EntityNameGroup,\n): EntityNameGroup => {\n  const mergeDedup = (list1: any[], list2: any[]) => [...new Set([...list1, ...list2])];\n  const getTagNames = (tagsList: any[]) => tagsList.flatMap((tagRecord) => Object.keys(tagRecord));\n\n  const metricNames = mergeDedup(existingNames.metricNames, newRunsData.metricKeyList);\n  const paramNames = mergeDedup(existingNames.paramNames, newRunsData.paramKeyList);\n  const tagNames = mergeDedup(getTagNames(existingNames.tagNames), getTagNames(newRunsData.tagsList));\n  // Filter out internal tag names and wrap names that include control characters in backticks.\n  const tagNamesCleaned = tagNames\n    .filter((s: string) => !s.startsWith('mlflow.'))\n    .map((s: string) => {\n      if (s.includes('\"') || s.includes(' ') || s.includes('.')) {\n        return `\\`${s}\\``;\n      } else if (s.includes('`')) {\n        return `\"${s}\"`;\n      } else return s;\n    });\n  return {\n    metricNames,\n    paramNames,\n    tagNames: tagNamesCleaned,\n  };\n};\n\nexport const getOptionsFromEntityNames = (entityNames: EntityNameGroup): OptionGroup[] => [\n  {\n    label: 'Metrics',\n    options: entityNames.metricNames.map((m) => ({ value: `metrics.${m}` })),\n  },\n  {\n    label: 'Parameters',\n    options: entityNames.paramNames.map((p) => ({ value: `params.${p}` })),\n  },\n  {\n    label: 'Tags',\n    options: entityNames.tagNames.map((t) => ({ value: `tags.${t}` })),\n  },\n  {\n    label: 'Attributes',\n    options: ATTRIBUTE_OPTIONS,\n  },\n];\n\n// Bolds a specified segment of `wholeText`.\nconst boldedText = (wholeText: string, shouldBeBold: string) => {\n  const textArray = wholeText.split(RegExp(shouldBeBold.replace('.', '\\\\.'), 'ig'));\n  const match = wholeText.match(RegExp(shouldBeBold.replace('.', '\\\\.'), 'ig'));\n\n  return (\n    // Autocomplete sets font weight to 600 on full match resulting in double bolding.\n    // Override this here\n    <span css={{ fontWeight: 'normal' }} data-test-id={wholeText}>\n      {textArray.map((item, index) => (\n        <React.Fragment key={index}>\n          {item}\n          {index !== textArray.length - 1 && match && <b>{match[index]}</b>}\n        </React.Fragment>\n      ))}\n    </span>\n  );\n};\n\n/**\n * Given an input string, returns a list of Clause objects\n * containing the clauses in the input and the indices of their\n * starting positions in the overall string.\n */\nconst getClausesAndStartIndex = (str: string) => {\n  const re = /and[\\s]+/gi;\n  const results: Clause[] = [];\n  let match, position;\n  while (((position = re.lastIndex), (match = re.exec(str)))) {\n    results.push({ clause: str.substring(position, match.index), startIndex: position });\n  }\n  results.push({ clause: str.substring(position), startIndex: position });\n  return results;\n};\n\n/**\n * Given an input string, returns a list of Entity objects\n * containing the search entities in the input and their\n * start and end indices in the whole string.\n */\n\nexport const getEntitiesAndIndices = (str: string) => {\n  const re = />|<|>=|<=|=|!=|like|ilike/gi;\n  const clauses = getClausesAndStartIndex(str);\n  const results: Entity[] = [];\n  clauses.forEach((clauseObj) => {\n    const clauseText = clauseObj.clause;\n    const entity = clauseText.split(re)[0];\n    const { startIndex } = clauseObj;\n    results.push({\n      name: entity,\n      startIndex: 0 + startIndex,\n      endIndex: entity.length + startIndex,\n    });\n  });\n  return results;\n};\n\nexport const getFilteredOptionsFromEntityName = (\n  baseOptions: OptionGroup[],\n  entityBeingEdited: Entity,\n  suggestionLimits: any,\n): OptionGroup[] => {\n  return baseOptions\n    .map((group) => {\n      const newOptions = group.options\n        .filter((option) => option.value.toLowerCase().includes(entityBeingEdited.name.toLowerCase().trim()))\n        .map((match) => ({\n          value: match.value,\n          label: boldedText(match.value, entityBeingEdited.name.trim()),\n        }));\n      const limitForGroup = (suggestionLimits as any)[group.label];\n      const ellipsized = [\n        ...newOptions.slice(0, limitForGroup),\n        ...(newOptions.length > limitForGroup ? [{ label: '...', value: `..._${group.label}` }] : []),\n      ];\n      return {\n        label: group.label,\n        options: ellipsized,\n      };\n    })\n    .filter((group) => group.options.length > 0);\n};\n","import { isEqual } from 'lodash';\nimport React, { useState, useEffect, useRef, useCallback, useMemo } from 'react';\nimport {\n  AutoComplete,\n  Input,\n  SearchIcon,\n  LegacyTooltip,\n  InfoIcon,\n  Button,\n  CloseIcon,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { Theme } from '@emotion/react';\nimport { ExperimentRunsSelectorResult } from '../../utils/experimentRuns.selector';\nimport { ErrorWrapper } from '../../../../../common/utils/ErrorWrapper';\nimport { useExperimentViewLocalStore } from '../../hooks/useExperimentViewLocalStore';\nimport { RunsSearchTooltipContent } from './RunsSearchTooltipContent';\nimport {\n  Entity,\n  EntityNameGroup,\n  getEntitiesAndIndices,\n  getEntityNamesFromRunsData,\n  getFilteredOptionsFromEntityName,\n  getOptionsFromEntityNames,\n  OptionGroup,\n} from './RunsSearchAutoComplete.utils';\n\n// A default placeholder for the search box\nconst SEARCH_BOX_PLACEHOLDER = 'metrics.rmse < 1 and params.model = \"tree\"';\nconst TOOLTIP_COOKIE_KEY = 'tooltipLastPopup';\nconst WEEK_IN_SECONDS = 604800;\n\nexport type RunsSearchAutoCompleteProps = {\n  runsData: ExperimentRunsSelectorResult;\n  searchFilter: string;\n  onSearchFilterChange: (newValue: string) => void;\n  onClear: () => void;\n  requestError: ErrorWrapper | null;\n};\n\n/**\n * Autocomplete component that provides suggestions for MLflow search entity names.\n */\nexport const RunsSearchAutoComplete = (props: RunsSearchAutoCompleteProps) => {\n  const { runsData, searchFilter, requestError, onSearchFilterChange, onClear } = props;\n  const { theme } = useDesignSystemTheme();\n\n  const [text, setText] = useState<string>('');\n  const [autocompleteEnabled, setAutocompleteEnabled] = useState<boolean | undefined>(undefined);\n  const [focused, setFocused] = useState(false);\n  const onFocus = () => setFocused(true);\n  const onBlur = () => setFocused(false);\n  // Determines whether the text was changed by making a selection in the autocomplete\n  // dialog, as opposed to by typing.\n  const [lastSetBySelection, setLastSetBySelection] = useState(false);\n  const existingEntityNamesRef = useRef<EntityNameGroup>({\n    metricNames: [],\n    paramNames: [],\n    tagNames: [],\n  });\n  // How many suggestions should be shown per entity group before the group is ellipsized.\n  const [suggestionLimits, setSuggestionLimits] = useState({\n    Metrics: 10,\n    Parameters: 10,\n    Tags: 10,\n  });\n  // List of entities parsed from `text`.\n  const currentEntitiesRef = useRef<Entity[]>([]);\n  const [entityBeingEdited, setEntityBeingEdited] = useState<Entity | undefined>(undefined);\n\n  // Each time we're setting search filter externally, update it here as well\n  useEffect(() => {\n    setText(searchFilter);\n  }, [searchFilter]);\n\n  const baseOptions = useMemo<OptionGroup[]>(() => {\n    const existingEntityNames = existingEntityNamesRef.current;\n    const mergedEntityNames = getEntityNamesFromRunsData(runsData, existingEntityNames);\n    existingEntityNamesRef.current = mergedEntityNames;\n    return getOptionsFromEntityNames(mergedEntityNames);\n    // existingEntityNamesRef is only set here. Omit from dependencies to avoid infinite loop\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [runsData]);\n\n  useEffect(() => {\n    const previousEntities = currentEntitiesRef.current;\n    const newEntities = getEntitiesAndIndices(text);\n    currentEntitiesRef.current = newEntities;\n\n    if (lastSetBySelection) {\n      setLastSetBySelection(false);\n      return;\n    }\n    const currentEntitiesNames = newEntities.map((e) => e.name);\n    const previousEntitiesNames = previousEntities.map((e) => e.name);\n    if (!isEqual(currentEntitiesNames, previousEntitiesNames) && newEntities.length >= previousEntities.length) {\n      let i = 0;\n      while (i < newEntities.length) {\n        if (i >= previousEntities.length || newEntities[i].name.trim() !== previousEntities[i].name.trim()) {\n          setAutocompleteEnabled(true);\n          setEntityBeingEdited(newEntities[i]);\n          return;\n        }\n        i++;\n      }\n    }\n    // If here, no entity is being edited\n    setAutocompleteEnabled(false);\n    // currentEntitiesRef is not used anywhere else and state setters are safe to\n    // omit from hook dependencies as per react docs\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [text]);\n\n  const filteredOptions = useMemo(() => {\n    if (!entityBeingEdited) {\n      return [];\n    }\n    return getFilteredOptionsFromEntityName(baseOptions, entityBeingEdited, suggestionLimits);\n  }, [baseOptions, entityBeingEdited, suggestionLimits]);\n\n  /**\n   * Called when an option is picked from the autocomplete dropdown, either by hitting enter\n   * when selected, or clicking on it\n   * @param value\n   */\n  const onSelect = useCallback(\n    (value: string, option: any) => {\n      if (!entityBeingEdited) {\n        return;\n      }\n      if (value.startsWith('...')) {\n        // Keep the dialog open as this is not a real selection\n        setAutocompleteEnabled(true);\n        const groupName = option.value.split('_')[1];\n        setSuggestionLimits((prevSuggestionLimits) => ({\n          ...prevSuggestionLimits,\n          [groupName]: (prevSuggestionLimits as any)[groupName] + 10,\n        }));\n      } else {\n        const prefix = text.substring(0, entityBeingEdited.startIndex);\n        const suffix = text.substring(entityBeingEdited.endIndex);\n        setText(prefix + value + ' ' + suffix);\n        setLastSetBySelection(true);\n        setAutocompleteEnabled(false);\n      }\n    },\n    [text, setText, entityBeingEdited, setAutocompleteEnabled],\n  );\n\n  const localStorageInstance = useExperimentViewLocalStore(TOOLTIP_COOKIE_KEY);\n\n  const [showTooltipOnError, setShowTooltipOnError] = useState(() => {\n    const currentTimeSecs = Math.floor(Date.now() / 1000);\n    const storedItem = localStorageInstance.getItem(TOOLTIP_COOKIE_KEY);\n    // Show tooltip again if it was last shown 1 week ago or older\n    return !storedItem || parseInt(storedItem, 10) < currentTimeSecs - WEEK_IN_SECONDS;\n  });\n  const tooltipIcon = React.useRef<HTMLButtonElement>(null);\n\n  // If requestError has changed and there is an error, pop up the tooltip\n  useEffect(() => {\n    if (requestError && showTooltipOnError) {\n      const currentTimeSecs = Math.floor(Date.now() / 1000);\n      localStorageInstance.setItem(TOOLTIP_COOKIE_KEY, currentTimeSecs);\n      setShowTooltipOnError(false);\n      tooltipIcon.current?.click();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [requestError]);\n\n  const noMatches = filteredOptions.flatMap((o) => o.options).length === 0;\n  const open = autocompleteEnabled && focused && !noMatches;\n\n  // Callback fired when search filter is being used\n  const triggerSearch: React.KeyboardEventHandler<HTMLInputElement> = useCallback(\n    (e) => {\n      if (e.key === 'Enter') {\n        // If the autocomplete dialog is open, use the enter key to make a selection\n        // rather than initiate search.\n        if (open) {\n          setAutocompleteEnabled(false);\n        } else {\n          onSearchFilterChange(text);\n        }\n      }\n      if (e.key === 'Escape') {\n        e.preventDefault();\n        if (open) {\n          setAutocompleteEnabled(false);\n        }\n      }\n    },\n    [open, text, onSearchFilterChange],\n  );\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        gap: theme.spacing.sm,\n        width: 430,\n        [theme.responsive.mediaQueries.xs]: {\n          width: 'auto',\n        },\n      }}\n    >\n      <AutoComplete\n        dropdownMatchSelectWidth={560}\n        css={{\n          width: 560,\n          [theme.responsive.mediaQueries.xs]: {\n            width: 'auto',\n          },\n        }}\n        defaultOpen={false}\n        defaultActiveFirstOption\n        open={open}\n        options={filteredOptions}\n        onSelect={onSelect}\n        value={text}\n        data-test-id=\"runs-search-autocomplete\"\n        dropdownRender={(menu) => (\n          <div\n            css={{\n              '.du-bois-light-select-item-option-active:not(.du-bois-light-select-item-option-disabled)': {\n                // TODO: ask the design team about the color existing in the palette\n                backgroundColor: '#e6f1f5',\n              },\n            }}\n          >\n            {menu}\n          </div>\n        )}\n      >\n        <Input\n          value={text}\n          prefix={\n            <SearchIcon\n              css={{\n                svg: { width: 16, height: 16, color: theme.colors.textSecondary },\n              }}\n            />\n          }\n          onKeyDown={triggerSearch}\n          onClick={onFocus}\n          onBlur={onBlur}\n          onChange={(e) => setText(e.target.value)}\n          placeholder={SEARCH_BOX_PLACEHOLDER}\n          data-test-id=\"search-box\"\n          suffix={\n            <div css={{ display: 'flex', gap: 4, alignItems: 'center' }}>\n              {text && (\n                <Button\n                  componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_runssearchautocomplete.tsx_212\"\n                  onClick={onClear}\n                  type=\"link\"\n                  data-test-id=\"clear-button\"\n                >\n                  <CloseIcon />\n                </Button>\n              )}\n              <LegacyTooltip\n                title={<RunsSearchTooltipContent />}\n                placement=\"right\"\n                dangerouslySetAntdProps={{\n                  overlayInnerStyle: { width: '150%' },\n                  trigger: ['focus', 'click'],\n                }}\n              >\n                <Button\n                  size=\"small\"\n                  ref={tooltipIcon}\n                  componentId=\"mlflow.experiment_page.search_filter.tooltip\"\n                  type=\"link\"\n                  icon={\n                    <InfoIcon\n                      css={{\n                        svg: { width: 16, height: 16, color: theme.colors.textSecondary },\n                      }}\n                    />\n                  }\n                />\n              </LegacyTooltip>\n            </div>\n          }\n        />\n      </AutoComplete>\n    </div>\n  );\n};\n","import {\n  Button,\n  CopyIcon,\n  Input,\n  Modal,\n  TabPane,\n  Tabs,\n  Typography,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport { CodeSnippet } from '@databricks/web-shared/snippet';\nimport { CopyButton } from '../../../shared/building_blocks/CopyButton';\n\ntype Props = {\n  isOpen: boolean;\n  closeModal: () => void;\n  experimentId: string;\n};\n\nconst SNIPPET_LINE_HEIGHT = 18;\n\nexport const CreateNotebookRunModal = ({ isOpen, closeModal, experimentId }: Props): JSX.Element => {\n  const { theme } = useDesignSystemTheme();\n\n  const classical_ml_text = `\nimport mlflow\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.datasets import load_diabetes\nfrom sklearn.ensemble import RandomForestRegressor\n\n# set the experiment id\nmlflow.set_experiment(experiment_id=\"${experimentId}\")\n\nmlflow.autolog()\ndb = load_diabetes()\n\nX_train, X_test, y_train, y_test = train_test_split(db.data, db.target)\n\n# Create and train models.\nrf = RandomForestRegressor(n_estimators=100, max_depth=6, max_features=3)\nrf.fit(X_train, y_train)\n\n# Use the model to make predictions on the test dataset.\npredictions = rf.predict(X_test)\n`.trimStart();\n\n  const llm_text = `\nimport mlflow\nimport openai\n\n# you must set the OPENAI_API_KEY environment variable\nassert (\n  \"OPENAI_API_KEY\" in os.environ\n), \"Please set the OPENAI_API_KEY environment variable.\"\n\n# set the experiment id\nmlflow.set_experiment(experiment_id=\"${experimentId}\")\n\nsystem_prompt = (\n  \"The following is a conversation with an AI assistant.\"\n  + \"The assistant is helpful and very friendly.\"\n)\n\n# start a run\nmlflow.start_run()\nmlflow.log_param(\"system_prompt\", system_prompt)\n\n# Create a question answering model using prompt engineering\n# with OpenAI. Log the model to MLflow Tracking\nlogged_model = mlflow.openai.log_model(\n    model=\"gpt-4o-mini\",\n    task=openai.ChatCompletion,\n    artifact_path=\"model\",\n    messages=[\n        {\"role\": \"system\", \"content\": system_prompt},\n        {\"role\": \"user\", \"content\": \"{question}\"},\n    ],\n)\n\n# Evaluate the model on some example questions\nquestions = pd.DataFrame(\n    {\n        \"question\": [\n            \"How do you create a run with MLflow?\",\n            \"How do you log a model with MLflow?\",\n            \"What is the capital of France?\",\n        ]\n    }\n)\nmlflow.evaluate(\n    model=logged_model.model_uri,\n    model_type=\"question-answering\",\n    data=questions,\n)\nmlflow.end_run()\n`.trimStart();\n\n  const codeSnippetMessage = () => {\n    return 'Run this code snippet in a notebook or locally, to create an experiment run';\n  };\n\n  // Calculate stable height for the code snippet UI area, based on the line count of the shortest one\n  const snippetHeight =\n    (Math.min(...[classical_ml_text, llm_text].map((text) => text.split('\\n').length)) + 1) * SNIPPET_LINE_HEIGHT;\n\n  return (\n    <Modal\n      visible={isOpen}\n      onCancel={closeModal}\n      onOk={closeModal}\n      footer={\n        <div css={{ display: 'flex', gap: theme.spacing.sm, justifyContent: 'flex-end' }}>\n          <Button\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_evaluation-artifacts-compare_createnotebookrunmodal.tsx_117\"\n            onClick={closeModal}\n            type=\"primary\"\n          >\n            <FormattedMessage\n              defaultMessage=\"Okay\"\n              description=\"Experiment page > new notebook run modal > okay button label\"\n            />\n          </Button>\n        </div>\n      }\n      title={\n        <div>\n          <Typography.Title level={2} css={{ marginTop: theme.spacing.sm, marginBottom: theme.spacing.xs }}>\n            <FormattedMessage\n              defaultMessage=\"New run using notebook\"\n              description=\"Experiment page > new notebook run modal > modal title\"\n            />\n          </Typography.Title>\n          <Typography.Hint css={{ marginTop: 0, fontWeight: 'normal' }}>{codeSnippetMessage()}</Typography.Hint>\n        </div>\n      }\n    >\n      <Tabs>\n        <TabPane\n          tab={<FormattedMessage defaultMessage=\"Classical ML\" description=\"Example text snippet for classical ML\" />}\n          key=\"classical-ml\"\n        >\n          <CodeSnippet\n            style={{ padding: '5px', height: snippetHeight }}\n            language=\"python\"\n            actions={\n              <div\n                style={{\n                  marginTop: theme.spacing.sm,\n                  marginRight: theme.spacing.md,\n                }}\n              >\n                <CopyButton copyText={classical_ml_text} showLabel={false} icon={<CopyIcon />} />\n              </div>\n            }\n          >\n            {classical_ml_text}\n          </CodeSnippet>\n        </TabPane>\n        <TabPane tab={<FormattedMessage defaultMessage=\"LLM\" description=\"Example text snippet for LLM\" />} key=\"llm\">\n          <CodeSnippet\n            style={{ padding: '5px', height: snippetHeight }}\n            language=\"python\"\n            actions={\n              <div\n                style={{\n                  marginTop: theme.spacing.sm,\n                  marginRight: theme.spacing.md,\n                }}\n              >\n                <CopyButton copyText={llm_text} showLabel={false} icon={<CopyIcon />} />\n              </div>\n            }\n          >\n            {llm_text}\n          </CodeSnippet>\n        </TabPane>\n      </Tabs>\n    </Modal>\n  );\n};\n\nconst styles = {\n  formItem: { marginBottom: 16 },\n};\n","import { ErrorWrapper } from '../../common/utils/ErrorWrapper';\nimport { ModelGatewayRouteTask } from '../sdk/MlflowEnums';\nimport type {\n  EndpointModelChatResponseType,\n  EndpointModelCompletionsResponseType,\n  EndpointModelGatewayResponseType,\n  ModelGatewayChatResponseType,\n  ModelGatewayCompletionsResponseType,\n  ModelGatewayResponseType,\n  ModelGatewayRoute,\n} from '../sdk/ModelGatewayService';\n\nexport class GatewayErrorWrapper extends ErrorWrapper {\n  getGatewayErrorMessage() {\n    return this.textJson?.error?.message || this.textJson?.message || this.textJson?.toString() || this.text;\n  }\n}\nexport const parseEndpointEvaluationResponse = (\n  response: EndpointModelGatewayResponseType,\n  task: ModelGatewayRouteTask,\n) => {\n  // We're supporting completions and chat responses for the time being\n  if (task === ModelGatewayRouteTask.LLM_V1_COMPLETIONS) {\n    const completionsResponse = response as EndpointModelCompletionsResponseType;\n    const text = completionsResponse.choices?.[0]?.text;\n    const { usage } = completionsResponse;\n    if (text && usage) {\n      return {\n        text,\n        metadata: {\n          total_tokens: usage.total_tokens,\n          output_tokens: usage.completion_tokens,\n          input_tokens: usage.prompt_tokens,\n        },\n      };\n    }\n  }\n  if (task === ModelGatewayRouteTask.LLM_V1_CHAT) {\n    const chatResponse = response as EndpointModelChatResponseType;\n    const text = chatResponse.choices?.[0]?.message?.content;\n    const { usage } = chatResponse;\n    if (text && usage) {\n      return {\n        text,\n        metadata: {\n          total_tokens: usage.total_tokens,\n          output_tokens: usage.completion_tokens,\n          input_tokens: usage.prompt_tokens,\n        },\n      };\n    }\n  }\n  // Should not happen since we shouldn't call other route types for now\n  throw new Error(`Unrecognizable AI gateway response metadata \"${response.usage}\"!`);\n};\nexport const parseEvaluationResponse = (\n  response: ModelGatewayResponseType | EndpointModelGatewayResponseType,\n  gatewayRoute: ModelGatewayRoute,\n) => {\n  if (gatewayRoute.type === 'mlflow_deployment_endpoint') {\n    // TODO\n    return parseEndpointEvaluationResponse(response as EndpointModelGatewayResponseType, gatewayRoute.task);\n  }\n  throw new Error(`Unrecognizable served LLM model route type \"${gatewayRoute.type}\"!`);\n};\n","import invariant from 'invariant';\nimport { getJson } from '../../common/utils/FetchUtils';\nimport { MlflowService } from './MlflowService';\nimport { ModelGatewayRouteTask } from './MlflowEnums';\nimport { GatewayErrorWrapper } from '../utils/LLMGatewayUtils';\nimport { fetchEndpoint, HTTPMethods } from '../../common/utils/FetchUtils';\nimport { parseEndpointEvaluationResponse } from '../utils/LLMGatewayUtils';\nexport const DATABRICKS_API_CLIENT_PROMPTLAB = 'PromptLab';\n\nexport interface ModelGatewayQueryPayload {\n  inputText: string;\n  parameters: {\n    temperature?: number;\n    max_tokens?: number;\n    stop?: string[];\n  };\n}\n\nexport interface ModelGatewayResponseMetadata<T extends ModelGatewayRouteTask> {\n  mode: string;\n  route_type: T;\n  total_tokens: number;\n  output_tokens: number;\n  input_tokens: number;\n}\n\nexport interface ModelGatewayCompletionsResponseType {\n  candidates: {\n    text: string;\n    metadata: {\n      finish_reason: string;\n    };\n  }[];\n\n  metadata: ModelGatewayResponseMetadata<ModelGatewayRouteTask.LLM_V1_COMPLETIONS>;\n}\n\nexport interface ModelGatewayChatResponseType {\n  candidates: {\n    message: { role: string; content: string };\n    metadata: {\n      finish_reason: string;\n    };\n  }[];\n\n  metadata: ModelGatewayResponseMetadata<ModelGatewayRouteTask.LLM_V1_CHAT>;\n}\n\nexport type ModelGatewayResponseType = ModelGatewayCompletionsResponseType | ModelGatewayChatResponseType;\n\nexport interface EndpointModelCompletionsResponseType {\n  choices: {\n    text: string;\n    finish_reason: string;\n  }[];\n\n  usage: {\n    completion_tokens: number;\n    prompt_tokens: number;\n    total_tokens: number;\n  };\n}\n\nexport interface EndpointModelChatResponseType {\n  choices: {\n    message: {\n      role: string;\n      content: string;\n    };\n    finish_reason: string;\n  }[];\n\n  usage: {\n    completion_tokens: number;\n    prompt_tokens: number;\n    total_tokens: number;\n  };\n}\n\nexport type EndpointModelGatewayResponseType = EndpointModelCompletionsResponseType | EndpointModelChatResponseType;\n\nexport interface ModelGatewayModelInfo {\n  /**\n   * \"Original\" name of the model (e.g. \"gpt-4o-mini\")\n   */\n  name: string;\n  /**\n   * Name of the model provider (e.g. \"OpenAI\")\n   */\n  provider: string;\n}\n\n/**\n * Response object for routes. Does not include model credentials.\n */\nexport interface ModelGatewayRouteLegacy {\n  /**\n   * User-defined name of the model route\n   */\n  name: string;\n  /**\n   * Type of route (e.g., embedding, text generation, etc.)\n   */\n  route_type: ModelGatewayRouteTask;\n  /**\n   * Underlying ML model that can be accessed via this route. Could add other types of resources in the future.\n   */\n  model: ModelGatewayModelInfo;\n}\n\nexport interface MlflowDeploymentsEndpoint {\n  name: string;\n  endpoint_type: ModelGatewayRouteTask;\n  endpoint_url: string;\n  model: ModelGatewayModelInfo;\n}\n\nexport type ModelGatewayRouteType = 'mlflow_deployment_endpoint';\n\nexport interface ModelGatewayRoute {\n  type: ModelGatewayRouteType;\n  /**\n   * Key of the route, the type is always prefix\n   */\n  key: `${ModelGatewayRouteType}:${string}`;\n\n  name: string;\n  /**\n   * Type of route (e.g., embedding, text generation, etc.)\n   */\n  task: ModelGatewayRouteTask;\n  /**\n   * MLflow deployments URL of the endpoint\n   */\n  mlflowDeployment?: MlflowDeploymentsEndpoint;\n}\n\nexport interface SearchMlflowDeploymentsModelRoutesResponse {\n  endpoints: MlflowDeploymentsEndpoint[];\n}\n\nconst gatewayErrorHandler = ({\n  reject,\n  response,\n  err,\n}: {\n  reject: (reason?: any) => void;\n  response: Response;\n  err: Error;\n}) => {\n  if (response) {\n    response.text().then((text: any) => reject(new GatewayErrorWrapper(text, response.status)));\n  } else if (err) {\n    reject(new GatewayErrorWrapper(err, 500));\n  }\n};\n\nexport class ModelGatewayService {\n  static createEvaluationTextPayload(inputText: string, task: ModelGatewayRouteTask) {\n    switch (task) {\n      case ModelGatewayRouteTask.LLM_V1_COMPLETIONS: {\n        return { prompt: inputText };\n      }\n      case ModelGatewayRouteTask.LLM_V1_CHAT: {\n        return { messages: [{ content: inputText, role: 'user' }] };\n      }\n      case ModelGatewayRouteTask.LLM_V1_EMBEDDINGS: {\n        // Should never happen\n        throw new Error(`Unsupported served LLM model task \"${task}\"!`);\n      }\n      default:\n        throw new Error(`Unknown served LLM model task \"${task}\"!`);\n    }\n  }\n\n  static queryMLflowDeploymentEndpointRoute = async (\n    route: ModelGatewayRoute,\n    data: ModelGatewayQueryPayload,\n  ): Promise<any> => {\n    invariant(route.mlflowDeployment, 'Trying to call a MLflow deployment route without a deployment_url');\n    const { inputText } = data;\n    const textPayload = ModelGatewayService.createEvaluationTextPayload(inputText, route.task);\n    const processed_data = {\n      ...textPayload,\n      ...data.parameters,\n    };\n\n    return MlflowService.gatewayProxyPost({\n      gateway_path: route.mlflowDeployment.endpoint_url.substring(1),\n      json_data: processed_data,\n    }) as Promise<ModelGatewayResponseType>;\n  };\n\n  static queryModelGatewayRoute = async (route: ModelGatewayRoute, payload: ModelGatewayQueryPayload) => {\n    if (route.type === 'mlflow_deployment_endpoint') {\n      invariant(route.mlflowDeployment, 'Trying to call a serving endpoint route without an endpoint');\n      const result = await this.queryMLflowDeploymentEndpointRoute(route, payload);\n      return parseEndpointEvaluationResponse(result, route.task);\n    }\n\n    throw new Error('Unknown route type');\n  };\n}\n","import { useCallback, useState } from 'react';\nimport { MessageDescriptor, defineMessage } from 'react-intl';\n\n// Hardcoded model parameter definitions\nconst parameterDefinitions: {\n  name: 'temperature' | 'max_tokens' | 'stop';\n  type: 'slider' | 'input' | 'list';\n  string: MessageDescriptor;\n  helpString: MessageDescriptor;\n  max?: number;\n  min?: number;\n  step?: number;\n}[] = [\n  {\n    type: 'slider',\n    name: 'temperature',\n    string: defineMessage({\n      defaultMessage: 'Temperature',\n      description: 'Experiment page > prompt lab > temperature parameter label',\n    }),\n    helpString: defineMessage({\n      defaultMessage: 'Increase or decrease the confidence level of the language model.',\n      description: 'Experiment page > prompt lab > temperature parameter help text',\n    }),\n    max: 1,\n    min: 0,\n    step: 0.01,\n  },\n  {\n    type: 'input',\n    name: 'max_tokens',\n    string: defineMessage({\n      defaultMessage: 'Max tokens',\n      description: 'Experiment page > prompt lab > max tokens parameter label',\n    }),\n    helpString: defineMessage({\n      defaultMessage: 'Maximum number of language tokens returned from evaluation.',\n      description: 'Experiment page > prompt lab > max tokens parameter help text',\n    }),\n    max: 64 * 1024,\n    min: 1,\n    step: 1,\n  },\n  {\n    type: 'list',\n    name: 'stop',\n    string: defineMessage({\n      defaultMessage: 'Stop Sequences',\n      description: 'Experiment page > prompt lab > stop parameter label',\n    }),\n    helpString: defineMessage({\n      defaultMessage: 'Specify sequences that signal the model to stop generating text.',\n      description: 'Experiment page > prompt lab > stop parameter help text',\n    }),\n  },\n];\n\n// TODO: Fetch better values for default parameters\nconst DEFAULT_PARAMETER_VALUES = {\n  temperature: 0.01,\n  max_tokens: 100,\n};\n\nexport const usePromptEvaluationParameters = () => {\n  const [parameters, updateParameters] = useState<{\n    temperature: number;\n    max_tokens: number;\n    stop?: string[] | undefined;\n  }>(DEFAULT_PARAMETER_VALUES);\n\n  const updateParameter = useCallback((name: string, value: number | string[]) => {\n    updateParameters((currentParameters) => ({ ...currentParameters, [name]: value }));\n  }, []);\n\n  return {\n    parameterDefinitions,\n    parameters,\n    updateParameter,\n  };\n};\n","import { FormUI, InfoIcon, Input, LegacyTooltip, useDesignSystemTheme, Tag } from '@databricks/design-system';\nimport { usePromptEvaluationParameters } from './hooks/usePromptEvaluationParameters';\nimport { FormattedMessage } from 'react-intl';\nimport { LineSmoothSlider } from '../LineSmoothSlider';\nimport { isArray, uniq } from 'lodash';\nimport { useState } from 'react';\n\nconst EvaluationCreateParameterListControl = ({\n  parameterValue,\n  updateParameter,\n  disabled,\n}: {\n  parameterValue: number | string[] | undefined;\n  updateParameter: (value: number | string[]) => void;\n  disabled?: boolean;\n}) => {\n  const [draftValue, setDraftValue] = useState<string>('');\n  const { theme } = useDesignSystemTheme();\n\n  if (!isArray(parameterValue)) {\n    return null;\n  }\n\n  return (\n    <>\n      <div css={{ marginTop: theme.spacing.xs, marginBottom: theme.spacing.sm }}>\n        {parameterValue.map((stop, index) => (\n          <Tag\n            key={index}\n            closable\n            onClose={() => {\n              updateParameter(parameterValue.filter((s) => s !== stop));\n            }}\n          >\n            {stop}\n          </Tag>\n        ))}\n      </div>\n      <Input\n        allowClear\n        css={{ width: '100%' }}\n        disabled={disabled}\n        onChange={(e) => setDraftValue(e.target.value)}\n        value={draftValue}\n        onKeyDown={(e) => {\n          if (e.key === 'Enter' && draftValue.trim()) {\n            updateParameter(uniq([...parameterValue, draftValue]));\n            setDraftValue('');\n          }\n        }}\n      />\n    </>\n  );\n};\n\nexport const EvaluationCreatePromptParameters = ({\n  disabled = false,\n  parameters,\n  updateParameter,\n}: {\n  disabled?: boolean;\n  parameters: {\n    temperature: number;\n    max_tokens: number;\n    stop?: string[] | undefined;\n  };\n  updateParameter: (name: string, value: number | string[]) => void;\n}) => {\n  const { parameterDefinitions } = usePromptEvaluationParameters();\n  const { theme } = useDesignSystemTheme();\n  return (\n    <div css={{ marginBottom: theme.spacing.lg }}>\n      <FormUI.Label css={{ marginBottom: theme.spacing.md }}>\n        <FormattedMessage\n          defaultMessage=\"Model parameters\"\n          description=\"Experiment page > new run modal > served LLM model parameters label\"\n        />\n      </FormUI.Label>\n      {parameterDefinitions.map((parameterDef) => (\n        <div key={parameterDef.name} css={{ marginBottom: theme.spacing.md }}>\n          <>\n            <FormUI.Label htmlFor={parameterDef.name} css={{ span: { fontWeight: 'normal' } }}>\n              <FormattedMessage {...parameterDef.string} />\n              <LegacyTooltip title={<FormattedMessage {...parameterDef.helpString} />} placement=\"right\">\n                <InfoIcon\n                  css={{\n                    marginLeft: theme.spacing.sm,\n                    verticalAlign: 'text-top',\n                    color: theme.colors.textSecondary,\n                  }}\n                />\n              </LegacyTooltip>\n            </FormUI.Label>\n            <FormUI.Hint></FormUI.Hint>\n            {parameterDef.name === 'temperature' && (\n              <LineSmoothSlider\n                data-testid={parameterDef.name}\n                disabled={disabled}\n                max={parameterDef.max}\n                min={parameterDef.min}\n                step={parameterDef.step}\n                defaultValue={parameters[parameterDef.name] || 0}\n                onChange={(value) => updateParameter(parameterDef.name, value)}\n              />\n            )}\n            {parameterDef.type === 'input' && (\n              <Input\n                data-testid={parameterDef.name}\n                type=\"number\"\n                disabled={disabled}\n                max={parameterDef.max}\n                min={parameterDef.min}\n                step={parameterDef.step}\n                value={parameters[parameterDef.name] || 0}\n                onChange={(e) => updateParameter(parameterDef.name, parseInt(e.target.value, 10))}\n              />\n            )}\n            {parameterDef.type === 'list' && (\n              <EvaluationCreateParameterListControl\n                parameterValue={parameters[parameterDef.name] ?? []}\n                disabled={disabled}\n                updateParameter={(value) => updateParameter(parameterDef.name, value)}\n              />\n            )}\n          </>\n        </div>\n      ))}\n    </div>\n  );\n};\n","import React, { useCallback, useRef, useState } from 'react';\n\nimport type { TextAreaRef } from 'antd/lib/input/TextArea';\nimport {\n  DEFAULT_PROMPTLAB_NEW_TEMPLATE_VALUE,\n  extractPromptInputVariables,\n} from '../../prompt-engineering/PromptEngineering.utils';\nimport { max } from 'lodash';\n\nconst newVariableStartSegment = ' {{ ';\nconst newVariableEndSegment = ' }}';\nconst newDefaultVariableName = 'new_variable';\n\nconst getNewVariableName = (alreadyExistingVariableNames: string[] = []) => {\n  if (!alreadyExistingVariableNames.includes(newDefaultVariableName)) {\n    return newDefaultVariableName;\n  }\n\n  const maximumVariableNameIndex =\n    max(alreadyExistingVariableNames.map((name) => parseInt(name.match(/new_variable_(\\d+)/)?.[1] || '1', 10))) || 1;\n\n  return `${newDefaultVariableName}_${maximumVariableNameIndex + 1}`;\n};\n\n/**\n * Keeps track of the current prompt value and exports method for adding + autoselecting new variables\n */\nexport const usePromptEvaluationPromptTemplateValue = () => {\n  const [promptTemplate, updatePromptTemplate] = useState(DEFAULT_PROMPTLAB_NEW_TEMPLATE_VALUE);\n\n  const promptTemplateRef = useRef<HTMLTextAreaElement>();\n\n  const handleAddVariableToTemplate = useCallback(() => {\n    updatePromptTemplate((template) => {\n      const newVariableName = getNewVariableName(extractPromptInputVariables(template));\n      const newValue = `${template}${newVariableStartSegment}${newVariableName}${newVariableEndSegment}`;\n\n      // Wait until the next execution frame\n      requestAnimationFrame(() => {\n        const textAreaElement = promptTemplateRef.current;\n        if (!textAreaElement) {\n          return;\n        }\n        // Focus the element and set the newly added variable name\n        textAreaElement.focus();\n        textAreaElement.setSelectionRange(\n          newValue.length - newVariableName.length - newVariableEndSegment.length,\n          newValue.length - newVariableEndSegment.length,\n        );\n      });\n      return newValue;\n    });\n  }, [updatePromptTemplate]);\n\n  const savePromptTemplateInputRef = useCallback((ref: TextAreaRef) => {\n    promptTemplateRef.current = ref?.resizableTextArea?.textArea;\n  }, []);\n\n  return {\n    savePromptTemplateInputRef,\n    handleAddVariableToTemplate,\n    promptTemplate,\n    updatePromptTemplate,\n  };\n};\n","import { Typography } from '@databricks/design-system';\nimport { getPromptInputVariableNameViolations } from '../../prompt-engineering/PromptEngineering.utils';\nimport { FormattedMessage, defineMessage, useIntl } from 'react-intl';\n\nconst whitespaceViolationMessage = defineMessage({\n  defaultMessage: 'The following variable names contain spaces which is disallowed: {invalidNames}',\n  description: 'Experiment page > new run modal > variable name validation > including spaces error',\n});\n\nexport const EvaluationCreateRunPromptTemplateErrors = ({\n  violations,\n}: {\n  violations: ReturnType<typeof getPromptInputVariableNameViolations>;\n}) => {\n  const { namesWithSpaces } = violations;\n  const { formatMessage } = useIntl();\n  return (\n    <>\n      {namesWithSpaces.length > 0 && (\n        <Typography.Text\n          color=\"warning\"\n          size=\"sm\"\n          aria-label={formatMessage(whitespaceViolationMessage, {\n            invalidNames: namesWithSpaces.join(', '),\n          })}\n        >\n          <FormattedMessage\n            {...whitespaceViolationMessage}\n            values={{\n              invalidNames: (\n                <>\n                  {namesWithSpaces.map((nameWithSpace) => (\n                    <code key={nameWithSpace}>{nameWithSpace}</code>\n                  ))}\n                </>\n              ),\n            }}\n          />\n        </Typography.Text>\n      )}\n    </>\n  );\n};\n","export const PROMPT_TEMPLATE_EXAMPLES = [\n  {\n    prompt: [\n      'You are a marketing consultant for a technology company. Develop a marketing strategy report for {{ company_name }} aiming to {{ company_goal }}',\n    ],\n    variables: [\n      {\n        name: 'company_name',\n        value: 'XYZ Company',\n      },\n      {\n        name: 'company_goal',\n        value: 'Increase top-line revenue',\n      },\n    ],\n  },\n  {\n    prompt: [\n      'You are a helpful and friendly customer support chatbot. Answer the users question \"{{ user_question }}\" clearly, based on the following documentation: {{ documentation }}',\n    ],\n    variables: [\n      {\n        name: 'user_question',\n        value: 'Is MLflow open source?',\n      },\n      {\n        name: 'documentation',\n        value: 'MLflow is an open source platform for managing the end-to-end machine learning lifecycle.',\n      },\n    ],\n  },\n  {\n    prompt: [\n      'Summarize the given text \"{{ text }}\" into a concise and coherent summary, capturing the main ideas and key points. Make sure that the summary does not exceed {{ word_count }} words.',\n    ],\n    variables: [\n      {\n        name: 'text',\n        value:\n          'Although C. septempunctata larvae and adults mainly eat aphids, they also feed on Thysanoptera, Aleyrodidae, on the larvae of Psyllidae and Cicadellidae, and on eggs and larvae of some beetles and butterflies. There are one or two generations per year. Adults overwinter in ground litter in parks, gardens and forest edges and under tree bark and rocks. C. septempunctata has a broad ecological range, generally living wherever there are aphids for it to eat. This includes, amongst other biotopes, meadows, fields, Pontic–Caspian steppe, parkland, gardens, Western European broadleaf forests and mixed forests. In the United Kingdom, there are fears that the seven-spot ladybird is being outcompeted for food by the harlequin ladybird. An adult seven-spot ladybird may reach a body length of 7.6–12.7 mm (0.3–0.5 in). Their distinctive spots and conspicuous colours warn of their toxicity, making them unappealing to predators. The species can secrete a fluid from joints in their legs which gives them a foul taste. A threatened ladybird may both play dead and secrete the unappetising substance to protect itself. The seven-spot ladybird synthesizes the toxic alkaloids, N-oxide coccinelline and its free base precoccinelline; depending on sex and diet, the spot size and coloration can provide some indication of how toxic the individual insect is to potential predators.',\n      },\n      {\n        name: 'word_count',\n        value: '75',\n      },\n    ],\n  },\n  {\n    prompt: [\n      'Generate a list of ten titles for my book. The book is about {{ topic }}. Each title should be between {{ word_range }} words long.',\n      '### Examples of great titles ###',\n      '{{ examples }}',\n    ],\n    variables: [\n      {\n        name: 'topic',\n        value:\n          'my journey as an adventurer who has lived an unconventional life, meeting many different personalities and finally finding peace in gardening.',\n      },\n      {\n        name: 'word_range',\n        value: 'two to five',\n      },\n      {\n        name: 'examples',\n        value: '\"Long walk to freedom\", \"Wishful drinking\", \"I know why the caged bird sings\"',\n      },\n    ],\n  },\n  {\n    prompt: [\n      'Generate a SQL query from a user’s question, using the information from the table.',\n      'Question: {{ user_question }}',\n      'Table Information: {{ table_information }}',\n    ],\n    variables: [\n      {\n        name: 'user_question',\n        value: 'Which product generated the most sales this month?',\n      },\n      {\n        name: 'table_information',\n        value:\n          'CREATE TABLE Sales (SaleID INT PRIMARY KEY, ProductID INT, SaleDate DATE, CustomerID INT, QuantitySold INT, UnitPrice DECIMAL(10, 2));',\n      },\n    ],\n  },\n];\n","import {\n  ArrowLeftIcon,\n  Button,\n  Modal,\n  Spacer,\n  Input,\n  Typography,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { Divider } from 'antd';\nimport { FormattedMessage } from 'react-intl';\nimport { PROMPT_TEMPLATE_EXAMPLES } from '@mlflow/mlflow/src/experiment-tracking/components/evaluation-artifacts-compare/utils/PromptExamples';\n\nconst { TextArea } = Input;\ntype Props = {\n  isOpen: boolean;\n  closeExamples: () => void;\n  closeModal: () => void;\n  updatePromptTemplate: (prompt: string) => void;\n  updateInputVariableValue: (name: string, value: string) => void;\n};\n\nexport const EvaluationCreatePromptRunModalExamples = ({\n  isOpen,\n  closeExamples,\n  closeModal,\n  updatePromptTemplate,\n  updateInputVariableValue,\n}: Props): JSX.Element => {\n  const { theme } = useDesignSystemTheme();\n\n  const tryPromptTemplate = (promptTemplate: { prompt: string[]; variables: { name: string; value: string }[] }) => {\n    updatePromptTemplate(promptTemplate.prompt.join('\\n'));\n    promptTemplate.variables.forEach(({ name, value }) => {\n      updateInputVariableValue(name, value);\n    });\n    closeExamples();\n  };\n\n  return (\n    <Modal\n      verticalSizing=\"maxed_out\"\n      visible={isOpen}\n      onCancel={closeModal}\n      title={\n        <div>\n          <Typography.Title level={2} css={{ marginTop: theme.spacing.sm, marginBottom: theme.spacing.xs }}>\n            <Button\n              componentId=\"codegen_mlflow_app_src_experiment-tracking_components_evaluation-artifacts-compare_evaluationcreatepromptrunmodalexamples.tsx_48\"\n              css={{ marginRight: theme.spacing.sm, marginBottom: theme.spacing.sm }}\n              icon={<ArrowLeftIcon />}\n              onClick={closeExamples}\n            />\n            <FormattedMessage\n              defaultMessage=\"Prompt template examples\"\n              description=\"Experiment page > new run modal > prompt examples > modal title\"\n            />\n          </Typography.Title>\n        </div>\n      }\n      dangerouslySetAntdProps={{ width: 1200 }}\n    >\n      {PROMPT_TEMPLATE_EXAMPLES.map((promptTemplate) => (\n        <div\n          key={promptTemplate.prompt.join('\\n')}\n          css={{\n            display: 'flex',\n            flexDirection: 'column',\n            gap: theme.spacing.md,\n          }}\n        >\n          <div\n            css={{\n              boxSizing: 'border-box',\n              border: `1px solid ${theme.colors.actionDefaultBorderDefault}`,\n              borderRadius: theme.borders.borderRadiusMd,\n              background: theme.colors.backgroundPrimary,\n              padding: theme.spacing.md,\n              margin: 0,\n              overflow: 'hidden',\n              display: 'flex',\n              flexDirection: 'column',\n              gap: `${theme.spacing.xs}px`,\n            }}\n          >\n            <Typography.Title level={4}>\n              <FormattedMessage\n                defaultMessage=\"Prompt Template\"\n                description=\"Experiment page > new run modal > prompt examples > prompt template title\"\n              />\n              <Button\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_evaluation-artifacts-compare_evaluationcreatepromptrunmodalexamples.tsx_90\"\n                type=\"tertiary\"\n                size=\"small\"\n                style={{ float: 'right' }}\n                onClick={() => tryPromptTemplate(promptTemplate)}\n              >\n                <FormattedMessage\n                  defaultMessage=\"Try this template\"\n                  description=\"Experiment page > new run modal > prompt examples > try template button\"\n                />\n              </Button>\n            </Typography.Title>\n            {promptTemplate.prompt.map((line) => (\n              <Typography.Paragraph key={line}>{line}</Typography.Paragraph>\n            ))}\n            <Divider css={{ marginTop: theme.spacing.xs, marginBottom: theme.spacing.xs }} />\n            {promptTemplate.variables.map(({ name, value }) => (\n              <div key={name}>\n                <Typography.Title level={4}>{name}</Typography.Title>\n                <Typography.Paragraph>{value}</Typography.Paragraph>\n              </div>\n            ))}\n          </div>\n          <Spacer />\n        </div>\n      ))}\n    </Modal>\n  );\n};\n","import {\n  Alert,\n  Button,\n  FormUI,\n  Input,\n  PlayIcon,\n  StopIcon,\n  TableSkeleton,\n  LegacyTooltip,\n  Typography,\n  WarningIcon,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport {\n  PROMPTLAB_METADATA_COLUMN_LATENCY,\n  PROMPTLAB_METADATA_COLUMN_TOTAL_TOKENS,\n} from '../../prompt-engineering/PromptEngineering.utils';\nimport { useMemo } from 'react';\nimport { type ModelGatewayResponseType } from '../../../sdk/ModelGatewayService';\n\nconst { TextArea } = Input;\n\ninterface EvaluationCreatePromptRunOutputProps {\n  evaluationMetadata: Partial<ModelGatewayResponseType['metadata']>;\n  isEvaluating?: boolean;\n  isOutputDirty?: boolean;\n  evaluationOutput: string;\n  evaluationError: string | null;\n  evaluateButtonTooltip: string | null;\n  onEvaluateClick?: () => void;\n  onCancelClick?: () => void;\n  disabled?: boolean;\n}\n\n/**\n * Part of EvaluationCreatePromptRunModal, houses evaluate/cancel buttons\n * and evaluation output with the metadata\n */\nexport const EvaluationCreatePromptRunOutput = ({\n  evaluationMetadata,\n  isEvaluating,\n  isOutputDirty,\n  evaluationOutput,\n  evaluationError,\n  evaluateButtonTooltip,\n  disabled,\n  onEvaluateClick,\n  onCancelClick,\n}: EvaluationCreatePromptRunOutputProps) => {\n  const { theme } = useDesignSystemTheme();\n\n  const metadataOutput = useMemo(() => {\n    if (!evaluationMetadata) {\n      return null;\n    }\n    if (isEvaluating) {\n      return null;\n    }\n    return (\n      <div css={{ display: 'flex', gap: theme.spacing.xs, alignItems: 'center' }}>\n        {PROMPTLAB_METADATA_COLUMN_LATENCY in evaluationMetadata && (\n          <Typography.Hint size=\"sm\">\n            {Math.round(Number(evaluationMetadata[PROMPTLAB_METADATA_COLUMN_LATENCY]))} ms\n            {'MLFLOW_total_tokens' in evaluationMetadata ? ',' : ''}\n          </Typography.Hint>\n        )}\n        {PROMPTLAB_METADATA_COLUMN_TOTAL_TOKENS in evaluationMetadata && (\n          <Typography.Hint size=\"sm\">\n            <FormattedMessage\n              defaultMessage=\"{totalTokens} total tokens\"\n              description=\"Experiment page > artifact compare view > results table > total number of evaluated tokens\"\n              values={{ totalTokens: evaluationMetadata[PROMPTLAB_METADATA_COLUMN_TOTAL_TOKENS] }}\n            />\n          </Typography.Hint>\n        )}\n      </div>\n    );\n  }, [evaluationMetadata, isEvaluating, theme]);\n\n  return (\n    <>\n      <div css={{ marginBottom: theme.spacing.md }}>\n        <LegacyTooltip title={evaluateButtonTooltip}>\n          <Button\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_evaluation-artifacts-compare_components_evaluationcreatepromptrunoutput.tsx_85\"\n            data-testid=\"button-evaluate\"\n            icon={<PlayIcon />}\n            onClick={onEvaluateClick}\n            disabled={disabled}\n            loading={isEvaluating}\n          >\n            <FormattedMessage\n              defaultMessage=\"Evaluate\"\n              description='Experiment page > new run modal > \"evaluate\" button label'\n            />\n          </Button>\n        </LegacyTooltip>\n        {isEvaluating && (\n          <Button\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_evaluation-artifacts-compare_components_evaluationcreatepromptrunoutput.tsx_99\"\n            data-testid=\"button-cancel\"\n            icon={<StopIcon />}\n            onClick={onCancelClick}\n            css={{ marginLeft: theme.spacing.sm }}\n          >\n            <FormattedMessage\n              defaultMessage=\"Cancel\"\n              description='Experiment page > new run modal > \"cancel\" button label'\n            />\n          </Button>\n        )}\n      </div>\n      <FormUI.Label>\n        <FormattedMessage\n          defaultMessage=\"Output\"\n          description=\"Experiment page > new run modal > evaluation output field label\"\n        />\n        {isOutputDirty && (\n          <LegacyTooltip\n            title={\n              <FormattedMessage\n                defaultMessage=\"Model, input data or prompt have changed since last evaluation of the output\"\n                description=\"Experiment page > new run modal > dirty output (out of sync with new data)\"\n              />\n            }\n          >\n            <WarningIcon css={{ marginLeft: theme.spacing.xs }} />\n          </LegacyTooltip>\n        )}\n      </FormUI.Label>\n      <FormUI.Hint>\n        <FormattedMessage\n          defaultMessage=\"This is the output generated by the LLM using the prompt template and input values defined above.\"\n          description=\"Experiment page > new run modal > evaluation output field hint\"\n        />\n      </FormUI.Hint>\n      {!evaluationError && isEvaluating && (\n        <div css={{ marginTop: theme.spacing.sm }}>\n          <TableSkeleton lines={5} />\n        </div>\n      )}\n      {!isEvaluating && (\n        <TextArea rows={5} css={{ cursor: 'default' }} data-testid=\"prompt-output\" value={evaluationOutput} readOnly />\n      )}\n      {!isEvaluating && evaluationError && <FormUI.Message message={evaluationError} type=\"error\" />}\n      <div css={{ marginTop: theme.spacing.sm }}>{metadataOutput}</div>\n    </>\n  );\n};\n","import { shouldUseExperimentPageChartViewAsDefault } from '../../../../common/utils/FeatureUtils';\nimport { useSearchParams } from '../../../../common/utils/RoutingUtils';\nimport { type ExperimentViewRunsCompareMode } from '../../../types';\n\nconst EXPERIMENT_PAGE_VIEW_MODE_QUERY_PARAM_KEY = 'compareRunsMode';\n\nexport const getExperimentPageDefaultViewMode = (): ExperimentViewRunsCompareMode =>\n  shouldUseExperimentPageChartViewAsDefault() ? 'CHART' : 'TABLE';\n\n/**\n * Hook using search params to retrieve and update the current experiment page runs view mode.\n */\nexport const useExperimentPageViewMode = (): [\n  ExperimentViewRunsCompareMode,\n  (newCompareRunsMode: ExperimentViewRunsCompareMode) => void,\n] => {\n  const [params, setParams] = useSearchParams();\n\n  const mode =\n    (params.get(EXPERIMENT_PAGE_VIEW_MODE_QUERY_PARAM_KEY) as ExperimentViewRunsCompareMode) ||\n    getExperimentPageDefaultViewMode();\n  const setMode = (newCompareRunsMode: ExperimentViewRunsCompareMode) => {\n    setParams(\n      (currentParams) => {\n        currentParams.set(EXPERIMENT_PAGE_VIEW_MODE_QUERY_PARAM_KEY, newCompareRunsMode || '');\n        return currentParams;\n      },\n      { replace: false },\n    );\n  };\n\n  return [mode, setMode];\n};\n","import { MlflowService } from '@mlflow/mlflow/src/experiment-tracking/sdk/MlflowService';\nimport { getUUID } from '../../common/utils/ActionUtils';\nimport type { AsyncAction } from '../../redux-types';\nimport {\n  ModelGatewayQueryPayload,\n  ModelGatewayRoute,\n  ModelGatewayRouteLegacy,\n  ModelGatewayService,\n  SearchMlflowDeploymentsModelRoutesResponse,\n} from '../sdk/ModelGatewayService';\n\nexport const SEARCH_MLFLOW_DEPLOYMENTS_MODEL_ROUTES = 'SEARCH_MLFLOW_DEPLOYMENTS_MODEL_ROUTES';\n\nexport interface SearchMlflowDeploymentsModelRoutesAction\n  extends AsyncAction<SearchMlflowDeploymentsModelRoutesResponse> {\n  type: 'SEARCH_MLFLOW_DEPLOYMENTS_MODEL_ROUTES';\n}\n\nexport const searchMlflowDeploymentsRoutesApi = (filter?: string): SearchMlflowDeploymentsModelRoutesAction => ({\n  type: SEARCH_MLFLOW_DEPLOYMENTS_MODEL_ROUTES,\n  payload: MlflowService.gatewayProxyGet({\n    gateway_path: 'api/2.0/endpoints/',\n  }) as Promise<SearchMlflowDeploymentsModelRoutesResponse>,\n  meta: { id: getUUID() },\n});\nexport const QUERY_MLFLOW_DEPLOYMENTS_ROUTE_API = 'QUERY_MLFLOW_DEPLOYMENTS_ROUTE_API';\nexport const queryMlflowDeploymentsRouteApi = (route: ModelGatewayRoute, data: ModelGatewayQueryPayload) => {\n  return {\n    type: QUERY_MLFLOW_DEPLOYMENTS_ROUTE_API,\n    payload: ModelGatewayService.queryMLflowDeploymentEndpointRoute(route, data),\n    meta: { id: getUUID(), startTime: performance.now() },\n  };\n};\n","import { cloneDeep, fromPairs } from 'lodash';\nimport { Action } from 'redux';\nimport Utils from '../../common/utils/Utils';\nimport { AsyncAction, ReduxState, ThunkDispatch } from '../../redux-types';\nimport { uploadArtifactApi } from '../actions';\nimport { RunRowType } from '../components/experiment-page/utils/experimentPage.row-types';\nimport { MLFLOW_PROMPT_ENGINEERING_ARTIFACT_NAME } from '../constants';\nimport { RawEvaluationArtifact, parseEvaluationTableArtifact } from '../sdk/EvaluationArtifactService';\nimport {\n  ModelGatewayQueryPayload,\n  ModelGatewayRouteType,\n  ModelGatewayRoute,\n  ModelGatewayService,\n} from '../sdk/ModelGatewayService';\nimport { EvaluationArtifactTable } from '../types';\nimport { searchMlflowDeploymentsRoutesApi } from './ModelGatewayActions';\nimport {\n  PROMPTLAB_METADATA_COLUMN_LATENCY,\n  PROMPTLAB_METADATA_COLUMN_TOTAL_TOKENS,\n} from '../components/prompt-engineering/PromptEngineering.utils';\n\nexport const EVALUATE_PROMPT_TABLE_VALUE = 'EVALUATE_PROMPT_TABLE_VALUE';\nexport interface EvaluatePromptTableValueAction\n  extends AsyncAction<\n    { metadata: any; text: string },\n    {\n      inputValues: Record<string, string>;\n      run: RunRowType;\n      compiledPrompt: string;\n      rowKey: string;\n      startTime: number;\n      gatewayRoute: ModelGatewayRoute;\n    }\n  > {\n  type: 'EVALUATE_PROMPT_TABLE_VALUE';\n}\nconst evaluatePromptTableValueUnified =\n  ({\n    routeName,\n    routeType,\n    compiledPrompt,\n    inputValues,\n    parameters,\n    outputColumn,\n    rowKey,\n    run,\n  }: {\n    routeName: string;\n    routeType: ModelGatewayRouteType;\n    compiledPrompt: string;\n    inputValues: Record<string, string>;\n    parameters: ModelGatewayQueryPayload['parameters'];\n    outputColumn: string;\n    rowKey: string;\n    run: RunRowType;\n  }) =>\n  async (dispatch: ThunkDispatch, getState: () => ReduxState) => {\n    // Check if model gateway routes have been fetched. If not, fetch them first.\n    const { modelGateway } = getState();\n    if (!modelGateway.modelGatewayRoutesLoading.loading && Object.keys(modelGateway.modelGatewayRoutes).length === 0) {\n      await dispatch(searchAllPromptLabAvailableEndpoints());\n    }\n    // If the gateway is not present in the store, it means that it was deleted\n    // recently. Display relevant error in this scenario.\n    const gatewayRoute = getState().modelGateway.modelGatewayRoutes[`${routeType}:${routeName}`];\n    if (!gatewayRoute) {\n      const errorMessage = `MLflow deployment endpoint ${routeName} does not exist anymore!`;\n      Utils.logErrorAndNotifyUser(errorMessage);\n      throw new Error(errorMessage);\n    }\n    const modelGatewayRequestPayload: ModelGatewayQueryPayload = {\n      inputText: compiledPrompt,\n      parameters,\n    };\n\n    const action = {\n      type: EVALUATE_PROMPT_TABLE_VALUE,\n      payload: ModelGatewayService.queryModelGatewayRoute(gatewayRoute, modelGatewayRequestPayload),\n      meta: {\n        inputValues,\n        run,\n        compiledPrompt,\n        rowKey,\n        startTime: performance.now(),\n      },\n    };\n    return dispatch(action);\n  };\n\nexport const DISCARD_PENDING_EVALUATION_DATA = 'DISCARD_PENDING_EVALUATION_DATA';\nexport type DiscardPendingEvaluationDataAction = Action<'DISCARD_PENDING_EVALUATION_DATA'>;\nexport const discardPendingEvaluationData = () => ({\n  type: DISCARD_PENDING_EVALUATION_DATA,\n});\n\nexport const WRITE_BACK_EVALUATION_ARTIFACTS = 'WRITE_BACK_EVALUATION_ARTIFACTS';\n\nexport interface WriteBackEvaluationArtifactsAction\n  extends AsyncAction<\n    { runUuid: string; newEvaluationTable: EvaluationArtifactTable }[],\n    { runUuidsToUpdate: string[]; artifactPath: string }\n  > {\n  type: 'WRITE_BACK_EVALUATION_ARTIFACTS';\n}\n\nexport const writeBackEvaluationArtifactsAction = () => async (dispatch: ThunkDispatch, getState: () => ReduxState) => {\n  const { evaluationPendingDataByRunUuid, evaluationArtifactsByRunUuid } = getState().evaluationData;\n  const runUuidsToUpdate = Object.keys(evaluationPendingDataByRunUuid);\n  const originalRunArtifacts = fromPairs(\n    Object.entries(evaluationArtifactsByRunUuid)\n      .filter(\n        ([runUuid, artifactTableRecords]) =>\n          runUuidsToUpdate.includes(runUuid) && artifactTableRecords[MLFLOW_PROMPT_ENGINEERING_ARTIFACT_NAME],\n      )\n      .map(([runUuid, artifactTableRecords]) => [\n        runUuid,\n        artifactTableRecords[MLFLOW_PROMPT_ENGINEERING_ARTIFACT_NAME],\n      ]),\n  );\n\n  const updatedArtifactFiles = runUuidsToUpdate.map((runUuid) => {\n    const originalTableRecord = originalRunArtifacts[runUuid];\n\n    if (!originalTableRecord) {\n      throw new Error(`Cannot find existing prompt engineering artifact for run ${runUuid}`);\n    }\n\n    const transformedEntries = evaluationPendingDataByRunUuid[runUuid].map(\n      ({ entryData, evaluationTime, totalTokens }) => {\n        return originalTableRecord.columns.map((columnName) => {\n          if (columnName === PROMPTLAB_METADATA_COLUMN_LATENCY) {\n            return evaluationTime.toString();\n          } else if (columnName === PROMPTLAB_METADATA_COLUMN_TOTAL_TOKENS && totalTokens) {\n            return totalTokens.toString();\n          } else {\n            return entryData[columnName] || '';\n          }\n        });\n      },\n    );\n\n    const updatedArtifactFile = cloneDeep(originalRunArtifacts[runUuid].rawArtifactFile) as RawEvaluationArtifact;\n    updatedArtifactFile?.data.unshift(...transformedEntries);\n\n    return { runUuid, updatedArtifactFile };\n  });\n\n  const promises = updatedArtifactFiles.map(({ runUuid, updatedArtifactFile }) =>\n    dispatch(uploadArtifactApi(runUuid, MLFLOW_PROMPT_ENGINEERING_ARTIFACT_NAME, updatedArtifactFile)).then(() => {\n      const newEvaluationTable = parseEvaluationTableArtifact(\n        MLFLOW_PROMPT_ENGINEERING_ARTIFACT_NAME,\n        updatedArtifactFile,\n      );\n      return { runUuid, newEvaluationTable };\n    }),\n  );\n\n  return dispatch({\n    type: 'WRITE_BACK_EVALUATION_ARTIFACTS',\n    payload: Promise.all(promises),\n    meta: { runUuidsToUpdate, artifactPath: MLFLOW_PROMPT_ENGINEERING_ARTIFACT_NAME },\n  });\n};\nexport const EVALUATE_ADD_INPUT_VALUES = 'EVALUATE_ADD_INPUT_VALUES';\nexport interface EvaluateAddInputValues extends Action<'EVALUATE_ADD_INPUT_VALUES'> {\n  payload: Record<string, string>;\n}\nexport const evaluateAddInputValues = (inputValues: Record<string, string>) => ({\n  type: EVALUATE_ADD_INPUT_VALUES,\n  payload: inputValues,\n  meta: {},\n});\n\nexport const evaluatePromptTableValue = ({\n  routeName,\n  routeType,\n  compiledPrompt,\n  inputValues,\n  parameters,\n  outputColumn,\n  rowKey,\n  run,\n}: {\n  routeName: string;\n  routeType: ModelGatewayRouteType;\n  compiledPrompt: string;\n  inputValues: Record<string, string>;\n  parameters: ModelGatewayQueryPayload['parameters'];\n  outputColumn: string;\n  rowKey: string;\n  run: RunRowType;\n}) => {\n  const evaluateParams = {\n    routeName,\n    compiledPrompt,\n    inputValues,\n    parameters,\n    outputColumn,\n    rowKey,\n    run,\n  };\n\n  // END-EDGE\n  return evaluatePromptTableValueUnified({\n    ...evaluateParams,\n    routeType,\n  });\n};\n\nexport const searchAllPromptLabAvailableEndpoints = () => async (dispatch: ThunkDispatch) => {\n  return dispatch(searchMlflowDeploymentsRoutesApi());\n};\n","import { ErrorWrapper } from '../../../../common/utils/ErrorWrapper';\nimport { GatewayErrorWrapper } from '../../../utils/LLMGatewayUtils';\n\n/**\n * Due to multiple invocation methods, there are multiple error types that can be thrown.\n * This function extracts the proper error message from the error object.\n */\nexport const getPromptEngineeringErrorMessage = (e: GatewayErrorWrapper | ErrorWrapper | Error) => {\n  const errorMessage =\n    e instanceof GatewayErrorWrapper\n      ? e.getGatewayErrorMessage()\n      : e instanceof ErrorWrapper\n      ? e.getMessageField()\n      : e.message;\n\n  return errorMessage;\n};\n","import {\n  Button,\n  DialogCombobox,\n  DialogComboboxContent,\n  DialogComboboxHintRow,\n  DialogComboboxOptionList,\n  DialogComboboxOptionListSearch,\n  DialogComboboxOptionListSelectItem,\n  DialogComboboxTrigger,\n  FormUI,\n  InfoIcon,\n  Input,\n  Modal,\n  PlusIcon,\n  Spinner,\n  LegacyTooltip,\n  Typography,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { sortBy, compact } from 'lodash';\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Utils from '../../../common/utils/Utils';\nimport { ThunkDispatch } from '../../../redux-types';\nimport { createPromptLabRunApi } from '../../actions';\nimport { ModelGatewayReduxState } from '../../reducers/ModelGatewayReducer';\nimport { ModelGatewayResponseType, ModelGatewayService } from '../../sdk/ModelGatewayService';\nimport { ModelGatewayRouteTask } from '../../sdk/MlflowEnums';\nimport { generateRandomRunName, getDuplicatedRunName } from '../../utils/RunNameUtils';\nimport { useExperimentIds } from '../experiment-page/hooks/useExperimentIds';\nimport {\n  compilePromptInputText,\n  extractEvaluationPrerequisitesForRun,\n  extractRequiredInputParamsForRun,\n} from '../prompt-engineering/PromptEngineering.utils';\nimport { EvaluationCreatePromptParameters } from './EvaluationCreatePromptParameters';\nimport { usePromptEvaluationInputValues } from './hooks/usePromptEvaluationInputValues';\nimport { usePromptEvaluationParameters } from './hooks/usePromptEvaluationParameters';\nimport { usePromptEvaluationPromptTemplateValue } from './hooks/usePromptEvaluationPromptTemplateValue';\nimport { EvaluationCreateRunPromptTemplateErrors } from './components/EvaluationCreateRunPromptTemplateErrors';\nimport type { RunRowType } from '../experiment-page/utils/experimentPage.row-types';\nimport { EvaluationCreatePromptRunModalExamples } from './EvaluationCreatePromptRunModalExamples';\nimport { EvaluationCreatePromptRunOutput } from './components/EvaluationCreatePromptRunOutput';\nimport { useExperimentPageViewMode } from '../experiment-page/hooks/useExperimentPageViewMode';\nimport { searchAllPromptLabAvailableEndpoints } from '../../actions/PromptEngineeringActions';\nimport { getPromptEngineeringErrorMessage } from './utils/PromptEngineeringErrorUtils';\n\nconst { TextArea } = Input;\ntype Props = {\n  isOpen: boolean;\n  closeModal: () => void;\n  runBeingDuplicated: RunRowType | null;\n  visibleRuns?: RunRowType[];\n  refreshRuns: (() => Promise<never[]>) | (() => Promise<any> | null) | (() => void);\n};\n\nexport const EvaluationCreatePromptRunModal = ({\n  isOpen,\n  closeModal,\n  runBeingDuplicated,\n  visibleRuns = [],\n  refreshRuns,\n}: Props): JSX.Element => {\n  const [experimentId] = useExperimentIds();\n  const { theme } = useDesignSystemTheme();\n  const { parameters, updateParameter } = usePromptEvaluationParameters();\n  const [, setViewMode] = useExperimentPageViewMode();\n\n  const [selectedModel, updateSelectedModel] = useState('');\n  const [newRunName, setNewRunName] = useState('');\n  const [isCreatingRun, setIsCreatingRun] = useState(false);\n  const [isEvaluating, setIsEvaluating] = useState(false);\n  const [lastEvaluationError, setLastEvaluationError] = useState<string | null>(null);\n  const [evaluationOutput, setEvaluationOutput] = useState('');\n  const [evaluationMetadata, setEvaluationMetadata] = useState<Partial<ModelGatewayResponseType['metadata']>>({});\n  const [outputDirty, setOutputDirty] = useState(false);\n  const [isViewExamplesModalOpen, setViewExamplesModalOpen] = useState(false);\n  const cancelTokenRef = useRef<string | null>(null);\n\n  const dispatch = useDispatch<ThunkDispatch>();\n\n  useEffect(() => {\n    dispatch(searchAllPromptLabAvailableEndpoints()).catch((e) => {\n      Utils.logErrorAndNotifyUser(e?.message || e);\n    });\n  }, [dispatch]);\n\n  const intl = useIntl();\n\n  const {\n    updateInputVariables,\n    inputVariables,\n    inputVariableValues,\n    updateInputVariableValue,\n    inputVariableNameViolations,\n    clearInputVariableValues,\n  } = usePromptEvaluationInputValues();\n\n  const { handleAddVariableToTemplate, savePromptTemplateInputRef, promptTemplate, updatePromptTemplate } =\n    usePromptEvaluationPromptTemplateValue();\n\n  useEffect(() => {\n    if (isOpen && !runBeingDuplicated) {\n      setNewRunName(generateRandomRunName());\n    }\n  }, [isOpen, runBeingDuplicated]);\n\n  useEffect(() => {\n    updateInputVariables(promptTemplate);\n  }, [promptTemplate, updateInputVariables]);\n\n  /**\n   * If a run duplication is detected, pre-fill the values\n   */\n  useEffect(() => {\n    if (runBeingDuplicated) {\n      const {\n        promptTemplate: duplicatedPromptTemplate,\n        routeName: duplicatedRouteName,\n        parameters: duplicatedParameters,\n      } = extractEvaluationPrerequisitesForRun(runBeingDuplicated);\n\n      extractRequiredInputParamsForRun(runBeingDuplicated);\n      if (duplicatedPromptTemplate) {\n        updatePromptTemplate(duplicatedPromptTemplate);\n      }\n      if (duplicatedParameters.temperature) {\n        updateParameter('temperature', duplicatedParameters.temperature);\n      }\n      if (duplicatedParameters.max_tokens) {\n        updateParameter('max_tokens', duplicatedParameters.max_tokens);\n      }\n      if (duplicatedRouteName) {\n        updateSelectedModel(duplicatedRouteName);\n      }\n      setEvaluationOutput('');\n      setOutputDirty(false);\n      const duplicatedRunName = getDuplicatedRunName(\n        runBeingDuplicated.runName,\n        compact(visibleRuns.map(({ runName }) => runName)),\n      );\n      setNewRunName(duplicatedRunName);\n      clearInputVariableValues();\n    }\n  }, [runBeingDuplicated, clearInputVariableValues, updateParameter, updatePromptTemplate, visibleRuns]);\n\n  const modelRoutesUnified = useSelector(\n    ({ modelGateway }: { modelGateway: ModelGatewayReduxState }) => modelGateway.modelGatewayRoutes,\n  );\n\n  // In the next version, routes are already filtered\n  const supportedModelRouteListUnified = useMemo(\n    () => sortBy(Object.values(modelRoutesUnified), 'name'),\n    // .filter(\n    //   (x) => x.name.includes('ann-chat') || x.name.includes('bedrock-ai21labs'),\n    // )\n    [modelRoutesUnified],\n  );\n\n  // Determines if model gateway routes are being loaded\n  const modelRoutesLoading = useSelector(\n    ({ modelGateway }: { modelGateway: ModelGatewayReduxState }) => modelGateway.modelGatewayRoutesLoading.loading,\n  );\n  useEffect(() => {\n    if (evaluationOutput) {\n      setOutputDirty(true);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [inputVariableValues, promptTemplate, parameters, selectedModel]);\n\n  const onHandleSubmit = () => {\n    setIsCreatingRun(true);\n    const modelRouteName = modelRoutesUnified[selectedModel]?.name;\n    const modelParameters = { ...parameters, route_type: modelRoutesUnified[selectedModel]?.type };\n\n    const modelInput = compilePromptInputText(promptTemplate, inputVariableValues);\n    dispatch(\n      createPromptLabRunApi({\n        experimentId,\n        promptTemplate,\n        modelInput,\n        modelParameters,\n        modelRouteName,\n        promptParameters: inputVariableValues,\n        modelOutput: evaluationOutput,\n        runName: newRunName,\n        modelOutputParameters: evaluationMetadata,\n      }),\n    )\n      .then(() => {\n        refreshRuns();\n        closeModal();\n        setIsCreatingRun(false);\n        setViewMode('ARTIFACT');\n      })\n      .catch((e) => {\n        Utils.logErrorAndNotifyUser(e?.message || e);\n        // NB: Not using .finally() due to issues with promise implementation in the Jest\n        setIsCreatingRun(false);\n      });\n  };\n\n  const handleEvaluate = useCallback(() => {\n    const modelRoute = modelRoutesUnified[selectedModel];\n    const cancelToken = Math.random().toString(36);\n    cancelTokenRef.current = cancelToken;\n    if (!modelRoute) {\n      // Should never happen if the model is selected\n      throw new Error('No model route found!');\n    }\n    setLastEvaluationError(null);\n    setIsEvaluating(true);\n    const inputText = compilePromptInputText(promptTemplate, inputVariableValues);\n    const startTime = performance.now();\n    ModelGatewayService.queryModelGatewayRoute(modelRoute, {\n      inputText,\n      parameters,\n    })\n      .then((value) => {\n        if (cancelTokenRef.current === cancelToken) {\n          const { text, metadata } = value;\n\n          // TODO: Consider calculating actual model call latency on the backend side\n          const latency = performance.now() - startTime;\n\n          setEvaluationOutput(text);\n          const metadataWithEvaluationTime = { ...metadata, latency };\n\n          // Prefix the metadata keys with \"MLFLOW_\"\n          const prefixedMetadata = Object.entries(metadataWithEvaluationTime).reduce(\n            (acc, [metadata_key, metadata_value]) => ({\n              ...acc,\n              [`MLFLOW_${metadata_key}`]: metadata_value,\n            }),\n            {},\n          );\n\n          setEvaluationMetadata(prefixedMetadata);\n          setOutputDirty(false);\n          setIsEvaluating(false);\n          // NB: Not using .finally() due to issues with promise implementation in the Jest\n          if (cancelTokenRef.current === cancelToken) {\n            cancelTokenRef.current = null;\n          }\n        }\n      })\n      .catch((e) => {\n        const errorMessage = getPromptEngineeringErrorMessage(e);\n        const wrappedMessage = intl.formatMessage(\n          {\n            defaultMessage: 'MLflow deployment returned the following error: \"{errorMessage}\"',\n            description: 'Experiment page > MLflow deployment error message',\n          },\n          {\n            errorMessage,\n          },\n        );\n        Utils.logErrorAndNotifyUser(wrappedMessage);\n        setIsEvaluating(false);\n        setLastEvaluationError(wrappedMessage);\n        // NB: Not using .finally() due to issues with promise implementation in the Jest\n        if (cancelTokenRef.current === cancelToken) {\n          cancelTokenRef.current = null;\n        }\n      });\n  }, [inputVariableValues, modelRoutesUnified, parameters, promptTemplate, selectedModel, intl]);\n\n  // create a handleCancel function to terminate the evaluation if it is in progress\n  const handleCancel = useCallback(() => {\n    if (cancelTokenRef.current) {\n      setIsEvaluating(false);\n      cancelTokenRef.current = null;\n    }\n  }, [setIsEvaluating]);\n\n  const selectModelLabel = intl.formatMessage({\n    defaultMessage: 'Served LLM model',\n    description: 'Experiment page > new run modal > served LLM model endpoint label',\n  });\n  const selectModelPlaceholder = intl.formatMessage({\n    defaultMessage: 'Select LLM model endpoint',\n    description: 'Experiment page > new run modal > served LLM model endpoint placeholder',\n  });\n\n  const promptTemplateProvided = promptTemplate.trim().length > 0;\n  const allInputValuesProvided = useMemo(\n    () => inputVariables.every((variable) => inputVariableValues[variable]?.trim()),\n    [inputVariables, inputVariableValues],\n  );\n\n  const runNameProvided = newRunName.trim().length > 0;\n\n  // We can evaluate if we have selected model, prompt template and all input values.\n  // It should be possible to evaluate without input variables for the purpose of playing around.\n  const evaluateButtonEnabled = selectedModel && promptTemplateProvided && allInputValuesProvided;\n\n  // We can log the run if we have: selected model, prompt template, all input values,\n  // output that is present and up-to-date. Also, in order to log the run, we should have at least\n  // one input variable defined (otherwise prompt engineering won't make sense).\n  const createRunButtonEnabled = Boolean(\n    selectedModel &&\n      promptTemplateProvided &&\n      allInputValuesProvided &&\n      evaluationOutput &&\n      !outputDirty &&\n      inputVariables.length > 0 &&\n      runNameProvided &&\n      !lastEvaluationError,\n  );\n\n  // Let's prepare a proper tooltip content for every scenario\n  const createRunButtonTooltip = useMemo(() => {\n    if (!selectedModel) {\n      return intl.formatMessage({\n        defaultMessage: 'You need to select a served model endpoint using dropdown first',\n        description: 'Experiment page > new run modal > invalid state - no model endpoint selected',\n      });\n    }\n    if (!promptTemplateProvided) {\n      return intl.formatMessage({\n        defaultMessage: 'You need to provide a prompt template',\n        description: 'Experiment page > new run modal > invalid state - no prompt template provided',\n      });\n    }\n    if (!allInputValuesProvided) {\n      return intl.formatMessage({\n        defaultMessage: 'You need to provide values for all defined inputs',\n        description: 'Experiment page > new run modal > invalid state - no prompt inputs provided',\n      });\n    }\n    if (!evaluationOutput) {\n      return intl.formatMessage({\n        defaultMessage: 'You need to evaluate the resulting output first',\n        description: 'Experiment page > new run modal > invalid state - result not evaluated',\n      });\n    }\n    if (outputDirty) {\n      return intl.formatMessage({\n        defaultMessage: 'Input data or prompt template have changed since last evaluation of the output',\n        description: 'Experiment page > new run modal > dirty output (out of sync with new data)',\n      });\n    }\n    if (inputVariables.length === 0) {\n      return intl.formatMessage({\n        defaultMessage: 'You need to define at least one input variable',\n        description: 'Experiment page > new run modal > invalid state - no input variables defined',\n      });\n    }\n    if (!runNameProvided) {\n      return intl.formatMessage({\n        defaultMessage: 'Please provide run name',\n        description: 'Experiment page > new run modal > invalid state - no run name provided',\n      });\n    }\n    return null;\n  }, [\n    allInputValuesProvided,\n    inputVariables.length,\n    intl,\n    outputDirty,\n    evaluationOutput,\n    promptTemplateProvided,\n    selectedModel,\n    runNameProvided,\n  ]);\n\n  // Let's prepare a proper tooltip content for every scenario\n  const evaluateButtonTooltip = useMemo(() => {\n    if (!selectedModel) {\n      return intl.formatMessage({\n        defaultMessage: 'You need to select a served model endpoint using dropdown first',\n        description: 'Experiment page > new run modal > invalid state - no model endpoint selected',\n      });\n    }\n    if (!promptTemplateProvided) {\n      return intl.formatMessage({\n        defaultMessage: 'You need to provide a prompt template',\n        description: 'Experiment page > new run modal > invalid state - no prompt template provided',\n      });\n    }\n    if (!allInputValuesProvided) {\n      return intl.formatMessage({\n        defaultMessage: 'You need to provide values for all defined inputs',\n        description: 'Experiment page > new run modal > invalid state - no prompt inputs provided',\n      });\n    }\n    return null;\n  }, [allInputValuesProvided, intl, promptTemplateProvided, selectedModel]);\n\n  if (isOpen && isViewExamplesModalOpen) {\n    return (\n      <EvaluationCreatePromptRunModalExamples\n        isOpen={isOpen && isViewExamplesModalOpen}\n        closeExamples={() => setViewExamplesModalOpen(false)}\n        closeModal={closeModal}\n        updatePromptTemplate={updatePromptTemplate}\n        updateInputVariableValue={updateInputVariableValue}\n      />\n    );\n  }\n\n  const formatVisibleRouteName = (selectedRouteName: string) => {\n    if (selectedRouteName.includes(':')) {\n      return selectedRouteName.split(':')[1];\n    }\n    return selectedRouteName;\n  };\n\n  const getRouteOptionList = () => {\n    return supportedModelRouteListUnified.map((modelRoute) => (\n      <DialogComboboxOptionListSelectItem\n        value={modelRoute.key}\n        key={modelRoute.key}\n        onChange={(value) => {\n          updateSelectedModel(value);\n        }}\n        checked={selectedModel === modelRoute.key}\n      >\n        {modelRoute.name}\n        {modelRoute.mlflowDeployment && (\n          <DialogComboboxHintRow>{modelRoute.mlflowDeployment.model.name}</DialogComboboxHintRow>\n        )}\n      </DialogComboboxOptionListSelectItem>\n    ));\n  };\n\n  return (\n    <Modal\n      verticalSizing=\"maxed_out\"\n      visible={isOpen}\n      onCancel={closeModal}\n      onOk={closeModal}\n      footer={\n        <div css={{ display: 'flex', gap: theme.spacing.sm, justifyContent: 'flex-end' }}>\n          <Button\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_evaluation-artifacts-compare_evaluationcreatepromptrunmodal.tsx_589\"\n            onClick={closeModal}\n          >\n            <FormattedMessage\n              defaultMessage=\"Cancel\"\n              description=\"Experiment page > new run modal > cancel button label\"\n            />\n          </Button>\n          <LegacyTooltip title={createRunButtonTooltip}>\n            <Button\n              componentId=\"codegen_mlflow_app_src_experiment-tracking_components_evaluation-artifacts-compare_evaluationcreatepromptrunmodal.tsx_596\"\n              onClick={onHandleSubmit}\n              data-testid=\"button-create-run\"\n              type=\"primary\"\n              disabled={!createRunButtonEnabled}\n            >\n              <FormattedMessage\n                defaultMessage=\"Create run\"\n                description='Experiment page > new run modal > \"Create run\" confirm button label'\n              />\n            </Button>\n          </LegacyTooltip>\n        </div>\n      }\n      title={\n        <div>\n          <Typography.Title level={2} css={{ marginTop: theme.spacing.sm, marginBottom: theme.spacing.xs }}>\n            <FormattedMessage defaultMessage=\"New run\" description=\"Experiment page > new run modal > modal title\" />\n          </Typography.Title>\n          <Typography.Hint css={{ marginTop: 0, fontWeight: 'normal' }}>\n            Create a new run using a large-language model by giving it a prompt template and model parameters\n          </Typography.Hint>\n        </div>\n      }\n      dangerouslySetAntdProps={{ width: 1200 }}\n    >\n      <div\n        css={{\n          display: 'grid',\n          gridTemplateColumns: '300px 1fr',\n          gap: 48,\n        }}\n      >\n        <div>\n          <FormUI.Label htmlFor=\"selected_model\" css={{ marginBottom: theme.spacing.sm }}>\n            {selectModelLabel}\n          </FormUI.Label>\n          <div css={{ marginBottom: theme.spacing.lg, display: 'flex', alignItems: 'center' }}>\n            <DialogCombobox\n              label={selectModelLabel}\n              modal={false}\n              value={selectedModel ? [formatVisibleRouteName(selectedModel)] : undefined}\n            >\n              <DialogComboboxTrigger\n                id=\"selected_model\"\n                css={{ width: '100%' }}\n                allowClear={false}\n                placeholder={selectModelPlaceholder}\n                withInlineLabel={false}\n              />\n              <DialogComboboxContent loading={modelRoutesLoading} maxHeight={400} matchTriggerWidth>\n                {!modelRoutesLoading && (\n                  <DialogComboboxOptionList>\n                    <DialogComboboxOptionListSearch autoFocus>{getRouteOptionList()}</DialogComboboxOptionListSearch>\n                  </DialogComboboxOptionList>\n                )}\n              </DialogComboboxContent>\n            </DialogCombobox>\n          </div>\n          {selectedModel && (\n            <EvaluationCreatePromptParameters parameters={parameters} updateParameter={updateParameter} />\n          )}\n          <div css={styles.formItem}>\n            <>\n              <FormUI.Label htmlFor=\"new_run_name\">\n                <FormattedMessage\n                  defaultMessage=\"New run name\"\n                  description=\"Experiment page > new run modal > run name input label\"\n                />\n                {!newRunName.trim() && (\n                  <FormUI.Message\n                    type=\"error\"\n                    message={intl.formatMessage({\n                      defaultMessage: 'Please provide run name',\n                      description: 'Experiment page > new run modal > invalid state - no run name provided',\n                    })}\n                  />\n                )}\n              </FormUI.Label>\n              <Input\n                id=\"new_run_name\"\n                data-testid=\"run-name-input\"\n                required\n                value={newRunName}\n                onChange={(e) => setNewRunName(e.target.value)}\n              />\n            </>\n          </div>\n        </div>\n        <div>\n          <div css={styles.formItem}>\n            <>\n              <div css={{ display: 'flex', justifyContent: 'space-between' }}>\n                <FormUI.Label htmlFor=\"prompt_template\">\n                  <FormattedMessage\n                    defaultMessage=\"Prompt Template\"\n                    description=\"Experiment page > new run modal > prompt template input label\"\n                  />\n                </FormUI.Label>\n                <Button\n                  componentId=\"codegen_mlflow_app_src_experiment-tracking_components_evaluation-artifacts-compare_evaluationcreatepromptrunmodal.tsx_695\"\n                  onClick={() => setViewExamplesModalOpen(true)}\n                  style={{ marginLeft: 'auto' }}\n                  size=\"small\"\n                >\n                  <FormattedMessage\n                    defaultMessage=\"View Examples\"\n                    description=\"Experiment page > new run modal > prompt examples button\"\n                  />\n                </Button>\n              </div>\n              <FormUI.Hint>\n                <FormattedMessage\n                  defaultMessage={`Give instructions to the model. Use '{{ }}' or the \"Add new variable\" button to add variables to your prompt.`}\n                  description=\"Experiment page > new run modal > prompt template input hint\"\n                />\n              </FormUI.Hint>\n            </>\n\n            <TextArea\n              id=\"prompt_template\"\n              autoSize={{ minRows: 3 }}\n              data-testid=\"prompt-template-input\"\n              value={promptTemplate}\n              onChange={(e) => updatePromptTemplate(e.target.value)}\n              ref={savePromptTemplateInputRef}\n            />\n            <EvaluationCreateRunPromptTemplateErrors violations={inputVariableNameViolations} />\n          </div>\n          {inputVariables.map((inputVariable) => (\n            <div css={styles.formItem} key={inputVariable}>\n              <>\n                <FormUI.Label htmlFor={inputVariable}>\n                  <span>{inputVariable}</span>\n                </FormUI.Label>\n                <TextArea\n                  id={inputVariable}\n                  autoSize\n                  value={inputVariableValues[inputVariable] ? inputVariableValues[inputVariable] : ''}\n                  onChange={(e) => updateInputVariableValue(inputVariable, e.target.value)}\n                />\n              </>\n            </div>\n          ))}\n          <div css={{ marginBottom: 2 * theme.spacing.md }}>\n            <Button\n              componentId=\"codegen_mlflow_app_src_experiment-tracking_components_evaluation-artifacts-compare_evaluationcreatepromptrunmodal.tsx_736\"\n              icon={<PlusIcon />}\n              onClick={handleAddVariableToTemplate}\n            >\n              <FormattedMessage\n                defaultMessage=\"Add new variable\"\n                description='Experiment page > new run modal > \"add new variable\" button label'\n              />\n            </Button>\n          </div>\n          <EvaluationCreatePromptRunOutput\n            evaluateButtonTooltip={evaluateButtonTooltip}\n            evaluationMetadata={evaluationMetadata}\n            evaluationOutput={evaluationOutput}\n            disabled={!evaluateButtonEnabled}\n            isEvaluating={isEvaluating}\n            isOutputDirty={outputDirty}\n            onCancelClick={handleCancel}\n            onEvaluateClick={handleEvaluate}\n            evaluationError={lastEvaluationError}\n          />\n        </div>\n      </div>\n      {isCreatingRun && (\n        // Scrim overlay\n        <div\n          css={{\n            inset: 0,\n            backgroundColor: theme.colors.overlayOverlay,\n            position: 'absolute',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n            zIndex: 1,\n          }}\n        >\n          <Spinner />\n        </div>\n      )}\n    </Modal>\n  );\n};\n\nconst styles = {\n  formItem: { marginBottom: 16 },\n};\n","import { useCallback, useEffect, useMemo, useState } from 'react';\nimport { debounce, fromPairs, isEqual } from 'lodash';\nimport {\n  DEFAULT_PROMPTLAB_INPUT_VALUES,\n  extractPromptInputVariables,\n  getPromptInputVariableNameViolations,\n} from '../../prompt-engineering/PromptEngineering.utils';\n\nexport const usePromptEvaluationInputValues = () => {\n  const [inputVariables, updateInputVariablesDirect] = useState<string[]>(extractPromptInputVariables(''));\n\n  const [inputVariableNameViolations, setInputVariableNameViolations] = useState<\n    ReturnType<typeof getPromptInputVariableNameViolations>\n  >({ namesWithSpaces: [] });\n\n  const [inputVariableValues, updateInputVariableValues] =\n    useState<Record<string, string>>(DEFAULT_PROMPTLAB_INPUT_VALUES);\n\n  const clearInputVariableValues = useCallback(() => updateInputVariableValues({}), []);\n\n  const updateInputVariables = useMemo(\n    () =>\n      // Prevent calculating new input variable set on every keystroke of a template,\n      // let's debounce it by 250ms\n      debounce((promptTemplate: string) => {\n        updateInputVariablesDirect((currentInputVariables) => {\n          const newInputVariables = extractPromptInputVariables(promptTemplate);\n          if (!isEqual(newInputVariables, currentInputVariables)) {\n            return newInputVariables;\n          }\n          return currentInputVariables;\n        });\n        setInputVariableNameViolations(getPromptInputVariableNameViolations(promptTemplate));\n      }, 250),\n    [],\n  );\n\n  const updateInputVariableValue = useCallback((name: string, value: string) => {\n    updateInputVariableValues((values) => ({ ...values, [name]: value }));\n  }, []);\n\n  // Sanitize the variable dictionary so only actually used variables\n  // will be returned (discard leftovers from previous prompt templates)\n  const sanitizedInputVariableValues = useMemo(\n    () => fromPairs(Object.entries(inputVariableValues).filter(([key]) => inputVariables.includes(key))),\n    [inputVariableValues, inputVariables],\n  );\n\n  return {\n    updateInputVariables,\n    inputVariables,\n    inputVariableValues: sanitizedInputVariableValues,\n    updateInputVariableValue,\n    inputVariableNameViolations,\n    clearInputVariableValues,\n  };\n};\n","import React, { useCallback, useContext, useMemo, useState } from 'react';\nimport { RunRowType } from '../utils/experimentPage.row-types';\nimport { EvaluationCreatePromptRunModal } from '../../evaluation-artifacts-compare/EvaluationCreatePromptRunModal';\nimport { shouldEnablePromptLab } from '../../../../common/utils/FeatureUtils';\n\nconst CreateNewRunContext = React.createContext<{\n  createNewRun: (runToDuplicate?: RunRowType) => void;\n}>({\n  createNewRun: () => {},\n});\n\n/**\n * A thin context wrapper dedicated to invoke \"create run\" modal in various areas of the experiment runs page UI\n */\nexport const CreateNewRunContextProvider = ({\n  children,\n  visibleRuns,\n  refreshRuns,\n}: {\n  children: React.ReactNode;\n  visibleRuns: RunRowType[];\n  refreshRuns: (() => Promise<never[]>) | (() => Promise<any> | null) | (() => void);\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [runBeingDuplicated, setRunBeingDuplicated] = useState<RunRowType | null>(null);\n\n  const contextValue = useMemo(\n    () => ({\n      createNewRun: (runToDuplicate?: RunRowType) => {\n        setIsOpen(true);\n        setRunBeingDuplicated(runToDuplicate || null);\n      },\n    }),\n    [],\n  );\n\n  return (\n    <CreateNewRunContext.Provider value={contextValue}>\n      {children}\n      {shouldEnablePromptLab() && (\n        <EvaluationCreatePromptRunModal\n          visibleRuns={visibleRuns}\n          isOpen={isOpen}\n          closeModal={() => setIsOpen(false)}\n          runBeingDuplicated={runBeingDuplicated}\n          refreshRuns={refreshRuns}\n        />\n      )}\n    </CreateNewRunContext.Provider>\n  );\n};\n\nexport const useCreateNewRun = () => useContext(CreateNewRunContext);\n","import {\n  DEFAULT_LIFECYCLE_FILTER,\n  DEFAULT_MODEL_VERSION_FILTER,\n  DEFAULT_ORDER_BY_ASC,\n  DEFAULT_ORDER_BY_KEY,\n  DEFAULT_START_TIME,\n} from '../../../constants';\nimport type { DatasetSummary, LIFECYCLE_FILTER, MODEL_VERSION_FILTER } from '../../../types';\n\n/**\n * Defines persistable model representing sort and filter values\n * used by runs table and controls\n */\nexport interface ExperimentPageSearchFacetsState {\n  /**\n   * SQL-like query string used to filter runs, e.g. \"params.alpha = '0.5'\"\n   */\n  searchFilter: string;\n\n  /**\n   * Canonical order_by key like \"params.`alpha`\". May be null to indicate the table\n   * should use the natural row ordering provided by the server.\n   */\n  orderByKey: string;\n\n  /**\n   * Whether the order imposed by orderByKey should be ascending or descending.\n   */\n  orderByAsc: boolean;\n\n  /**\n   * Filter key to show results based on start time\n   */\n  startTime: string;\n\n  /**\n   * Lifecycle filter of runs to display\n   */\n  lifecycleFilter: LIFECYCLE_FILTER;\n\n  /**\n   * Datasets filter of runs to display\n   */\n  datasetsFilter: DatasetSummary[];\n\n  /**\n   * Filter of model versions to display\n   */\n  modelVersionFilter: MODEL_VERSION_FILTER;\n}\n\n/**\n * Defines default experiment page search facets state.\n */\nexport const createExperimentPageSearchFacetsState = (): ExperimentPageSearchFacetsState => ({\n  searchFilter: '',\n  orderByKey: DEFAULT_ORDER_BY_KEY,\n  orderByAsc: DEFAULT_ORDER_BY_ASC,\n  startTime: DEFAULT_START_TIME,\n  lifecycleFilter: DEFAULT_LIFECYCLE_FILTER,\n  datasetsFilter: [],\n  modelVersionFilter: DEFAULT_MODEL_VERSION_FILTER,\n});\n","import { isArray } from 'lodash';\nimport { atobUtf8, btoaUtf8 } from '../../../../common/utils/StringUtils';\nimport { ExperimentPageSearchFacetsState } from '../models/ExperimentPageSearchFacetsState';\nimport { ExperimentPageUIState } from '../models/ExperimentPageUIState';\n\ntype PersistSearchSerializeFunctions<Serialized = any, Unserialized = any> = {\n  serializeLocalStorage?(input: Unserialized): Serialized;\n  serializeQueryString?(input: Unserialized): Serialized;\n  deserializeLocalStorage?(input: Serialized): Unserialized;\n  deserializeQueryString?(input: Serialized): Unserialized;\n};\n\n/**\n * \"Flattens\" the strings array, i.e. merges it into a single value\n */\nconst flattenString = (input: string | string[]) => (isArray(input) ? input.join() : input);\n\n/**\n * All known field serialization and deserialization mechanisms used in search facets state persisting mechanism.\n */\nconst persistSearchStateFieldSerializers: Record<string, PersistSearchSerializeFunctions> = {\n  /**\n   * In rare cases, search filter might contain commas that interfere with `querystring` library\n   * parsing causing it to return array instead of string. Since it's difficult to selectively\n   * change `querystring`'s parsing action, we are making sure that the parsed values are always strings.\n   */\n  searchFilter: {\n    deserializeLocalStorage: flattenString,\n    deserializeQueryString: flattenString,\n  },\n  orderByAsc: {\n    serializeQueryString(input: boolean) {\n      return input.toString();\n    },\n    deserializeQueryString(input: string) {\n      return input === 'true';\n    },\n  },\n  datasetsFilter: {\n    serializeQueryString(inputs: ExperimentPageSearchFacetsState['datasetsFilter']) {\n      const inputsWithoutExperimentId = inputs.map(({ name, digest, context }) => ({\n        name,\n        digest,\n        context,\n      }));\n      return btoaUtf8(JSON.stringify(inputsWithoutExperimentId));\n    },\n    deserializeQueryString(input: string): ExperimentPageSearchFacetsState['datasetsFilter'] {\n      try {\n        // Process the URL defensively against intended and unintended malformation\n        const parsedResult = JSON.parse(atobUtf8(input));\n        if (!Array.isArray(parsedResult)) {\n          return [];\n        }\n        return parsedResult;\n      } catch {\n        return [];\n      }\n    },\n  },\n  /**\n   * Array of visible configured charts are serialized into base64-encoded JSON when put into query string\n   */\n  compareRunCharts: {\n    serializeQueryString(input: ExperimentPageUIState['compareRunCharts']) {\n      return btoaUtf8(JSON.stringify(input));\n    },\n    deserializeQueryString(input: string): ExperimentPageUIState['compareRunCharts'] {\n      try {\n        // Process the URL defensively against intended and unintended malformation\n        const parsedResult = JSON.parse(atobUtf8(input));\n        if (!Array.isArray(parsedResult)) {\n          return undefined;\n        }\n        return parsedResult;\n      } catch {\n        return undefined;\n      }\n    },\n  },\n  /**\n   * For \"compareRunsMode\", we will always save \"undefined\" value to local storage so users will\n   * get back to default view after visiting the view once more.\n   */\n  compareRunsMode: {\n    serializeLocalStorage() {\n      return undefined;\n    },\n  },\n};\n\ntype StateKey = keyof Partial<ExperimentPageSearchFacetsState>;\n\n/**\n * Consumes an object with persistable search facets and transforms relevant fields\n * with the registered serialization functions specific to query string.\n * Example scenario: serializing an array of visible configured charts into base64-encoded JSON.\n */\nexport const serializeFieldsToQueryString = (input: Partial<ExperimentPageSearchFacetsState>) => {\n  const resultObject: Partial<Record<StateKey, any>> = { ...input };\n  for (const field of Object.keys(resultObject) as StateKey[]) {\n    const serializeFn = persistSearchStateFieldSerializers[field]?.serializeQueryString;\n    if (serializeFn) {\n      resultObject[field] = serializeFn(resultObject[field]);\n    }\n  }\n  return resultObject;\n};\n\n/**\n * Consumes an object with search facets extracted from query string and transforms relevant fields\n * with the registered deserialization functions. Example scenario: deserializing an array of\n * visible configured charts from base64-encoded JSON.\n */\nexport const deserializeFieldsFromQueryString = (\n  input: Partial<ExperimentPageSearchFacetsState> | Record<string, any>,\n) => {\n  const resultObject: Partial<Record<StateKey, any>> = { ...input };\n  for (const field of Object.keys(resultObject) as StateKey[]) {\n    const deserializeFn = persistSearchStateFieldSerializers[field]?.deserializeQueryString;\n    if (deserializeFn) {\n      resultObject[field] = deserializeFn(resultObject[field]);\n    }\n  }\n  return resultObject;\n};\n\n/**\n * Consumes an object with persistable search facets and transforms relevant fields\n * with the registered serialization functions specific to local storage.\n * Example scenario: serializing an array of visible configured charts into base64-encoded JSON.\n */\nexport const serializeFieldsToLocalStorage = (input: Partial<ExperimentPageSearchFacetsState>) => {\n  const resultObject: Partial<Record<StateKey, any>> = { ...input };\n  for (const field of Object.keys(resultObject) as StateKey[]) {\n    const serializeFn = persistSearchStateFieldSerializers[field]?.serializeLocalStorage;\n    if (serializeFn) {\n      resultObject[field] = serializeFn(resultObject[field]);\n    }\n  }\n  return resultObject;\n};\n\n/**\n * Consumes an object with search facets extracted from local storage and transforms relevant fields\n * with the registered deserialization functions. Example scenario: deserializing an array of\n * visible configured charts from base64-encoded JSON.\n */\nexport const deserializeFieldsFromLocalStorage = (\n  input: Partial<ExperimentPageSearchFacetsState> | Record<string, any>,\n) => {\n  const resultObject: Partial<Record<StateKey, any>> = { ...input };\n  for (const field of Object.keys(resultObject) as StateKey[]) {\n    const deserializeFn = persistSearchStateFieldSerializers[field]?.deserializeLocalStorage;\n    if (deserializeFn) {\n      resultObject[field] = deserializeFn(resultObject[field]);\n    }\n  }\n  return resultObject;\n};\n","import { assign, entries, isNil, keys, omitBy, pick } from 'lodash';\nimport { useMemo } from 'react';\nimport { NavigateOptions, useParams, useSearchParams } from '../../../../common/utils/RoutingUtils';\nimport {\n  ExperimentPageSearchFacetsState,\n  createExperimentPageSearchFacetsState,\n} from '../models/ExperimentPageSearchFacetsState';\nimport {\n  deserializeFieldsFromQueryString,\n  serializeFieldsToQueryString,\n} from '../utils/persistSearchFacets.serializers';\n\nexport const EXPERIMENT_PAGE_QUERY_PARAM_KEYS = [\n  'searchFilter',\n  'orderByKey',\n  'orderByAsc',\n  'startTime',\n  'lifecycleFilter',\n  'modelVersionFilter',\n  'datasetsFilter',\n];\n\nexport type ExperimentPageQueryParams = any;\n\nexport type ExperimentQueryParamsSearchFacets = ExperimentPageSearchFacetsState & {\n  experimentIds?: string[];\n};\n\nconst getComparedExperimentIds = (comparedExperimentIds: string): string[] => {\n  try {\n    return comparedExperimentIds ? JSON.parse(comparedExperimentIds) : [];\n  } catch {\n    return [];\n  }\n};\n\nexport const useExperimentPageSearchFacets = (): [ExperimentQueryParamsSearchFacets | null, string[]] => {\n  const [queryParams] = useSearchParams();\n\n  // Pick only the keys we care about\n  const pickedValues = useMemo(\n    () => pick(Object.fromEntries(queryParams.entries()), EXPERIMENT_PAGE_QUERY_PARAM_KEYS),\n    [queryParams],\n  );\n\n  // Destructure to get raw values\n  const { searchFilter, orderByKey, orderByAsc, startTime, lifecycleFilter, modelVersionFilter, datasetsFilter } =\n    pickedValues;\n\n  const areValuesEmpty = keys(pickedValues).length < 1;\n\n  const { experimentId } = useParams<{ experimentId: string }>();\n  const queryParamsExperimentIds = queryParams.get('experiments');\n\n  // Calculate experiment IDs\n  const experimentIds = useMemo(() => {\n    if (experimentId) {\n      return [experimentId];\n    }\n    if (queryParamsExperimentIds) {\n      return getComparedExperimentIds(queryParamsExperimentIds);\n    }\n    return [];\n  }, [experimentId, queryParamsExperimentIds]);\n\n  // Calculate and memoize search facets\n  const searchFacets = useMemo(() => {\n    if (areValuesEmpty) {\n      return null;\n    }\n    const deserializedFields = deserializeFieldsFromQueryString(\n      omitBy(\n        {\n          searchFilter,\n          orderByKey,\n          orderByAsc,\n          startTime,\n          lifecycleFilter,\n          modelVersionFilter,\n          datasetsFilter,\n        },\n        isNil,\n      ),\n    ) as ExperimentPageSearchFacetsState;\n\n    // If not all fields are provided, fill the gaps with default values\n    return assign(createExperimentPageSearchFacetsState(), deserializedFields);\n  }, [\n    // Use exact values to avoid unnecessary re-renders\n    searchFilter,\n    orderByKey,\n    orderByAsc,\n    startTime,\n    lifecycleFilter,\n    modelVersionFilter,\n    datasetsFilter,\n    areValuesEmpty,\n  ]);\n\n  return [searchFacets, experimentIds];\n};\n\nexport const useUpdateExperimentPageSearchFacets = () => {\n  const [, setParams] = useSearchParams();\n\n  return (partialFacets: Partial<ExperimentPageSearchFacetsState>, options?: NavigateOptions) => {\n    const newParams = serializeFieldsToQueryString(partialFacets);\n    setParams((currentParams) => {\n      entries(newParams).forEach(([key, value]) => {\n        currentParams.set(key, value);\n      });\n      return currentParams;\n    }, options);\n  };\n};\n","import { shouldEnableTracingUI } from '../../../../common/utils/FeatureUtils';\n\nexport function useShouldShowCombinedRunsTab() {\n  return shouldEnableTracingUI();\n}\n","import {\n  Button,\n  Tag,\n  DialogCombobox,\n  DialogComboboxContent,\n  DialogComboboxOptionList,\n  DialogComboboxOptionListCheckboxItem,\n  DialogComboboxOptionListSelectItem,\n  DialogComboboxOptionListSearch,\n  DialogComboboxTrigger,\n  DownloadIcon,\n  ClipboardIcon,\n  FullscreenExitIcon,\n  FullscreenIcon,\n  OverflowIcon,\n  PlusIcon,\n  SidebarIcon,\n  LegacyTooltip,\n  useDesignSystemTheme,\n  DropdownMenu,\n  ToggleButton,\n  SegmentedControlGroup,\n  SegmentedControlButton,\n  ListIcon,\n  ChartLineIcon,\n} from '@databricks/design-system';\nimport { Theme } from '@emotion/react';\n\nimport {\n  shouldEnableExperimentPageAutoRefresh,\n  shouldEnableHidingChartsWithNoData,\n  shouldEnablePromptLab,\n} from '@mlflow/mlflow/src/common/utils/FeatureUtils';\nimport React, { useMemo, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { ToggleIconButton } from '../../../../../common/components/ToggleIconButton';\nimport { ErrorWrapper } from '../../../../../common/utils/ErrorWrapper';\nimport { LIFECYCLE_FILTER } from '../../../../constants';\nimport { UpdateExperimentViewStateFn } from '../../../../types';\nimport { useExperimentIds } from '../../hooks/useExperimentIds';\nimport { ExperimentPageViewState } from '../../models/ExperimentPageViewState';\nimport { getStartTimeColumnDisplayName } from '../../utils/experimentPage.common-utils';\nimport { ExperimentRunsSelectorResult } from '../../utils/experimentRuns.selector';\nimport { ExperimentViewRefreshButton } from './ExperimentViewRefreshButton';\nimport { RunsSearchAutoComplete } from './RunsSearchAutoComplete';\nimport type { ExperimentStoreEntities, DatasetSummary, ExperimentViewRunsCompareMode } from '../../../../types';\nimport { datasetSummariesEqual } from '../../../../utils/DatasetUtils';\nimport { CreateNotebookRunModal } from '@mlflow/mlflow/src/experiment-tracking/components/evaluation-artifacts-compare/CreateNotebookRunModal';\nimport { PreviewBadge } from '@mlflow/mlflow/src/shared/building_blocks/PreviewBadge';\nimport { useCreateNewRun } from '../../hooks/useCreateNewRun';\nimport { useExperimentPageViewMode } from '../../hooks/useExperimentPageViewMode';\nimport { useUpdateExperimentPageSearchFacets } from '../../hooks/useExperimentPageSearchFacets';\nimport {\n  ExperimentPageSearchFacetsState,\n  createExperimentPageSearchFacetsState,\n} from '../../models/ExperimentPageSearchFacetsState';\nimport { useUpdateExperimentViewUIState } from '../../contexts/ExperimentPageUIStateContext';\nimport { useShouldShowCombinedRunsTab } from '../../hooks/useShouldShowCombinedRunsTab';\n\nexport type ExperimentViewRunsControlsFiltersProps = {\n  searchFacetsState: ExperimentPageSearchFacetsState;\n  experimentId: string;\n  viewState: ExperimentPageViewState;\n  updateViewState: UpdateExperimentViewStateFn;\n  runsData: ExperimentRunsSelectorResult;\n  onDownloadCsv: () => void;\n  requestError: ErrorWrapper | null;\n  additionalControls?: React.ReactNode;\n  refreshRuns: () => void;\n  viewMaximized: boolean;\n  autoRefreshEnabled?: boolean;\n  hideEmptyCharts?: boolean;\n};\n\nexport const ExperimentViewRunsControlsFilters = React.memo(\n  ({\n    searchFacetsState,\n    experimentId,\n    runsData,\n    viewState,\n    updateViewState,\n    onDownloadCsv,\n    requestError,\n    additionalControls,\n    refreshRuns,\n    viewMaximized,\n    autoRefreshEnabled = false,\n    hideEmptyCharts = false,\n  }: ExperimentViewRunsControlsFiltersProps) => {\n    const setUrlSearchFacets = useUpdateExperimentPageSearchFacets();\n    const showCombinedRuns = useShouldShowCombinedRunsTab();\n\n    const [pageViewMode, setViewModeInURL] = useExperimentPageViewMode();\n    const updateUIState = useUpdateExperimentViewUIState();\n\n    const isComparingExperiments = useExperimentIds().length > 1;\n    const { startTime, lifecycleFilter, datasetsFilter, searchFilter } = searchFacetsState;\n\n    // Use modernized view mode value getter if flag is set\n    const compareRunsMode = pageViewMode;\n\n    const intl = useIntl();\n    const { createNewRun } = useCreateNewRun();\n    const [isCreateRunWithNotebookModalOpen, setCreateRunWithNotebookModalOpenValue] = useState(false);\n    const { theme } = useDesignSystemTheme();\n\n    // List of labels for \"start time\" filter\n    const startTimeColumnLabels: Record<string, string> = useMemo(() => getStartTimeColumnDisplayName(intl), [intl]);\n\n    const currentLifecycleFilterValue =\n      lifecycleFilter === LIFECYCLE_FILTER.ACTIVE\n        ? intl.formatMessage({\n            defaultMessage: 'Active',\n            description: 'Linked model dropdown option to show active experiment runs',\n          })\n        : intl.formatMessage({\n            defaultMessage: 'Deleted',\n            description: 'Linked model dropdown option to show deleted experiment runs',\n          });\n\n    const currentStartTimeFilterLabel = intl.formatMessage({\n      defaultMessage: 'Time created',\n      description: 'Label for the start time select dropdown for experiment runs view',\n    });\n\n    // Show preview sidebar only on table view and artifact view\n    const displaySidebarToggleButton = compareRunsMode === undefined || compareRunsMode === 'ARTIFACT';\n\n    const datasetSummaries: DatasetSummary[] = useSelector(\n      (state: { entities: ExperimentStoreEntities }) => state.entities.datasetsByExperimentId[experimentId],\n    );\n\n    const updateDatasetsFilter = (summary: DatasetSummary) => {\n      const newDatasetsFilter = datasetsFilter.some((item) => datasetSummariesEqual(item, summary))\n        ? datasetsFilter.filter((item) => !datasetSummariesEqual(item, summary))\n        : [...datasetsFilter, summary];\n\n      setUrlSearchFacets({\n        datasetsFilter: newDatasetsFilter,\n      });\n    };\n\n    const hasDatasets = datasetSummaries !== undefined;\n\n    const searchFilterChange = (newSearchFilter: string) => {\n      setUrlSearchFacets({ searchFilter: newSearchFilter });\n    };\n\n    return (\n      <div\n        css={{\n          display: 'flex',\n          gap: theme.spacing.sm,\n          justifyContent: 'space-between',\n          [theme.responsive.mediaQueries.xs]: {\n            flexDirection: 'column',\n          },\n        }}\n      >\n        <div\n          css={{\n            display: 'flex',\n            gap: theme.spacing.sm,\n            alignItems: 'center',\n            flexWrap: 'wrap' as const,\n          }}\n        >\n          {showCombinedRuns && pageViewMode !== 'ARTIFACT' && (\n            <SegmentedControlGroup\n              name=\"runs-view-mode\"\n              value={pageViewMode}\n              onChange={({ target }) => {\n                const { value } = target;\n                const newValue = value as ExperimentViewRunsCompareMode;\n\n                if (pageViewMode === newValue) {\n                  return;\n                }\n\n                setViewModeInURL(newValue);\n              }}\n            >\n              <SegmentedControlButton value=\"TABLE\">\n                <ListIcon />\n              </SegmentedControlButton>\n              <SegmentedControlButton value=\"CHART\">\n                <ChartLineIcon />\n              </SegmentedControlButton>\n            </SegmentedControlGroup>\n          )}\n\n          <RunsSearchAutoComplete\n            runsData={runsData}\n            searchFilter={searchFilter}\n            onSearchFilterChange={searchFilterChange}\n            onClear={() => {\n              setUrlSearchFacets(createExperimentPageSearchFacetsState());\n            }}\n            requestError={requestError}\n          />\n\n          <DialogCombobox\n            label={currentStartTimeFilterLabel}\n            value={startTime !== 'ALL' ? [startTimeColumnLabels[startTime]] : []}\n          >\n            <DialogComboboxTrigger\n              allowClear={startTime !== 'ALL'}\n              onClear={() => {\n                setUrlSearchFacets({ startTime: 'ALL' });\n              }}\n              data-test-id=\"start-time-select-dropdown\"\n            />\n            <DialogComboboxContent>\n              <DialogComboboxOptionList>\n                {Object.keys(startTimeColumnLabels).map((startTimeKey) => (\n                  <DialogComboboxOptionListSelectItem\n                    key={startTimeKey}\n                    checked={startTimeKey === startTime}\n                    title={startTimeColumnLabels[startTimeKey]}\n                    data-test-id={`start-time-select-${startTimeKey}`}\n                    value={startTimeKey}\n                    onChange={() => {\n                      setUrlSearchFacets({ startTime: startTimeKey });\n                    }}\n                  >\n                    {startTimeColumnLabels[startTimeKey]}\n                  </DialogComboboxOptionListSelectItem>\n                ))}\n              </DialogComboboxOptionList>\n            </DialogComboboxContent>\n          </DialogCombobox>\n\n          <DialogCombobox\n            label={intl.formatMessage({\n              defaultMessage: 'State',\n              description: 'Filtering label to filter experiments based on state of active or deleted',\n            })}\n            value={[currentLifecycleFilterValue]}\n          >\n            <DialogComboboxTrigger allowClear={false} data-testid=\"lifecycle-filter\" />\n            <DialogComboboxContent>\n              <DialogComboboxOptionList>\n                <DialogComboboxOptionListSelectItem\n                  checked={lifecycleFilter === LIFECYCLE_FILTER.ACTIVE}\n                  key={LIFECYCLE_FILTER.ACTIVE}\n                  data-testid=\"active-runs-menu-item\"\n                  value={LIFECYCLE_FILTER.ACTIVE}\n                  onChange={() => {\n                    setUrlSearchFacets({ lifecycleFilter: LIFECYCLE_FILTER.ACTIVE });\n                  }}\n                >\n                  <FormattedMessage\n                    defaultMessage=\"Active\"\n                    description=\"Linked model dropdown option to show active experiment runs\"\n                  />\n                </DialogComboboxOptionListSelectItem>\n                <DialogComboboxOptionListSelectItem\n                  checked={lifecycleFilter === LIFECYCLE_FILTER.DELETED}\n                  key={LIFECYCLE_FILTER.DELETED}\n                  data-testid=\"deleted-runs-menu-item\"\n                  value={LIFECYCLE_FILTER.DELETED}\n                  onChange={() => {\n                    setUrlSearchFacets({ lifecycleFilter: LIFECYCLE_FILTER.DELETED });\n                  }}\n                >\n                  <FormattedMessage\n                    defaultMessage=\"Deleted\"\n                    description=\"Linked model dropdown option to show deleted experiment runs\"\n                  />\n                </DialogComboboxOptionListSelectItem>\n              </DialogComboboxOptionList>\n            </DialogComboboxContent>\n          </DialogCombobox>\n          <DialogCombobox\n            label={intl.formatMessage({\n              defaultMessage: 'Datasets',\n              description: 'Filtering label to filter runs based on datasets used',\n            })}\n            value={datasetsFilter.map((datasetSummary) => datasetSummary.name)}\n            multiSelect\n          >\n            <LegacyTooltip\n              title={\n                !hasDatasets && (\n                  <FormattedMessage\n                    defaultMessage=\"No datasets were recorded for this experiment's runs.\"\n                    description=\"Message to indicate that no datasets were recorded for this experiment's runs.\"\n                  />\n                )\n              }\n            >\n              <DialogComboboxTrigger\n                allowClear\n                onClear={() => setUrlSearchFacets({ datasetsFilter: [] })}\n                data-test-id=\"datasets-select-dropdown\"\n                showTagAfterValueCount={1}\n                disabled={!hasDatasets}\n              />\n              {hasDatasets && (\n                <DialogComboboxContent maxHeight={600}>\n                  <DialogComboboxOptionList>\n                    <DialogComboboxOptionListSearch>\n                      {datasetSummaries.map((summary: DatasetSummary) => (\n                        <DialogComboboxOptionListCheckboxItem\n                          key={summary.name + summary.digest + summary.context}\n                          checked={datasetsFilter.some((item) => datasetSummariesEqual(item, summary))}\n                          title={summary.name}\n                          data-test-id={`dataset-dropdown-${summary.name}`}\n                          value={summary.name}\n                          onChange={() => updateDatasetsFilter(summary)}\n                        >\n                          {summary.name} ({summary.digest}){' '}\n                          {summary.context && (\n                            <Tag css={{ textTransform: 'capitalize', marginRight: theme.spacing.xs }}>\n                              {summary.context}\n                            </Tag>\n                          )}\n                        </DialogComboboxOptionListCheckboxItem>\n                      ))}\n                    </DialogComboboxOptionListSearch>\n                  </DialogComboboxOptionList>\n                </DialogComboboxContent>\n              )}\n            </LegacyTooltip>\n          </DialogCombobox>\n          {additionalControls}\n        </div>\n        <div\n          css={{\n            display: 'flex',\n            gap: theme.spacing.sm,\n            alignItems: 'flex-start',\n          }}\n        >\n          <DropdownMenu.Root modal={false}>\n            <DropdownMenu.Trigger asChild>\n              <Button\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewrunscontrolsfilters.tsx_338\"\n                icon={<OverflowIcon />}\n                aria-label={intl.formatMessage({\n                  defaultMessage: 'More options',\n                  description: 'Experiment page > control bar > more options button accessible label',\n                })}\n              />\n            </DropdownMenu.Trigger>\n            <DropdownMenu.Content>\n              <DropdownMenu.Item className=\"csv-button\" onClick={onDownloadCsv}>\n                <DropdownMenu.IconWrapper>\n                  <DownloadIcon />\n                </DropdownMenu.IconWrapper>\n                {`Download ${runsData.runInfos.length} runs`}\n              </DropdownMenu.Item>\n              {shouldEnableHidingChartsWithNoData() && (\n                <>\n                  <DropdownMenu.Separator />\n                  <DropdownMenu.CheckboxItem\n                    checked={hideEmptyCharts}\n                    onClick={() =>\n                      updateUIState((state) => ({\n                        ...state,\n                        hideEmptyCharts: !state.hideEmptyCharts,\n                      }))\n                    }\n                  >\n                    <DropdownMenu.ItemIndicator />\n                    <FormattedMessage\n                      defaultMessage=\"Hide charts with no data\"\n                      description=\"Experiment page > control bar > label for a checkbox toggle button that hides chart cards with no corresponding data\"\n                    />\n                  </DropdownMenu.CheckboxItem>\n                </>\n              )}\n              {shouldEnableExperimentPageAutoRefresh() && (\n                <>\n                  <DropdownMenu.Separator />\n                  <DropdownMenu.CheckboxItem\n                    checked={autoRefreshEnabled}\n                    onClick={() =>\n                      updateUIState((state) => ({\n                        ...state,\n                        autoRefreshEnabled: !state.autoRefreshEnabled,\n                      }))\n                    }\n                  >\n                    <DropdownMenu.ItemIndicator />\n                    <FormattedMessage\n                      defaultMessage=\"Auto-refresh\"\n                      description=\"String for the auto-refresh button that refreshes the runs list automatically\"\n                    />\n                  </DropdownMenu.CheckboxItem>\n                </>\n              )}\n            </DropdownMenu.Content>\n          </DropdownMenu.Root>\n\n          <CreateNotebookRunModal\n            isOpen={isCreateRunWithNotebookModalOpen}\n            closeModal={() => setCreateRunWithNotebookModalOpenValue(false)}\n            experimentId={experimentId}\n          />\n\n          {displaySidebarToggleButton && (\n            <LegacyTooltip\n              title={intl.formatMessage({\n                defaultMessage: 'Toggle the preview sidepane',\n                description: 'Experiment page > control bar > expanded view toggle button tooltip',\n              })}\n              useAsLabel\n            >\n              <ToggleIconButton\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewrunscontrolsfilters.tsx_403\"\n                pressed={viewState.previewPaneVisible}\n                icon={<SidebarIcon />}\n                onClick={() => updateViewState({ previewPaneVisible: !viewState.previewPaneVisible })}\n              />\n            </LegacyTooltip>\n          )}\n          {!shouldEnableExperimentPageAutoRefresh() && <ExperimentViewRefreshButton refreshRuns={refreshRuns} />}\n          {/* TODO: Add tooltip to guide users to this button */}\n          {shouldEnablePromptLab() && !isComparingExperiments && (\n            <DropdownMenu.Root>\n              <DropdownMenu.Trigger asChild>\n                <Button\n                  componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewrunscontrolsfilters.tsx_415\"\n                  type={showCombinedRuns ? undefined : 'primary'}\n                  icon={<PlusIcon />}\n                >\n                  <FormattedMessage\n                    defaultMessage=\"New run\"\n                    description=\"Button used to pop up a modal to create a new run\"\n                  />\n                </Button>\n              </DropdownMenu.Trigger>\n              <DropdownMenu.Content>\n                <DropdownMenu.Item onSelect={() => createNewRun()}>\n                  {' '}\n                  <FormattedMessage\n                    defaultMessage=\"using Prompt Engineering\"\n                    description=\"String for creating a new run with prompt engineering modal\"\n                  />\n                  <PreviewBadge />\n                </DropdownMenu.Item>\n                <DropdownMenu.Item onSelect={() => setCreateRunWithNotebookModalOpenValue(true)}>\n                  {' '}\n                  <FormattedMessage\n                    defaultMessage=\"using Notebook\"\n                    description=\"String for creating a new run from a notebook\"\n                  />\n                </DropdownMenu.Item>\n              </DropdownMenu.Content>\n            </DropdownMenu.Root>\n          )}\n        </div>\n      </div>\n    );\n  },\n);\n","import {\n  DialogCombobox,\n  DialogComboboxContent,\n  DialogComboboxOptionList,\n  DialogComboboxOptionListSearch,\n  DialogComboboxOptionListSelectItem,\n  DialogComboboxTrigger,\n  ArrowDownIcon,\n  ArrowUpIcon,\n  SortAscendingIcon,\n  SortDescendingIcon,\n} from '@databricks/design-system';\nimport React, { useMemo, useState } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { middleTruncateStr } from '../../../../../common/utils/StringUtils';\nimport { COLUMN_SORT_BY_ASC, COLUMN_SORT_BY_DESC, SORT_DELIMITER_SYMBOL } from '../../../../constants';\nimport { ExperimentRunSortOption } from '../../hooks/useRunSortOptions';\nimport { useUpdateExperimentPageSearchFacets } from '../../hooks/useExperimentPageSearchFacets';\nimport { useUpdateExperimentViewUIState } from '../../contexts/ExperimentPageUIStateContext';\n\nexport const ExperimentViewRunsSortSelector = React.memo(\n  (props: { orderByKey: string; orderByAsc: boolean; sortOptions: ExperimentRunSortOption[] }) => {\n    const setUrlSearchFacets = useUpdateExperimentPageSearchFacets();\n    const updateUIState = useUpdateExperimentViewUIState();\n    const intl = useIntl();\n\n    const { sortOptions } = props;\n    const { orderByKey, orderByAsc } = props;\n\n    const onSortKeyChanged = ({ value }: { value: string }) => {\n      const [newOrderBy, newOrderAscending] = value.split(SORT_DELIMITER_SYMBOL);\n\n      setUrlSearchFacets({\n        orderByAsc: newOrderAscending === COLUMN_SORT_BY_ASC,\n        orderByKey: newOrderBy,\n      });\n\n      updateUIState((currentUIState) => {\n        if (!currentUIState.selectedColumns.includes(newOrderBy)) {\n          return {\n            ...currentUIState,\n            selectedColumns: [...currentUIState.selectedColumns, newOrderBy],\n          };\n        }\n        return currentUIState;\n      });\n    };\n\n    // Currently used canonical \"sort by\" value in form of \"COLUMN_NAME***DIRECTION\", e.g. \"metrics.`metric`***DESCENDING\"\n    const currentSortSelectValue = useMemo(\n      () => `${orderByKey}${SORT_DELIMITER_SYMBOL}${orderByAsc ? COLUMN_SORT_BY_ASC : COLUMN_SORT_BY_DESC}`,\n      [orderByAsc, orderByKey],\n    );\n\n    /**\n     * Calculate and memoize a label displayed in the \"sort by\" select.\n     *\n     * If full metrics and params list is populated by runs from the API, use the\n     * value corresponding to the calculated sort option list.\n     *\n     * If the sort option list is incomplete (e.g. because fetched run set is empty) while the\n     * order key is given (e.g. because URL state says so), use it to extract the key name.\n     */\n    const currentSortSelectLabel = useMemo(() => {\n      // Search through all sort options generated basing on the fetched runs\n      const sortOption = sortOptions.find((option) => option.value === currentSortSelectValue);\n\n      let sortOptionLabel = sortOption?.label;\n\n      // If the actually chosen sort value is not found in the sort option list (e.g. because the list of fetched runs is empty),\n      // use it to generate the label\n      if (!sortOptionLabel) {\n        // The following regex extracts plain sort key name from its canonical form, i.e.\n        // metrics.`metric_key_name` => metric_key_name\n        const extractedKeyName = orderByKey.match(/^.+\\.`(.+)`$/);\n        if (extractedKeyName) {\n          // eslint-disable-next-line prefer-destructuring\n          sortOptionLabel = extractedKeyName[1];\n        }\n      }\n      return `${intl.formatMessage({\n        defaultMessage: 'Sort',\n        description: 'Sort by default option for sort by select dropdown for experiment runs',\n      })}: ${sortOptionLabel}`;\n    }, [currentSortSelectValue, orderByKey, sortOptions, intl]);\n\n    const sortLabelElement = useMemo(() => {\n      return (\n        <span css={{ display: 'flex', alignItems: 'center', gap: 4 }}>\n          {orderByAsc ? <SortAscendingIcon /> : <SortDescendingIcon />} {currentSortSelectLabel}\n        </span>\n      );\n    }, [currentSortSelectLabel, orderByAsc]);\n\n    const handleChange = (updatedValue: string) => {\n      onSortKeyChanged({ value: updatedValue });\n      setOpen(false);\n    };\n\n    const handleClear = () => {\n      onSortKeyChanged({ value: '' });\n    };\n\n    const [open, setOpen] = useState(false);\n\n    return (\n      <DialogCombobox label={sortLabelElement} onOpenChange={setOpen} open={open}>\n        <DialogComboboxTrigger\n          onClear={handleClear}\n          data-test-id=\"sort-select-dropdown\"\n          aria-label={currentSortSelectLabel}\n        />\n        <DialogComboboxContent minWidth={250}>\n          <DialogComboboxOptionList>\n            <DialogComboboxOptionListSearch>\n              {sortOptions.map((sortOption) => (\n                <DialogComboboxOptionListSelectItem\n                  key={sortOption.value}\n                  value={sortOption.value}\n                  onChange={handleChange}\n                  checked={sortOption.value === currentSortSelectValue}\n                  data-test-id={`sort-select-${sortOption.label}-${sortOption.order}`}\n                >\n                  <span css={{ display: 'flex', alignItems: 'center', gap: 4 }}>\n                    {sortOption.order === COLUMN_SORT_BY_ASC ? <ArrowUpIcon /> : <ArrowDownIcon />}\n                    {middleTruncateStr(sortOption.label, 50)}\n                  </span>\n                </DialogComboboxOptionListSelectItem>\n              ))}\n            </DialogComboboxOptionListSearch>\n          </DialogComboboxOptionList>\n        </DialogComboboxContent>\n      </DialogCombobox>\n    );\n  },\n);\n","import {\n  Button,\n  ChevronDownIcon,\n  ColumnsIcon,\n  Dropdown,\n  Input,\n  SearchIcon,\n  Tree,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { Theme } from '@emotion/react';\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport Utils from '../../../../../common/utils/Utils';\nimport { ATTRIBUTE_COLUMN_LABELS, COLUMN_TYPES } from '../../../../constants';\nimport { useUpdateExperimentViewUIState } from '../../contexts/ExperimentPageUIStateContext';\nimport { useExperimentIds } from '../../hooks/useExperimentIds';\nimport { ExperimentPageUIState } from '../../models/ExperimentPageUIState';\nimport {\n  extractCanonicalSortKey,\n  isCanonicalSortKeyOfType,\n  makeCanonicalSortKey,\n} from '../../utils/experimentPage.common-utils';\nimport { ExperimentRunsSelectorResult } from '../../utils/experimentRuns.selector';\nimport { customMetricBehaviorDefs } from '../../utils/customMetricBehaviorUtils';\n\n/**\n * We need to recreate antd's tree check callback signature since it's not importable\n */\ntype AntdTreeCheckCallback = { node: { key: string | number; checked: boolean } };\n\n/**\n * Function localizing antd tree inside a DOM element. Used to focusing by keyboard.\n */\nconst locateAntdTree = (parent: HTMLElement | null): HTMLElement | null =>\n  parent?.querySelector('[role=\"tree\"] input') || null;\n\nconst GROUP_KEY = 'GROUP';\n\nconst GROUP_KEY_ATTRIBUTES = makeCanonicalSortKey(GROUP_KEY, COLUMN_TYPES.ATTRIBUTES);\nconst GROUP_KEY_PARAMS = makeCanonicalSortKey(GROUP_KEY, COLUMN_TYPES.PARAMS);\nconst GROUP_KEY_METRICS = makeCanonicalSortKey(GROUP_KEY, COLUMN_TYPES.METRICS);\nconst GROUP_KEY_TAGS = makeCanonicalSortKey(GROUP_KEY, COLUMN_TYPES.TAGS);\n\n/**\n * Returns all usable attribute columns basing on view mode and enabled flagged features\n */\nconst getAttributeColumns = (isComparing: boolean) => {\n  const result = [\n    ATTRIBUTE_COLUMN_LABELS.USER,\n    ATTRIBUTE_COLUMN_LABELS.SOURCE,\n    ATTRIBUTE_COLUMN_LABELS.VERSION,\n    ATTRIBUTE_COLUMN_LABELS.MODELS,\n    ATTRIBUTE_COLUMN_LABELS.DESCRIPTION,\n  ];\n\n  if (isComparing) {\n    result.unshift(ATTRIBUTE_COLUMN_LABELS.EXPERIMENT_NAME);\n  }\n\n  result.unshift(ATTRIBUTE_COLUMN_LABELS.DATASET);\n\n  return result;\n};\n\n/**\n * Function filters list of string by a given query string.\n */\nconst findMatching = (values: string[], filterQuery: string) =>\n  values.filter((v) => v.toLowerCase().includes(filterQuery.toLowerCase()));\n\n/**\n * Function dissects given string and wraps the\n * searched query with <strong>...</strong> if found. Used for highlighting search.\n */\nconst createHighlightedNode = (value: string, filterQuery: string) => {\n  if (!filterQuery) {\n    return value;\n  }\n  const index = value.toLowerCase().indexOf(filterQuery.toLowerCase());\n  const beforeStr = value.substring(0, index);\n  const matchStr = value.substring(index, index + filterQuery.length);\n  const afterStr = value.substring(index + filterQuery.length);\n\n  return index > -1 ? (\n    <span>\n      {beforeStr}\n      <strong>{matchStr}</strong>\n      {afterStr}\n    </span>\n  ) : (\n    value\n  );\n};\nexport interface ExperimentViewRunsColumnSelectorProps {\n  runsData: ExperimentRunsSelectorResult;\n  columnSelectorVisible: boolean;\n  onChangeColumnSelectorVisible: (value: boolean) => void;\n  selectedColumns: string[];\n}\n\n/**\n * A component displaying the searchable column list - implementation.\n */\nexport const ExperimentViewRunsColumnSelector = React.memo(\n  ({\n    runsData,\n    columnSelectorVisible,\n    onChangeColumnSelectorVisible,\n    selectedColumns,\n  }: ExperimentViewRunsColumnSelectorProps) => {\n    const updateUIState = useUpdateExperimentViewUIState();\n    const experimentIds = useExperimentIds();\n    const [filter, setFilter] = useState('');\n    const { theme } = useDesignSystemTheme();\n\n    const searchInputRef = useRef<any>(null);\n    const scrollableContainerRef = useRef<HTMLDivElement>(null);\n    const buttonRef = useRef<HTMLButtonElement>(null);\n\n    // Extract all attribute columns\n    const attributeColumnNames = useMemo(() => getAttributeColumns(experimentIds.length > 1), [experimentIds.length]);\n\n    const setCheckedColumns = useCallback(\n      (updateFn: (existingCheckedColumns: string[]) => string[]) =>\n        updateUIState((facets: ExperimentPageUIState) => {\n          const newColumns = updateFn(facets.selectedColumns);\n          const uniqueNewColumns = Array.from(new Set(newColumns));\n          return { ...facets, selectedColumns: uniqueNewColumns };\n        }),\n      [updateUIState],\n    );\n\n    // Extract unique list of tags\n    const tagsKeyList = useMemo(() => Utils.getVisibleTagKeyList(runsData.tagsList), [runsData]);\n\n    // Extract canonical key names for attributes, params, metrics and tags.\n    const canonicalKeyNames = useMemo(\n      () => ({\n        [COLUMN_TYPES.ATTRIBUTES]: attributeColumnNames.map((key) =>\n          makeCanonicalSortKey(COLUMN_TYPES.ATTRIBUTES, key),\n        ),\n        [COLUMN_TYPES.PARAMS]: runsData.paramKeyList.map((key) => makeCanonicalSortKey(COLUMN_TYPES.PARAMS, key)),\n        [COLUMN_TYPES.METRICS]: runsData.metricKeyList.map((key) => makeCanonicalSortKey(COLUMN_TYPES.METRICS, key)),\n        [COLUMN_TYPES.TAGS]: tagsKeyList.map((key) => makeCanonicalSortKey(COLUMN_TYPES.TAGS, key)),\n      }),\n      [runsData, attributeColumnNames, tagsKeyList],\n    );\n\n    // This memoized value holds the tree structure generated from\n    // attributes, params, metrics and tags. Displays only filtered values.\n    const treeData = useMemo(() => {\n      const result = [];\n\n      const filteredAttributes = findMatching(attributeColumnNames, filter);\n      const filteredParams = findMatching(runsData.paramKeyList, filter);\n      const filteredMetrics = findMatching(runsData.metricKeyList, filter);\n      const filteredTags = findMatching(tagsKeyList, filter);\n\n      if (filteredAttributes.length) {\n        result.push({\n          key: GROUP_KEY_ATTRIBUTES,\n          title: `Attributes`,\n          children: filteredAttributes.map((attributeKey) => ({\n            key: makeCanonicalSortKey(COLUMN_TYPES.ATTRIBUTES, attributeKey),\n            title: createHighlightedNode(attributeKey, filter),\n          })),\n        });\n      }\n      if (filteredMetrics.length) {\n        result.push({\n          key: GROUP_KEY_METRICS,\n          title: `Metrics (${filteredMetrics.length})`,\n          children: filteredMetrics.map((metricKey) => {\n            const customColumnDef = customMetricBehaviorDefs[metricKey];\n            return {\n              key: makeCanonicalSortKey(COLUMN_TYPES.METRICS, metricKey),\n              title: createHighlightedNode(customColumnDef?.displayName ?? metricKey, filter),\n            };\n          }),\n        });\n      }\n      if (filteredParams.length) {\n        result.push({\n          key: GROUP_KEY_PARAMS,\n          title: `Parameters (${filteredParams.length})`,\n          children: filteredParams.map((paramKey) => ({\n            key: makeCanonicalSortKey(COLUMN_TYPES.PARAMS, paramKey),\n            title: createHighlightedNode(paramKey, filter),\n          })),\n        });\n      }\n      if (filteredTags.length) {\n        result.push({\n          key: GROUP_KEY_TAGS,\n          title: `Tags (${filteredTags.length})`,\n          children: filteredTags.map((tagKey) => ({\n            key: makeCanonicalSortKey(COLUMN_TYPES.TAGS, tagKey),\n            title: tagKey,\n          })),\n        });\n      }\n\n      return result;\n    }, [attributeColumnNames, filter, runsData, tagsKeyList]);\n\n    // This callback toggles entire group of keys\n    const toggleGroup = useCallback(\n      (isChecked: boolean, keyList: string[]) => {\n        if (!isChecked) {\n          setCheckedColumns((checked) => [...checked, ...keyList]);\n        } else {\n          setCheckedColumns((checked) => checked.filter((k) => !keyList.includes(k)));\n        }\n      },\n      [setCheckedColumns],\n    );\n\n    // This callback is intended to select/deselect a single key\n    const toggleSingleKey = useCallback(\n      (key: string, isChecked: boolean) => {\n        if (!isChecked) {\n          setCheckedColumns((checked) => [...checked, key]);\n        } else {\n          setCheckedColumns((checked) => checked.filter((k) => k !== key));\n        }\n      },\n      [setCheckedColumns],\n    );\n\n    useEffect(() => {\n      if (columnSelectorVisible) {\n        setFilter('');\n\n        // Let's wait for the next execution frame, then:\n        // - restore the dropdown menu scroll position\n        // - focus the search input\n        // - bring the dropdown into the viewport using scrollIntoView()\n        requestAnimationFrame(() => {\n          scrollableContainerRef?.current?.scrollTo(0, 0);\n          searchInputRef.current?.focus({ preventScroll: true });\n\n          if (buttonRef.current) {\n            buttonRef.current.scrollIntoView({ block: 'nearest', behavior: 'smooth' });\n          }\n        });\n      }\n    }, [columnSelectorVisible]);\n\n    const onCheck = useCallback(\n      // We need to recreate antd's tree check callback signature\n      (_: any, { node: { key, checked } }: AntdTreeCheckCallback) => {\n        if (isCanonicalSortKeyOfType(key.toString(), GROUP_KEY)) {\n          const columnType = extractCanonicalSortKey(key.toString(), GROUP_KEY);\n          const canonicalKeysForGroup = canonicalKeyNames[columnType];\n          if (canonicalKeysForGroup) {\n            toggleGroup(checked, findMatching(canonicalKeysForGroup, filter));\n          }\n        } else {\n          toggleSingleKey(key.toString(), checked);\n        }\n      },\n      [canonicalKeyNames, toggleGroup, toggleSingleKey, filter],\n    );\n\n    // This callback moves focus to tree element if down arrow has been pressed\n    // when inside search input area.\n    const searchInputKeyDown = useCallback<React.KeyboardEventHandler<HTMLInputElement>>((e) => {\n      if (e.key === 'ArrowDown') {\n        const treeElement = locateAntdTree(scrollableContainerRef.current);\n\n        if (treeElement) {\n          treeElement.focus();\n        }\n      }\n    }, []);\n\n    // A JSX block containing the dropdown\n    const dropdownContent = (\n      <div\n        css={{\n          backgroundColor: theme.colors.backgroundPrimary,\n          width: 400,\n          border: `1px solid`,\n          borderColor: theme.colors.border,\n          [theme.responsive.mediaQueries.xs]: {\n            width: '100vw',\n          },\n        }}\n        onKeyDown={(e) => {\n          // Since we're controlling the visibility of the dropdown,\n          // we need to handle the escape key to close it.\n          if (e.key === 'Escape') {\n            onChangeColumnSelectorVisible(false);\n            buttonRef.current?.focus();\n          }\n        }}\n      >\n        <div css={(theme) => ({ padding: theme.spacing.md })}>\n          <Input\n            value={filter}\n            prefix={<SearchIcon />}\n            placeholder=\"Search columns\"\n            allowClear\n            ref={searchInputRef}\n            onChange={(e) => {\n              setFilter(e.target.value);\n            }}\n            onKeyDown={searchInputKeyDown}\n          />\n        </div>\n        <div\n          ref={scrollableContainerRef}\n          css={{\n            // Maximum height of 15 elements times 32 pixels as defined in\n            // design-system/src/design-system/Tree/Tree.tsx\n            maxHeight: 15 * 32,\n            overflowY: 'scroll',\n            overflowX: 'hidden',\n            paddingBottom: theme.spacing.md,\n            'span[title]': {\n              whiteSpace: 'nowrap',\n              textOverflow: 'ellipsis',\n              overflow: 'hidden',\n            },\n            [theme.responsive.mediaQueries.xs]: {\n              maxHeight: 'calc(100vh - 100px)',\n            },\n          }}\n        >\n          <Tree\n            data-testid=\"column-selector-tree\"\n            mode=\"checkable\"\n            dangerouslySetAntdProps={{\n              checkedKeys: selectedColumns,\n              onCheck,\n            }}\n            defaultExpandedKeys={[GROUP_KEY_ATTRIBUTES, GROUP_KEY_PARAMS, GROUP_KEY_METRICS, GROUP_KEY_TAGS]}\n            treeData={treeData}\n          />\n        </div>\n      </div>\n    );\n\n    return (\n      <Dropdown\n        overlay={dropdownContent}\n        placement=\"bottomLeft\"\n        trigger={['click']}\n        visible={columnSelectorVisible}\n        onVisibleChange={onChangeColumnSelectorVisible}\n      >\n        <Button\n          componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewrunscolumnselector.tsx_315\"\n          ref={buttonRef}\n          style={{ display: 'flex', alignItems: 'center' }}\n          data-testid=\"column-selection-dropdown\"\n          icon={<ColumnsIcon />}\n        >\n          <FormattedMessage\n            defaultMessage=\"Columns\"\n            description=\"Dropdown text to display columns names that could to be rendered for the experiment runs table\"\n          />{' '}\n          <ChevronDownIcon />\n        </Button>\n      </Dropdown>\n    );\n  },\n);\n","import { Button, Popover, Tabs, Tag, LegacyTooltip, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { ExperimentPageViewState } from '../../models/ExperimentPageViewState';\nimport { useExperimentViewLocalStore } from '../../hooks/useExperimentViewLocalStore';\nimport type { ExperimentViewRunsCompareMode } from '../../../../types';\nimport { PreviewBadge } from '@mlflow/mlflow/src/shared/building_blocks/PreviewBadge';\nimport { getExperimentPageDefaultViewMode, useExperimentPageViewMode } from '../../hooks/useExperimentPageViewMode';\nimport { shouldEnableTracingUI } from '../../../../../common/utils/FeatureUtils';\nimport { useShouldShowCombinedRunsTab } from '../../hooks/useShouldShowCombinedRunsTab';\n\nconst COMPARE_RUNS_TOOLTIP_STORAGE_KEY = 'compareRunsTooltip';\nconst COMPARE_RUNS_TOOLTIP_STORAGE_ITEM = 'seenBefore';\n\nexport interface ExperimentViewRunsModeSwitchProps {\n  viewState?: ExperimentPageViewState;\n  runsAreGrouped?: boolean;\n  hideBorder?: boolean;\n}\n\nconst ChartViewButtonTooltip: React.FC<{\n  isTableMode: boolean;\n  multipleRunsSelected: boolean;\n}> = ({ multipleRunsSelected, isTableMode }) => {\n  const seenTooltipStore = useExperimentViewLocalStore(COMPARE_RUNS_TOOLTIP_STORAGE_KEY);\n  const [isToolTipOpen, setToolTipOpen] = useState(\n    multipleRunsSelected && !seenTooltipStore.getItem(COMPARE_RUNS_TOOLTIP_STORAGE_ITEM),\n  );\n\n  useEffect(() => {\n    const hasSeenTooltipBefore = seenTooltipStore.getItem(COMPARE_RUNS_TOOLTIP_STORAGE_ITEM);\n    if (multipleRunsSelected && isTableMode && !hasSeenTooltipBefore) {\n      setToolTipOpen(true);\n    } else {\n      setToolTipOpen(false);\n    }\n  }, [multipleRunsSelected, isTableMode, seenTooltipStore]);\n\n  const updateIsTooltipOpen = useCallback(\n    (isOpen) => {\n      setToolTipOpen(isOpen);\n      seenTooltipStore.setItem(COMPARE_RUNS_TOOLTIP_STORAGE_ITEM, true);\n    },\n    [setToolTipOpen, seenTooltipStore],\n  );\n\n  return (\n    <>\n      <Popover.Root open={isToolTipOpen}>\n        <Popover.Trigger asChild>\n          <div css={{ position: 'absolute', inset: 0 }} />\n        </Popover.Trigger>\n        <Popover.Content align=\"start\">\n          <div css={{ maxWidth: '200px' }}>\n            <Typography.Paragraph>\n              <FormattedMessage\n                defaultMessage=\"You can now switch to the chart view to compare runs\"\n                description=\"Tooltip to push users to use the chart view instead of compare view\"\n              />\n            </Typography.Paragraph>\n            <div css={{ textAlign: 'right' }}>\n              <Button\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewrunsmodeswitch.tsx_65\"\n                onClick={() => updateIsTooltipOpen(false)}\n                type=\"primary\"\n              >\n                <FormattedMessage defaultMessage=\"Got it\" description=\"Button action text for chart switcher tooltip\" />\n              </Button>\n            </div>\n          </div>\n          <Popover.Arrow />\n        </Popover.Content>\n      </Popover.Root>\n    </>\n  );\n};\n\n/**\n * Allows switching between \"table\", \"chart\", \"evaluation\" and \"traces\" modes of experiment view\n */\nexport const ExperimentViewRunsModeSwitch = ({\n  viewState,\n  runsAreGrouped,\n  hideBorder = true,\n}: ExperimentViewRunsModeSwitchProps) => {\n  const [viewMode, setViewModeInURL] = useExperimentPageViewMode();\n  const { classNamePrefix } = useDesignSystemTheme();\n  const currentViewMode = viewMode || getExperimentPageDefaultViewMode();\n  const showCombinedRuns = useShouldShowCombinedRunsTab();\n  const activeTab = showCombinedRuns && ['TABLE', 'CHART'].includes(currentViewMode) ? 'RUNS' : currentViewMode;\n\n  return (\n    <Tabs\n      dangerouslyAppendEmotionCSS={{\n        [`.${classNamePrefix}-tabs-nav`]: {\n          marginBottom: 0,\n          '::before': {\n            display: hideBorder ? 'none' : 'block',\n          },\n        },\n      }}\n      activeKey={activeTab}\n      onChange={(tabKey) => {\n        const newValue = tabKey as ExperimentViewRunsCompareMode | 'RUNS';\n\n        if (activeTab === newValue) {\n          return;\n        }\n\n        if (newValue === 'RUNS') {\n          return setViewModeInURL('TABLE');\n        }\n\n        setViewModeInURL(newValue);\n      }}\n    >\n      {showCombinedRuns ? (\n        <Tabs.TabPane\n          tab={\n            <span data-testid=\"experiment-runs-mode-switch-combined\">\n              <FormattedMessage\n                defaultMessage=\"Runs\"\n                description=\"A button enabling combined runs table and charts mode on the experiment page\"\n              />\n            </span>\n          }\n          key=\"RUNS\"\n        />\n      ) : (\n        <>\n          <Tabs.TabPane\n            tab={\n              <span data-testid=\"experiment-runs-mode-switch-list\">\n                <FormattedMessage\n                  defaultMessage=\"Table\"\n                  description=\"A button enabling table mode on the experiment page\"\n                />\n              </span>\n            }\n            key=\"TABLE\"\n          />\n          <Tabs.TabPane\n            tab={\n              <>\n                <span data-testid=\"experiment-runs-mode-switch-compare\">\n                  <FormattedMessage\n                    defaultMessage=\"Chart\"\n                    description=\"A button enabling compare runs (chart) mode on the experiment page\"\n                  />\n                </span>\n                <ChartViewButtonTooltip\n                  isTableMode={viewMode === 'TABLE'}\n                  multipleRunsSelected={viewState ? Object.keys(viewState.runsSelected).length > 1 : false}\n                />\n              </>\n            }\n            key=\"CHART\"\n          />\n        </>\n      )}\n\n      <Tabs.TabPane\n        disabled={runsAreGrouped}\n        tab={\n          <LegacyTooltip\n            title={\n              runsAreGrouped ? (\n                <FormattedMessage\n                  defaultMessage=\"Unavailable when runs are grouped\"\n                  description=\"Experiment page > view mode switch > evaluation mode disabled tooltip\"\n                />\n              ) : undefined\n            }\n          >\n            <span data-testid=\"experiment-runs-mode-switch-evaluation\">\n              <FormattedMessage\n                defaultMessage=\"Evaluation\"\n                description=\"A button enabling compare runs (evaluation) mode on the experiment page\"\n              />\n              <PreviewBadge />\n            </span>\n          </LegacyTooltip>\n        }\n        key=\"ARTIFACT\"\n      />\n      {shouldEnableTracingUI() && (\n        <Tabs.TabPane\n          tab={\n            <span data-testid=\"experiment-runs-mode-switch-traces\">\n              <FormattedMessage\n                defaultMessage=\"Traces\"\n                description=\"A button enabling traces mode on the experiment page\"\n              />\n              <PreviewBadge />\n            </span>\n          }\n          key=\"TRACES\"\n        />\n      )}\n    </Tabs>\n  );\n};\n","import { useIntl, defineMessages, FormattedMessage } from 'react-intl';\nimport {\n  Button,\n  ChevronDownIcon,\n  DropdownMenu,\n  GearIcon,\n  Input,\n  ListBorderIcon,\n  SearchIcon,\n  Spinner,\n  Tag,\n  LegacyTooltip,\n  XCircleFillIcon,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { compact, isEmpty, isString, keys, uniq, values } from 'lodash';\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { MLFLOW_INTERNAL_PREFIX } from '../../../../../common/utils/TagUtils';\nimport {\n  RunsGroupByConfig,\n  createRunsGroupByKey,\n  normalizeRunsGroupByKey,\n} from '../../utils/experimentPage.group-row-utils';\nimport { ExperimentRunsSelectorResult } from '../../utils/experimentRuns.selector';\nimport { RunGroupingAggregateFunction, RunGroupingMode } from '../../utils/experimentPage.row-types';\nimport { shouldEnableToggleIndividualRunsInGroups } from '../../../../../common/utils/FeatureUtils';\n\nexport interface ExperimentViewRunsGroupBySelectorProps {\n  runsData: ExperimentRunsSelectorResult;\n  groupBy: RunsGroupByConfig | null | string;\n  onChange: (newGroupByConfig: RunsGroupByConfig | null) => void;\n  useGroupedValuesInCharts?: boolean;\n  onUseGroupedValuesInChartsChange: (newValue: boolean) => void;\n}\n\nconst messages = defineMessages({\n  minimum: {\n    defaultMessage: 'Minimum',\n    description: 'Experiment page > group by runs control > minimum aggregate function',\n  },\n  maximum: {\n    defaultMessage: 'Maximum',\n    description: 'Experiment page > group by runs control > maximum aggregate function',\n  },\n  average: {\n    defaultMessage: 'Average',\n    description: 'Experiment page > group by runs control > average aggregate function',\n  },\n  attributes: {\n    defaultMessage: 'Attributes',\n    description: 'Experiment page > group by runs control > attributes section label',\n  },\n  tags: {\n    defaultMessage: 'Tags',\n    description: 'Experiment page > group by runs control > tags section label',\n  },\n  params: {\n    defaultMessage: 'Params',\n    description: 'Experiment page > group by runs control > params section label',\n  },\n  dataset: {\n    defaultMessage: 'Dataset',\n    description: 'Experiment page > group by runs control > group by dataset',\n  },\n  noParams: {\n    defaultMessage: 'No params',\n    description: 'Experiment page > group by runs control > no params to group by',\n  },\n  noTags: {\n    defaultMessage: 'No tags',\n    description: 'Experiment page > group by runs control > no tags to group by',\n  },\n  aggregationTooltip: {\n    defaultMessage: 'Aggregation: {value}',\n    description: 'Experiment page > group by runs control > current aggregation function tooltip',\n  },\n  noResults: {\n    defaultMessage: 'No results',\n    description: 'Experiment page > group by runs control > no results after filtering by search query',\n  },\n});\n\nconst GroupBySelectorBody = ({\n  runsData,\n  onChange,\n  groupBy,\n  useGroupedValuesInCharts,\n  onUseGroupedValuesInChartsChange,\n}: {\n  groupBy: RunsGroupByConfig;\n  useGroupedValuesInCharts?: boolean;\n  onChange: (newGroupBy: RunsGroupByConfig | null) => void;\n  onUseGroupedValuesInChartsChange: (newValue: boolean) => void;\n  runsData: ExperimentRunsSelectorResult;\n}) => {\n  const intl = useIntl();\n  const attributeElementRef = useRef<HTMLDivElement>(null);\n  const tagElementRef = useRef<HTMLDivElement>(null);\n  const paramElementRef = useRef<HTMLDivElement>(null);\n  const inputElementRef = useRef<any>(null);\n\n  const minimumLabel = intl.formatMessage(messages.minimum);\n  const maximumLabel = intl.formatMessage(messages.maximum);\n  const averageLabel = intl.formatMessage(messages.average);\n  const datasetLabel = intl.formatMessage(messages.dataset);\n\n  const tagNames = useMemo(\n    () =>\n      uniq(\n        values(runsData.tagsList).flatMap((runTags) =>\n          keys(runTags).filter((tagKey) => !tagKey.startsWith(MLFLOW_INTERNAL_PREFIX)),\n        ),\n      ),\n    [runsData.tagsList],\n  );\n  const { aggregateFunction = RunGroupingAggregateFunction.Average, groupByKeys = [] } = groupBy || {};\n\n  const currentAggregateFunctionLabel = {\n    min: minimumLabel,\n    max: maximumLabel,\n    average: averageLabel,\n  }[aggregateFunction];\n\n  const { theme } = useDesignSystemTheme();\n  const [filter, setFilter] = useState('');\n\n  // Autofocus won't work everywhere so let's focus input everytime the dropdown is opened\n  useEffect(() => {\n    requestAnimationFrame(() => {\n      inputElementRef.current.focus();\n    });\n  }, []);\n\n  const filteredTagNames = tagNames.filter((tag) => tag.toLowerCase().includes(filter.toLowerCase()));\n  const filteredParamNames = runsData.paramKeyList.filter((param) =>\n    param.toLowerCase().includes(filter.toLowerCase()),\n  );\n  const containsDatasets = useMemo(() => !isEmpty(compact(runsData.datasetsList)), [runsData.datasetsList]);\n  const attributesMatchFilter = containsDatasets && datasetLabel.toLowerCase().includes(filter.toLowerCase());\n\n  const hasAnyResults = filteredTagNames.length > 0 || filteredParamNames.length > 0 || attributesMatchFilter;\n\n  const groupByToggle = useCallback(\n    (mode: RunGroupingMode, groupByData: string, checked: boolean) => {\n      if (checked) {\n        // Scenario #1: user selected new grouping key\n        const newGroupByKeys = [...groupByKeys];\n\n        // If the key is already present, we should not add it again\n        if (!newGroupByKeys.some((key) => key.mode === mode && key.groupByData === groupByData)) {\n          newGroupByKeys.push({ mode, groupByData });\n        }\n\n        onChange({\n          aggregateFunction,\n          groupByKeys: newGroupByKeys,\n        });\n      } else {\n        // Scenario #2: user deselected a grouping key\n        const newGroupByKeys = groupByKeys.filter((key) => !(key.mode === mode && key.groupByData === groupByData));\n\n        // If no keys are left, we should reset the group by and set it to null\n        if (!newGroupByKeys.length) {\n          onChange(null);\n          return;\n        }\n        onChange({\n          aggregateFunction,\n          groupByKeys: newGroupByKeys,\n        });\n      }\n    },\n    [aggregateFunction, groupByKeys, onChange],\n  );\n\n  const aggregateFunctionChanged = (aggregateFunctionString: string) => {\n    if (values<string>(RunGroupingAggregateFunction).includes(aggregateFunctionString)) {\n      const newFunction = aggregateFunctionString as RunGroupingAggregateFunction;\n      const newGroupBy: RunsGroupByConfig = { ...groupBy, aggregateFunction: newFunction };\n      onChange(newGroupBy);\n    }\n  };\n\n  const isGroupedBy = (mode: RunGroupingMode, groupByData: string) => {\n    return groupByKeys.some((key) => key.mode === mode && key.groupByData === groupByData);\n  };\n\n  return (\n    <>\n      <div css={{ display: 'flex', gap: theme.spacing.xs, padding: theme.spacing.sm }}>\n        <Input\n          value={filter}\n          onChange={(e) => setFilter(e.target.value)}\n          prefix={<SearchIcon />}\n          placeholder=\"Search\"\n          autoFocus\n          ref={inputElementRef}\n          onKeyDown={(e) => {\n            if (e.key === 'ArrowDown' || e.key === 'Tab') {\n              const firstItem = attributeElementRef.current || tagElementRef.current || paramElementRef.current;\n              firstItem?.focus();\n              return;\n            }\n            if (e.key !== 'Escape') {\n              e.stopPropagation();\n            }\n          }}\n        />\n        <DropdownMenu.Root>\n          <LegacyTooltip\n            placement=\"right\"\n            title={\n              <FormattedMessage\n                {...messages.aggregationTooltip}\n                values={{\n                  value: currentAggregateFunctionLabel || aggregateFunction,\n                }}\n              />\n            }\n          >\n            <DropdownMenu.Trigger asChild>\n              <Button\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewrunsgroupbyselector.tsx_168\"\n                icon={<GearIcon />}\n                css={{ minWidth: 32 }}\n                aria-label=\"Change aggregation function\"\n              />\n            </DropdownMenu.Trigger>\n          </LegacyTooltip>\n          <DropdownMenu.Content align=\"start\" side=\"right\">\n            {shouldEnableToggleIndividualRunsInGroups() && (\n              <>\n                <DropdownMenu.CheckboxItem\n                  disabled={!groupByKeys.length}\n                  checked={useGroupedValuesInCharts}\n                  onCheckedChange={onUseGroupedValuesInChartsChange}\n                >\n                  <DropdownMenu.ItemIndicator />\n                  Use grouping from the runs table in charts\n                </DropdownMenu.CheckboxItem>\n                <DropdownMenu.Separator />\n              </>\n            )}\n            <DropdownMenu.RadioGroup value={aggregateFunction} onValueChange={aggregateFunctionChanged}>\n              <DropdownMenu.RadioItem\n                disabled={!groupByKeys.length}\n                value={RunGroupingAggregateFunction.Min}\n                key={RunGroupingAggregateFunction.Min}\n              >\n                <DropdownMenu.ItemIndicator />\n                {minimumLabel}\n              </DropdownMenu.RadioItem>\n              <DropdownMenu.RadioItem\n                disabled={!groupByKeys.length}\n                value={RunGroupingAggregateFunction.Max}\n                key={RunGroupingAggregateFunction.Max}\n              >\n                <DropdownMenu.ItemIndicator />\n                {maximumLabel}\n              </DropdownMenu.RadioItem>\n              <DropdownMenu.RadioItem\n                disabled={!groupByKeys.length}\n                value={RunGroupingAggregateFunction.Average}\n                key={RunGroupingAggregateFunction.Average}\n              >\n                <DropdownMenu.ItemIndicator />\n                {averageLabel}\n              </DropdownMenu.RadioItem>\n            </DropdownMenu.RadioGroup>\n          </DropdownMenu.Content>\n        </DropdownMenu.Root>\n      </div>\n      <DropdownMenu.Group css={{ maxHeight: 400, overflowY: 'scroll' }}>\n        {attributesMatchFilter && (\n          <>\n            <DropdownMenu.Label>\n              <FormattedMessage {...messages.attributes} />\n            </DropdownMenu.Label>\n            {datasetLabel.toLowerCase().includes(filter.toLowerCase()) && (\n              <DropdownMenu.CheckboxItem\n                checked={isGroupedBy(RunGroupingMode.Dataset, 'dataset')}\n                key={createRunsGroupByKey(RunGroupingMode.Dataset, 'dataset', aggregateFunction)}\n                ref={attributeElementRef}\n                onCheckedChange={(checked) => groupByToggle(RunGroupingMode.Dataset, 'dataset', checked)}\n              >\n                <DropdownMenu.ItemIndicator />\n                {datasetLabel}\n              </DropdownMenu.CheckboxItem>\n            )}\n            <DropdownMenu.Separator />\n          </>\n        )}\n        {filteredTagNames.length > 0 && (\n          <>\n            <DropdownMenu.Label>\n              <FormattedMessage {...messages.tags} />\n            </DropdownMenu.Label>\n\n            {filteredTagNames.map((tagName, index) => {\n              const groupByKey = createRunsGroupByKey(RunGroupingMode.Tag, tagName, aggregateFunction);\n              return (\n                <DropdownMenu.CheckboxItem\n                  checked={isGroupedBy(RunGroupingMode.Tag, tagName)}\n                  key={groupByKey}\n                  ref={index === 0 ? tagElementRef : undefined}\n                  onCheckedChange={(checked) => groupByToggle(RunGroupingMode.Tag, tagName, checked)}\n                >\n                  <DropdownMenu.ItemIndicator />\n                  {tagName}\n                </DropdownMenu.CheckboxItem>\n              );\n            })}\n            {!tagNames.length && (\n              <DropdownMenu.Item disabled>\n                <DropdownMenu.ItemIndicator /> <FormattedMessage {...messages.noTags} />\n              </DropdownMenu.Item>\n            )}\n            <DropdownMenu.Separator />\n          </>\n        )}\n        {filteredParamNames.length > 0 && (\n          <>\n            <DropdownMenu.Label>\n              <FormattedMessage {...messages.params} />\n            </DropdownMenu.Label>\n\n            {filteredParamNames.map((paramName, index) => {\n              const groupByKey = createRunsGroupByKey(RunGroupingMode.Param, paramName, aggregateFunction);\n              return (\n                <DropdownMenu.CheckboxItem\n                  checked={isGroupedBy(RunGroupingMode.Param, paramName)}\n                  key={groupByKey}\n                  ref={index === 0 ? paramElementRef : undefined}\n                  onCheckedChange={(checked) => groupByToggle(RunGroupingMode.Param, paramName, checked)}\n                >\n                  <DropdownMenu.ItemIndicator />\n                  {paramName}\n                </DropdownMenu.CheckboxItem>\n              );\n            })}\n            {!runsData.paramKeyList.length && (\n              <DropdownMenu.Item disabled>\n                <FormattedMessage {...messages.noParams} />\n              </DropdownMenu.Item>\n            )}\n          </>\n        )}\n        {!hasAnyResults && (\n          <DropdownMenu.Item disabled>\n            <FormattedMessage {...messages.noResults} />\n          </DropdownMenu.Item>\n        )}\n      </DropdownMenu.Group>\n    </>\n  );\n};\n\n/**\n * A component displaying searchable \"group by\" selector\n */\nexport const ExperimentViewRunsGroupBySelector = React.memo(\n  ({\n    runsData,\n    groupBy,\n    isLoading,\n    onChange,\n    useGroupedValuesInCharts,\n    onUseGroupedValuesInChartsChange,\n  }: ExperimentViewRunsGroupBySelectorProps & {\n    isLoading: boolean;\n  }) => {\n    const { theme } = useDesignSystemTheme();\n\n    // In case we encounter deprecated string-based group by descriptor\n    const normalizedGroupBy = normalizeRunsGroupByKey(groupBy) || {\n      aggregateFunction: RunGroupingAggregateFunction.Average,\n      groupByKeys: [],\n    };\n\n    const isGroupedBy = normalizedGroupBy && !isEmpty(normalizedGroupBy.groupByKeys);\n\n    return (\n      <DropdownMenu.Root modal={false}>\n        <DropdownMenu.Trigger asChild>\n          <Button\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewrunsgroupbyselector.tsx_306\"\n            icon={<ListBorderIcon />}\n            style={{ display: 'flex', alignItems: 'center' }}\n            data-testid=\"column-selection-dropdown\"\n            endIcon={<ChevronDownIcon />}\n          >\n            {isGroupedBy ? (\n              <FormattedMessage\n                defaultMessage=\"Group by: {value}\"\n                description=\"Experiment page > group by runs control > trigger button label > with value\"\n                values={{\n                  value: normalizedGroupBy.groupByKeys[0].groupByData,\n                  // value: mode === RunGroupingMode.Dataset ? intl.formatMessage(messages.dataset) : groupByData,\n                }}\n              />\n            ) : (\n              <FormattedMessage\n                defaultMessage=\"Group by\"\n                description=\"Experiment page > group by runs control > trigger button label > empty\"\n              />\n            )}\n            {normalizedGroupBy.groupByKeys.length > 1 && (\n              <Tag css={{ marginLeft: 4, marginRight: 0 }}>+{normalizedGroupBy.groupByKeys.length - 1}</Tag>\n            )}\n            {groupBy && (\n              <XCircleFillIcon\n                aria-hidden=\"false\"\n                css={{\n                  color: theme.colors.textPlaceholder,\n                  fontSize: theme.typography.fontSizeSm,\n                  marginLeft: theme.spacing.sm,\n\n                  ':hover': {\n                    color: theme.colors.actionTertiaryTextHover,\n                  },\n                }}\n                role=\"button\"\n                onClick={() => {\n                  onChange(null);\n                }}\n                onPointerDownCapture={(e) => {\n                  // Prevents the dropdown from opening when clearing\n                  e.stopPropagation();\n                }}\n              />\n            )}\n          </Button>\n        </DropdownMenu.Trigger>\n        <DropdownMenu.Content>\n          {isLoading ? (\n            <DropdownMenu.Item>\n              <Spinner />\n            </DropdownMenu.Item>\n          ) : (\n            <GroupBySelectorBody\n              groupBy={normalizedGroupBy}\n              onChange={onChange}\n              runsData={runsData}\n              onUseGroupedValuesInChartsChange={onUseGroupedValuesInChartsChange}\n              useGroupedValuesInCharts={useGroupedValuesInCharts}\n            />\n          )}\n        </DropdownMenu.Content>\n      </DropdownMenu.Root>\n    );\n  },\n);\n","import {\n  ArrowDownIcon,\n  ArrowUpIcon,\n  SortAscendingIcon,\n  SortDescendingIcon,\n  Input,\n  SearchIcon,\n  useDesignSystemTheme,\n  DropdownMenu,\n  Button,\n  ChevronDownIcon,\n} from '@databricks/design-system';\nimport React, { useEffect, useMemo, useRef, useState } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { middleTruncateStr } from '../../../../../common/utils/StringUtils';\nimport { ATTRIBUTE_COLUMN_SORT_KEY, ATTRIBUTE_COLUMN_SORT_LABEL, COLUMN_TYPES } from '../../../../constants';\nimport { useUpdateExperimentPageSearchFacets } from '../../hooks/useExperimentPageSearchFacets';\nimport { useUpdateExperimentViewUIState } from '../../contexts/ExperimentPageUIStateContext';\nimport { ToggleIconButton } from '../../../../../common/components/ToggleIconButton';\nimport { makeCanonicalSortKey } from '../../utils/experimentPage.common-utils';\nimport { customMetricBehaviorDefs } from '../../utils/customMetricBehaviorUtils';\n\ntype SORT_KEY_TYPE = keyof (typeof ATTRIBUTE_COLUMN_SORT_KEY & typeof ATTRIBUTE_COLUMN_SORT_LABEL);\n\nconst ExperimentViewRunsSortSelectorV2Body = ({\n  sortOptions,\n  orderByKey,\n  orderByAsc,\n  onOptionSelected,\n}: {\n  sortOptions: {\n    label: string;\n    value: string;\n  }[];\n  orderByKey: string;\n  orderByAsc: boolean;\n  onOptionSelected: () => void;\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  const setUrlSearchFacets = useUpdateExperimentPageSearchFacets();\n  const updateUIState = useUpdateExperimentViewUIState();\n  const inputElementRef = useRef<React.ComponentRef<typeof Input>>(null);\n  const [filter, setFilter] = useState('');\n  const firstElementRef = useRef<HTMLDivElement>(null);\n\n  // Merge all sort options and filter them by the search query\n  const filteredSortOptions = useMemo(\n    () =>\n      sortOptions.filter((option) => {\n        return option.label.toLowerCase().includes(filter.toLowerCase());\n      }),\n    [sortOptions, filter],\n  );\n\n  const handleChange = (orderByKey: string) => {\n    setUrlSearchFacets({\n      orderByKey,\n    });\n\n    updateUIState((currentUIState) => {\n      if (!currentUIState.selectedColumns.includes(orderByKey)) {\n        return {\n          ...currentUIState,\n          selectedColumns: [...currentUIState.selectedColumns, orderByKey],\n        };\n      }\n      return currentUIState;\n    });\n\n    onOptionSelected();\n  };\n  const setOrder = (ascending: boolean) => {\n    setUrlSearchFacets({\n      orderByAsc: ascending,\n    });\n    onOptionSelected();\n  };\n\n  // Autofocus won't work everywhere so let's focus input everytime the dropdown is opened\n  useEffect(() => {\n    requestAnimationFrame(() => {\n      inputElementRef.current?.focus();\n    });\n  }, []);\n\n  return (\n    <>\n      <div\n        css={{\n          padding: `${theme.spacing.sm}px ${theme.spacing.lg / 2}px ${theme.spacing.sm}px`,\n          width: '100%',\n          display: 'flex',\n          gap: theme.spacing.xs,\n        }}\n      >\n        <Input\n          prefix={<SearchIcon />}\n          value={filter}\n          type=\"search\"\n          onChange={(e) => setFilter(e.target.value)}\n          placeholder=\"Search\"\n          autoFocus\n          ref={inputElementRef}\n          onKeyDown={(e) => {\n            if (e.key === 'ArrowDown' || e.key === 'Tab') {\n              firstElementRef.current?.focus();\n              return;\n            }\n            e.stopPropagation();\n          }}\n        />\n        <div\n          css={{\n            display: 'flex',\n            gap: theme.spacing.xs,\n          }}\n        >\n          <ToggleIconButton\n            pressed={!orderByAsc}\n            icon={<ArrowDownIcon />}\n            componentId=\"mlflow.experiment_page.sort_select_v2.sort_desc\"\n            onClick={() => setOrder(false)}\n            aria-label=\"Sort descending\"\n          />\n          <ToggleIconButton\n            pressed={orderByAsc}\n            icon={<ArrowUpIcon />}\n            componentId=\"mlflow.experiment_page.sort_select_v2.sort_asc\"\n            onClick={() => setOrder(true)}\n            aria-label=\"Sort ascending\"\n          />\n        </div>\n      </div>\n      <DropdownMenu.Group css={{ maxHeight: 400, overflowY: 'auto' }}>\n        {filteredSortOptions.map((sortOption, index) => (\n          <DropdownMenu.CheckboxItem\n            key={sortOption.value}\n            onClick={() => handleChange(sortOption.value)}\n            checked={sortOption.value === orderByKey}\n            data-test-id={`sort-select-${sortOption.label}`}\n            ref={index === 0 ? firstElementRef : undefined}\n          >\n            <DropdownMenu.ItemIndicator />\n            <span css={{ display: 'flex', alignItems: 'center', gap: 4 }}>\n              {middleTruncateStr(sortOption.label, 50)}\n            </span>\n          </DropdownMenu.CheckboxItem>\n        ))}\n        {!filteredSortOptions.length && (\n          <DropdownMenu.Item disabled>\n            <FormattedMessage\n              defaultMessage=\"No results\"\n              description=\"Experiment page > sort selector > no results after filtering by search query\"\n            />\n          </DropdownMenu.Item>\n        )}\n      </DropdownMenu.Group>\n    </>\n  );\n};\n\nexport const ExperimentViewRunsSortSelectorV2 = React.memo(\n  ({\n    metricKeys,\n    paramKeys,\n    orderByAsc,\n    orderByKey,\n  }: {\n    orderByKey: string;\n    orderByAsc: boolean;\n    metricKeys: string[];\n    paramKeys: string[];\n  }) => {\n    const intl = useIntl();\n    const [open, setOpen] = useState(false);\n    const { theme } = useDesignSystemTheme();\n\n    // Get sort options for attributes (e.g. start time, run name, etc.)\n    const attributeSortOptions = useMemo(\n      () =>\n        Object.keys(ATTRIBUTE_COLUMN_SORT_LABEL).map((sortLabelKey) => ({\n          label: ATTRIBUTE_COLUMN_SORT_LABEL[sortLabelKey as SORT_KEY_TYPE],\n          value: ATTRIBUTE_COLUMN_SORT_KEY[sortLabelKey as SORT_KEY_TYPE],\n        })),\n      [],\n    );\n\n    // Get sort options for metrics\n    const metricsSortOptions = useMemo(\n      () =>\n        metricKeys.map((sortLabelKey) => ({\n          label: customMetricBehaviorDefs[sortLabelKey]?.displayName ?? sortLabelKey,\n          value: `${makeCanonicalSortKey(COLUMN_TYPES.METRICS, sortLabelKey)}`,\n        })),\n      [metricKeys],\n    );\n\n    // Get sort options for params\n    const paramsSortOptions = useMemo(\n      () =>\n        paramKeys.map((sortLabelKey) => ({\n          label: sortLabelKey,\n          value: `${makeCanonicalSortKey(COLUMN_TYPES.PARAMS, sortLabelKey)}`,\n        })),\n      [paramKeys],\n    );\n\n    const sortOptions = useMemo(\n      () => [...attributeSortOptions, ...metricsSortOptions, ...paramsSortOptions],\n      [attributeSortOptions, metricsSortOptions, paramsSortOptions],\n    );\n\n    // Generate the label for the sort select dropdown\n    const currentSortSelectLabel = useMemo(() => {\n      // Search through all sort options generated basing on the fetched runs\n      const sortOption = sortOptions.find((option) => option.value === orderByKey);\n\n      let sortOptionLabel = sortOption?.label;\n\n      // If the actually chosen sort value is not found in the sort option list (e.g. because the list of fetched runs is empty),\n      // use it to generate the label\n      if (!sortOptionLabel) {\n        // The following regex extracts plain sort key name from its canonical form, i.e.\n        // metrics.`metric_key_name` => metric_key_name\n        const extractedKeyName = orderByKey.match(/^.+\\.`(.+)`$/);\n        if (extractedKeyName) {\n          // eslint-disable-next-line prefer-destructuring\n          sortOptionLabel = extractedKeyName[1];\n        }\n      }\n      return `${intl.formatMessage({\n        defaultMessage: 'Sort',\n        description: 'Experiment page > sort selector > label for the dropdown button',\n      })}: ${sortOptionLabel}`;\n    }, [sortOptions, intl, orderByKey]);\n\n    return (\n      <DropdownMenu.Root open={open} onOpenChange={setOpen} modal={false}>\n        <DropdownMenu.Trigger data-test-id=\"sort-select-dropdown\" asChild>\n          <Button\n            componentId=\"mlflow.experiment_page.sort_select_v2.toggle\"\n            icon={orderByAsc ? <SortAscendingIcon /> : <SortDescendingIcon />}\n            css={{ minWidth: 32 }}\n            aria-label={currentSortSelectLabel}\n            endIcon={<ChevronDownIcon />}\n          >\n            {currentSortSelectLabel}\n          </Button>\n        </DropdownMenu.Trigger>\n        <DropdownMenu.Content minWidth={250}>\n          <ExperimentViewRunsSortSelectorV2Body\n            sortOptions={sortOptions}\n            orderByKey={orderByKey}\n            orderByAsc={orderByAsc}\n            onOptionSelected={() => setOpen(false)}\n          />\n        </DropdownMenu.Content>\n      </DropdownMenu.Root>\n    );\n  },\n);\n","import React, { useCallback, useMemo } from 'react';\nimport { UpdateExperimentViewStateFn } from '../../../../types';\nimport { useRunSortOptions } from '../../hooks/useRunSortOptions';\nimport { ExperimentPageViewState } from '../../models/ExperimentPageViewState';\nimport { ExperimentRunsSelectorResult } from '../../utils/experimentRuns.selector';\nimport { ExperimentViewRunsControlsActions } from './ExperimentViewRunsControlsActions';\nimport { ExperimentViewRunsControlsFilters } from './ExperimentViewRunsControlsFilters';\nimport { ErrorWrapper } from '../../../../../common/utils/ErrorWrapper';\nimport { ToggleButton, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport { ExperimentViewRunsSortSelector } from './ExperimentViewRunsSortSelector';\nimport { ExperimentViewRunsColumnSelector } from './ExperimentViewRunsColumnSelector';\nimport { shouldUseNewExperimentPageSortSelector } from '../../../../../common/utils/FeatureUtils';\nimport { ExperimentViewRunsModeSwitch } from './ExperimentViewRunsModeSwitch';\nimport { useExperimentPageViewMode } from '../../hooks/useExperimentPageViewMode';\nimport Utils from '../../../../../common/utils/Utils';\nimport { downloadRunsCsv } from '../../utils/experimentPage.common-utils';\nimport { ExperimentPageUIState } from '../../models/ExperimentPageUIState';\nimport { ExperimentViewRunsGroupBySelector } from './ExperimentViewRunsGroupBySelector';\nimport { useUpdateExperimentViewUIState } from '../../contexts/ExperimentPageUIStateContext';\nimport { ExperimentPageSearchFacetsState } from '../../models/ExperimentPageSearchFacetsState';\nimport { ExperimentViewRunsSortSelectorV2 } from './ExperimentViewRunsSortSelectorV2';\nimport { useShouldShowCombinedRunsTab } from '../../hooks/useShouldShowCombinedRunsTab';\n\ntype ExperimentViewRunsControlsProps = {\n  viewState: ExperimentPageViewState;\n  updateViewState: UpdateExperimentViewStateFn;\n\n  searchFacetsState: ExperimentPageSearchFacetsState;\n\n  experimentId: string;\n\n  runsData: ExperimentRunsSelectorResult;\n\n  expandRows: boolean;\n  updateExpandRows: (expandRows: boolean) => void;\n\n  requestError: ErrorWrapper | null;\n\n  refreshRuns: () => void;\n  uiState: ExperimentPageUIState;\n  isLoading: boolean;\n};\n\n/**\n * This component houses all controls related to searching runs: sort controls,\n * filters and run related actions (delete, restore, download CSV).\n */\nexport const ExperimentViewRunsControls = React.memo(\n  ({\n    runsData,\n    viewState,\n    updateViewState,\n    searchFacetsState,\n    experimentId,\n    requestError,\n    expandRows,\n    updateExpandRows,\n    refreshRuns,\n    uiState,\n    isLoading,\n  }: ExperimentViewRunsControlsProps) => {\n    const [compareRunsMode, setCompareRunsMode] = useExperimentPageViewMode();\n    const showCombinedRuns = useShouldShowCombinedRunsTab();\n\n    const { paramKeyList, metricKeyList, tagsList } = runsData;\n    const { orderByAsc, orderByKey } = searchFacetsState;\n\n    const updateUIState = useUpdateExperimentViewUIState();\n\n    const isComparingRuns = compareRunsMode !== 'TABLE';\n    const isEvaluationMode = compareRunsMode === 'ARTIFACT';\n\n    const { theme } = useDesignSystemTheme();\n\n    const filteredParamKeys = paramKeyList;\n    const filteredMetricKeys = metricKeyList;\n    const filteredTagKeys = Utils.getVisibleTagKeyList(tagsList);\n\n    const onDownloadCsv = useCallback(\n      () => downloadRunsCsv(runsData, filteredTagKeys, filteredParamKeys, filteredMetricKeys),\n      [filteredMetricKeys, filteredParamKeys, filteredTagKeys, runsData],\n    );\n\n    const sortOptions = useRunSortOptions(filteredMetricKeys, filteredParamKeys);\n\n    const selectedRunsCount = Object.values(viewState.runsSelected).filter(Boolean).length;\n    const canRestoreRuns = selectedRunsCount > 0;\n    const canRenameRuns = selectedRunsCount === 1;\n    const canCompareRuns = selectedRunsCount > 1;\n    const showActionButtons = canCompareRuns || canRenameRuns || canRestoreRuns;\n\n    const showGroupBySelector = !isEvaluationMode;\n\n    // Shows or hides the column selector\n    const changeColumnSelectorVisible = useCallback(\n      (value: boolean) => updateViewState({ columnSelectorVisible: value }),\n      [updateViewState],\n    );\n\n    const toggleExpandedRows = useCallback(() => updateExpandRows(!expandRows), [expandRows, updateExpandRows]);\n\n    const multipleDatasetsArePresent = useMemo(\n      () => runsData.datasetsList.some((datasetsInRun) => datasetsInRun?.length > 1),\n      [runsData],\n    );\n\n    return (\n      <div\n        css={{\n          display: 'flex',\n          gap: theme.spacing.sm,\n          flexDirection: 'column' as const,\n          marginTop: uiState.viewMaximized ? undefined : theme.spacing.md,\n          marginBottom: showCombinedRuns ? theme.spacing.sm : 0,\n        }}\n      >\n        {showCombinedRuns && (\n          <ExperimentViewRunsModeSwitch\n            hideBorder={false}\n            viewState={viewState}\n            runsAreGrouped={Boolean(uiState.groupBy)}\n          />\n        )}\n\n        {showActionButtons && (\n          <ExperimentViewRunsControlsActions\n            runsData={runsData}\n            searchFacetsState={searchFacetsState}\n            viewState={viewState}\n            refreshRuns={refreshRuns}\n          />\n        )}\n\n        {!showActionButtons && (\n          <ExperimentViewRunsControlsFilters\n            onDownloadCsv={onDownloadCsv}\n            searchFacetsState={searchFacetsState}\n            experimentId={experimentId}\n            viewState={viewState}\n            updateViewState={updateViewState}\n            runsData={runsData}\n            requestError={requestError}\n            refreshRuns={refreshRuns}\n            viewMaximized={uiState.viewMaximized}\n            autoRefreshEnabled={uiState.autoRefreshEnabled}\n            hideEmptyCharts={uiState.hideEmptyCharts}\n            additionalControls={\n              <>\n                {shouldUseNewExperimentPageSortSelector() ? (\n                  <ExperimentViewRunsSortSelectorV2\n                    orderByAsc={orderByAsc}\n                    orderByKey={orderByKey}\n                    metricKeys={filteredMetricKeys}\n                    paramKeys={filteredParamKeys}\n                  />\n                ) : (\n                  <ExperimentViewRunsSortSelector\n                    orderByAsc={orderByAsc}\n                    orderByKey={orderByKey}\n                    sortOptions={sortOptions}\n                  />\n                )}\n\n                {!isComparingRuns && (\n                  <ExperimentViewRunsColumnSelector\n                    columnSelectorVisible={viewState.columnSelectorVisible}\n                    onChangeColumnSelectorVisible={changeColumnSelectorVisible}\n                    runsData={runsData}\n                    selectedColumns={uiState.selectedColumns}\n                  />\n                )}\n\n                {!isComparingRuns && multipleDatasetsArePresent && (\n                  <ToggleButton onClick={toggleExpandedRows}>\n                    <FormattedMessage\n                      defaultMessage=\"Expand rows\"\n                      description=\"Label for the expand rows button above the experiment runs table\"\n                    />\n                  </ToggleButton>\n                )}\n                {showGroupBySelector && (\n                  <ExperimentViewRunsGroupBySelector\n                    groupBy={uiState.groupBy}\n                    onChange={(groupBy) => {\n                      updateUIState((state) => ({ ...state, groupBy }));\n                    }}\n                    runsData={runsData}\n                    isLoading={isLoading}\n                    useGroupedValuesInCharts={uiState.useGroupedValuesInCharts ?? true}\n                    onUseGroupedValuesInChartsChange={(useGroupedValuesInCharts) => {\n                      updateUIState((state) => ({ ...state, useGroupedValuesInCharts }));\n                    }}\n                  />\n                )}\n              </>\n            }\n          />\n        )}\n        {!showCombinedRuns && (\n          <ExperimentViewRunsModeSwitch viewState={viewState} runsAreGrouped={Boolean(uiState.groupBy)} />\n        )}\n      </div>\n    );\n  },\n);\n","import { useMemo } from 'react';\nimport {\n  ATTRIBUTE_COLUMN_SORT_KEY,\n  ATTRIBUTE_COLUMN_SORT_LABEL,\n  COLUMN_SORT_BY_ASC,\n  COLUMN_SORT_BY_DESC,\n  COLUMN_TYPES,\n  SORT_DELIMITER_SYMBOL,\n} from '../../../constants';\nimport { makeCanonicalSortKey } from '../utils/experimentPage.common-utils';\n\nexport type ExperimentRunSortOption = {\n  label: string;\n  order: string;\n  value: string;\n};\n\ntype SORT_KEY_TYPE = keyof (typeof ATTRIBUTE_COLUMN_SORT_KEY & typeof ATTRIBUTE_COLUMN_SORT_LABEL);\n\n/**\n * This hook creates a set of run+sort options basing on currently selected\n * columns and the list of all metrics and keys.\n */\nexport const useRunSortOptions = (\n  filteredMetricKeys: string[],\n  filteredParamKeys: string[],\n): ExperimentRunSortOption[] =>\n  useMemo(() => {\n    let sortOptions = [];\n    const ColumnSortByOrder = [COLUMN_SORT_BY_ASC, COLUMN_SORT_BY_DESC];\n    const attributesSortBy = Object.keys(ATTRIBUTE_COLUMN_SORT_LABEL).reduce<any[]>((options, sortLabelKey) => {\n      const sortLabel = ATTRIBUTE_COLUMN_SORT_LABEL[sortLabelKey as SORT_KEY_TYPE];\n\n      ColumnSortByOrder.forEach((order) => {\n        options.push({\n          label: sortLabel,\n          value: ATTRIBUTE_COLUMN_SORT_KEY[sortLabelKey as SORT_KEY_TYPE] + SORT_DELIMITER_SYMBOL + order,\n          order,\n        });\n      });\n\n      return options;\n    }, []);\n    const metricsSortBy = filteredMetricKeys.reduce<any[]>((options, sortLabelKey) => {\n      ColumnSortByOrder.forEach((order) => {\n        options.push({\n          label: sortLabelKey,\n          value: `${makeCanonicalSortKey(COLUMN_TYPES.METRICS, sortLabelKey)}${SORT_DELIMITER_SYMBOL}${order}`,\n          order,\n        });\n      });\n\n      return options;\n    }, []);\n    const paramsSortBy = filteredParamKeys.reduce<any[]>((options, sortLabelKey) => {\n      ColumnSortByOrder.forEach((order) => {\n        options.push({\n          label: sortLabelKey,\n          value: `${makeCanonicalSortKey(COLUMN_TYPES.PARAMS, sortLabelKey)}${SORT_DELIMITER_SYMBOL}${order}`,\n          order,\n        });\n      });\n\n      return options;\n    }, []);\n    sortOptions = [...attributesSortBy, ...metricsSortBy, ...paramsSortBy];\n\n    return sortOptions;\n  }, [filteredMetricKeys, filteredParamKeys]);\n","import type { AgGridReactProps, AgReactUiProps } from '@ag-grid-community/react';\nimport { Spinner } from '@databricks/design-system';\nimport React from 'react';\n\nconst MLFlowAgGridImpl = React.lazy(() => import('./AgGrid'));\n\n/**\n * A simple loader that will lazily load MLflow's ag grid implementation.\n * Extracted to a separate module for testing purposes.\n */\nexport const MLFlowAgGridLoader = (props: AgGridReactProps | AgReactUiProps) => (\n  <React.Suspense\n    fallback={\n      <div\n        css={(cssTheme) => ({\n          display: 'flex',\n          justifyContent: 'center',\n          margin: cssTheme.spacing.md,\n        })}\n      >\n        <Spinner />\n      </div>\n    }\n  >\n    <MLFlowAgGridImpl {...props} />\n  </React.Suspense>\n);\n","import { chunk, isEqual } from 'lodash';\nimport { AnyAction } from 'redux';\nimport { searchModelVersionsApi } from '../../../../model-registry/actions';\nimport { MAX_RUNS_IN_SEARCH_MODEL_VERSIONS_FILTER } from '../../../../model-registry/constants';\nimport {\n  ATTRIBUTE_COLUMN_SORT_KEY,\n  DEFAULT_LIFECYCLE_FILTER,\n  DEFAULT_MODEL_VERSION_FILTER,\n  DEFAULT_START_TIME,\n} from '../../../constants';\nimport { ViewType } from '../../../sdk/MlflowEnums';\nimport { KeyValueEntity, LIFECYCLE_FILTER } from '../../../types';\nimport { EXPERIMENT_LOG_MODEL_HISTORY_TAG } from './experimentPage.common-utils';\nimport { ThunkDispatch } from '../../../../redux-types';\nimport type { ExperimentPageSearchFacetsState } from '../models/ExperimentPageSearchFacetsState';\nimport { RUNS_SEARCH_MAX_RESULTS } from '../../../actions';\nimport { getUUID } from '../../../../common/utils/ActionUtils';\n\nconst START_TIME_COLUMN_OFFSET = {\n  ALL: null,\n  LAST_HOUR: 1 * 60 * 60 * 1000,\n  LAST_24_HOURS: 24 * 60 * 60 * 1000,\n  LAST_7_DAYS: 7 * 24 * 60 * 60 * 1000,\n  LAST_30_DAYS: 30 * 24 * 60 * 60 * 1000,\n  LAST_YEAR: 12 * 30 * 24 * 60 * 60 * 1000,\n};\n\nexport const RUNS_AUTO_REFRESH_INTERVAL = 30000;\n\n/**\n * This function checks if the sort+model state update has\n * been updated enough and if the change should invoke re-fetching\n * the runs from the back-end. This enables differentiation between\n * front-end and back-end filtering.\n */\nexport const shouldRefetchRuns = (\n  currentSearchFacetsState: ExperimentPageSearchFacetsState,\n  newSearchFacetsState: ExperimentPageSearchFacetsState,\n) =>\n  !isEqual(currentSearchFacetsState.searchFilter, newSearchFacetsState.searchFilter) ||\n  !isEqual(currentSearchFacetsState.orderByAsc, newSearchFacetsState.orderByAsc) ||\n  !isEqual(currentSearchFacetsState.orderByKey, newSearchFacetsState.orderByKey) ||\n  !isEqual(currentSearchFacetsState.lifecycleFilter, newSearchFacetsState.lifecycleFilter) ||\n  !isEqual(currentSearchFacetsState.startTime, newSearchFacetsState.startTime) ||\n  !isEqual(currentSearchFacetsState.datasetsFilter, newSearchFacetsState.datasetsFilter);\n\n/**\n * Creates \"order by\" SQL expression\n */\nconst createOrderByExpression = ({ orderByKey, orderByAsc }: ExperimentPageSearchFacetsState) => {\n  if (orderByKey) {\n    return orderByAsc ? [orderByKey + ' ASC'] : [orderByKey + ' DESC'];\n  }\n  return [];\n};\n\n/**\n * Creates SQL expression for filtering by run start time\n */\nconst createStartTimeExpression = ({ startTime }: ExperimentPageSearchFacetsState, referenceTime: number) => {\n  const offset = START_TIME_COLUMN_OFFSET[startTime as keyof typeof START_TIME_COLUMN_OFFSET];\n  if (!startTime || !offset || startTime === 'ALL') {\n    return null;\n  }\n  const startTimeOffset = referenceTime - offset;\n\n  return `attributes.start_time >= ${startTimeOffset}`;\n};\n\n/**\n * Creates SQL expression for filtering by selected datasets\n */\nconst createDatasetsFilterExpression = ({ datasetsFilter }: ExperimentPageSearchFacetsState) => {\n  if (datasetsFilter.length === 0) {\n    return null;\n  }\n  const datasetNames = datasetsFilter.map((dataset) => `'${dataset.name}'`).join(',');\n  const datasetDigests = datasetsFilter.map((dataset) => `'${dataset.digest}'`).join(',');\n\n  return `dataset.name IN (${datasetNames}) AND dataset.digest IN (${datasetDigests})`;\n};\n\n/**\n * Combines search filter and start time SQL expressions\n */\nconst createFilterExpression = (\n  { searchFilter }: ExperimentPageSearchFacetsState,\n  startTimeExpression: string | null,\n  datasetsFilterExpression: string | null,\n) => {\n  const activeFilters = [];\n  if (searchFilter) activeFilters.push(searchFilter);\n  if (startTimeExpression) activeFilters.push(startTimeExpression);\n  if (datasetsFilterExpression) activeFilters.push(datasetsFilterExpression);\n\n  if (activeFilters.length === 0) return undefined;\n  return activeFilters.join(' and ');\n};\n\n/**\n * If this function returns true, the ExperimentView should nest children underneath their parents\n * and fetch all root level parents of visible runs. If this function returns false, the views will\n * not nest children or fetch any additional parents. Will always return true if the orderByKey is\n * 'attributes.start_time'\n */\nconst shouldNestChildrenAndFetchParents = ({ orderByKey, searchFilter }: ExperimentPageSearchFacetsState) =>\n  (!orderByKey && !searchFilter) || orderByKey === ATTRIBUTE_COLUMN_SORT_KEY.DATE;\n\n/**\n *\n * Function creates API-compatible query object basing on the given criteria.\n * @param experimentIds IDs of experiments to be queries for runs\n * @param searchFacetsState the sort/filter model to use\n * @param referenceTime reference time to calculate startTime filter\n * @param pageToken next page token if fetching the next page\n */\nexport const createSearchRunsParams = (\n  experimentIds: string[],\n  searchFacetsState: ExperimentPageSearchFacetsState & { runsPinned: string[] },\n  referenceTime: number,\n  pageToken?: string,\n  maxResults?: number,\n) => {\n  const runViewType =\n    searchFacetsState.lifecycleFilter === LIFECYCLE_FILTER.ACTIVE ? ViewType.ACTIVE_ONLY : ViewType.DELETED_ONLY;\n\n  const { runsPinned = undefined } = searchFacetsState;\n\n  const orderBy = createOrderByExpression(searchFacetsState);\n  const startTimeExpression = createStartTimeExpression(searchFacetsState, referenceTime);\n  const datasetsFilterExpression = createDatasetsFilterExpression(searchFacetsState);\n  const filter = createFilterExpression(searchFacetsState, startTimeExpression, datasetsFilterExpression);\n  const shouldFetchParents = shouldNestChildrenAndFetchParents(searchFacetsState);\n\n  return {\n    // Experiment IDs\n    experimentIds,\n\n    // Filters and sort options\n    filter,\n    runViewType,\n    orderBy,\n    shouldFetchParents,\n\n    // Next page token for loading more runs\n    pageToken,\n    runsPinned,\n\n    maxResults: maxResults || RUNS_SEARCH_MAX_RESULTS,\n  };\n};\n/**\n * Function checks if given runs set contain info about log model history and if true,\n * fetches model versions for them\n *\n * @param runsPayload runs payload returned from the searchRuns API\n * @param actionCreator redux-thunk action creator that for search model versions action\n * @param dispatch redux-compatible dispatch function\n */\nexport const fetchModelVersionsForRuns = (\n  runsPayload: {\n    info: {\n      run_id: string;\n    };\n    data: {\n      tags: KeyValueEntity[];\n    };\n  }[],\n  actionCreator: typeof searchModelVersionsApi,\n  dispatch: ThunkDispatch,\n) => {\n  const runsWithLogModelHistory = runsPayload.filter((run) =>\n    run.data.tags.some((t) => t.key === EXPERIMENT_LOG_MODEL_HISTORY_TAG),\n  );\n\n  chunk(runsWithLogModelHistory, MAX_RUNS_IN_SEARCH_MODEL_VERSIONS_FILTER).forEach((runsChunk) => {\n    // eslint-disable-next-line prefer-const\n    let maxResults = undefined;\n    const action = actionCreator(\n      {\n        run_id: runsChunk.map((run) => run.info.run_id),\n      },\n      getUUID(),\n      maxResults,\n    );\n    dispatch(action);\n  });\n};\n\n/**\n * Function consumes a search state facets object and returns `true`\n * if at least one filter-related facet is not-default meaning that runs\n * are currently filtered.\n */\nexport const isSearchFacetsFilterUsed = (currentSearchFacetsState: ExperimentPageSearchFacetsState) => {\n  const { lifecycleFilter, modelVersionFilter, datasetsFilter, searchFilter, startTime } = currentSearchFacetsState;\n  return Boolean(\n    lifecycleFilter !== DEFAULT_LIFECYCLE_FILTER ||\n      modelVersionFilter !== DEFAULT_MODEL_VERSION_FILTER ||\n      datasetsFilter.length !== 0 ||\n      searchFilter ||\n      startTime !== DEFAULT_START_TIME,\n  );\n};\n","import { SortAscendingIcon, SortDescendingIcon, useDesignSystemTheme } from '@databricks/design-system';\nimport { useUpdateExperimentPageSearchFacets } from '../../../hooks/useExperimentPageSearchFacets';\n\nexport interface ColumnHeaderCellProps {\n  enableSorting: boolean;\n  displayName: string;\n  canonicalSortKey: string;\n  context: {\n    orderByKey: string;\n    orderByAsc: boolean;\n  };\n}\n\nexport const ColumnHeaderCell = ({\n  enableSorting,\n  canonicalSortKey,\n  displayName,\n  context: tableContext,\n}: ColumnHeaderCellProps) => {\n  const { orderByKey, orderByAsc } = tableContext || {};\n  const updateSearchFacets = useUpdateExperimentPageSearchFacets();\n\n  const handleSortBy = () => {\n    let newOrderByAsc = !orderByAsc;\n\n    // If the new sortKey is not equal to the previous sortKey, reset the orderByAsc\n    if (canonicalSortKey !== orderByKey) {\n      newOrderByAsc = false;\n    }\n    updateSearchFacets({ orderByKey: canonicalSortKey, orderByAsc: newOrderByAsc });\n  };\n\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <div\n      role=\"columnheader\"\n      css={{\n        height: '100%',\n        width: '100%',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'space-between',\n        padding: '0 12px',\n        gap: theme.spacing.sm,\n        svg: {\n          color: theme.colors.textSecondary,\n        },\n        '&:hover': {\n          color: enableSorting ? theme.colors.actionTertiaryTextHover : 'unset',\n          svg: {\n            color: theme.colors.actionTertiaryTextHover,\n          },\n        },\n      }}\n      className={canonicalSortKey === orderByKey ? 'is-ordered-by' : ''}\n      onClick={enableSorting ? () => handleSortBy() : undefined}\n    >\n      <span data-test-id={`sort-header-${displayName}`}>{displayName}</span>\n      {enableSorting && canonicalSortKey === orderByKey ? (\n        orderByAsc ? (\n          <SortAscendingIcon />\n        ) : (\n          <SortDescendingIcon />\n        )\n      ) : null}\n    </div>\n  );\n};\n","import { Theme } from '@emotion/react';\nimport React from 'react';\nimport Utils from '../../../../../../common/utils/Utils';\nimport { RunRowDateAndNestInfo } from '../../../utils/experimentPage.row-types';\nimport { RunStatusIcon } from '../../../../RunStatusIcon';\n\nexport interface DateCellRendererProps {\n  value: RunRowDateAndNestInfo;\n}\n\nexport const DateCellRenderer = React.memo(({ value }: DateCellRendererProps) => {\n  const { startTime, referenceTime, runStatus } = value || {};\n  if (!startTime) {\n    return <>-</>;\n  }\n  return (\n    <span css={styles.cellWrapper} title={Utils.formatTimestamp(startTime)}>\n      <RunStatusIcon status={runStatus} />\n      {Utils.timeSinceStr(startTime, referenceTime)}\n    </span>\n  );\n});\n\nconst styles = {\n  cellWrapper: (theme: Theme) => ({\n    display: 'flex',\n    alignItems: 'center',\n    gap: theme.spacing.sm,\n  }),\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React, { useState } from 'react';\nimport { Button } from '@databricks/design-system';\n\ntype Props = {\n  text: string;\n  maxSize: number;\n  className?: string;\n  allowShowMore?: boolean;\n  dataTestId?: string;\n};\n\nexport const TrimmedText = ({ text, maxSize, className, allowShowMore = false, dataTestId }: Props) => {\n  if (text.length <= maxSize) {\n    return (\n      <span className={className} data-testid={dataTestId}>\n        {text}\n      </span>\n    );\n  }\n  const trimmedText = `${text.substr(0, maxSize)}...`;\n  // Reported during ESLint upgrade\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const [showMore, setShowMore] = useState(false);\n  return (\n    <span className={className} data-testid={dataTestId}>\n      {showMore ? text : trimmedText}\n      {allowShowMore && (\n        <Button\n          componentId=\"codegen_mlflow_app_src_common_components_trimmedtext.tsx_30\"\n          type=\"link\"\n          onClick={() => setShowMore(!showMore)}\n          size=\"small\"\n          css={styles.expandButton}\n          data-test-id=\"trimmed-text-button\"\n        >\n          {showMore ? 'collapse' : 'expand'}\n        </Button>\n      )}\n    </span>\n  );\n};\n\nconst styles = {\n  expandButton: {\n    display: 'inline-block',\n  },\n};\n","import React from 'react';\nimport { LegacyTooltip } from '@databricks/design-system';\nimport Utils from '../../../../../../common/utils/Utils';\nimport { RunRowType } from '../../../utils/experimentPage.row-types';\nimport { TrimmedText } from '../../../../../../common/components/TrimmedText';\n\nexport const RunDescriptionCellRenderer = React.memo(({ value }: { value: RunRowType['tags'] }) => {\n  const description = Utils.getRunDescriptionFromTags(value) || '-';\n  return (\n    <>\n      <LegacyTooltip title={description}>\n        <span>\n          <TrimmedText text={description} maxSize={50} />\n        </span>\n      </LegacyTooltip>\n    </>\n  );\n});\n","import React from 'react';\nimport { Link } from '../../../../../../common/utils/RoutingUtils';\nimport Routes from '../../../../../routes';\nimport { RunRowType } from '../../../utils/experimentPage.row-types';\n\nexport interface ExperimentNameCellRendererProps {\n  value: {\n    name: string;\n    basename: string;\n  };\n  data: RunRowType;\n}\n\nexport const ExperimentNameCellRenderer = React.memo(({ data, value }: ExperimentNameCellRendererProps) =>\n  !data.experimentId ? null : (\n    <Link to={Routes.getExperimentPageRoute(data.experimentId)} title={value.name}>\n      {value.basename}\n    </Link>\n  ),\n);\n","import React from 'react';\nimport { ModelsIcon, Overflow, Tag, LegacyTooltip, useDesignSystemTheme } from '@databricks/design-system';\nimport Utils from '../../../../../../common/utils/Utils';\nimport { ModelRegistryRoutes } from '../../../../../../model-registry/routes';\nimport Routes from '../../../../../routes';\nimport { RunRowModelsInfo } from '../../../utils/experimentPage.row-types';\nimport { Link } from '../../../../../../common/utils/RoutingUtils';\nimport { ReactComponent as RegisteredModelOkIcon } from '../../../../../../common/static/registered-model-grey-ok.svg';\nimport { FormattedMessage } from 'react-intl';\n\nconst EMPTY_CELL_PLACEHOLDER = '-';\n\nexport interface ModelsCellRendererProps {\n  value: RunRowModelsInfo;\n}\n\n/**\n * Backfill Typescript type for the value returned from Utils.mergeLoggedAndRegisteredModels\n */\ninterface CombinedModelType {\n  registeredModelName?: string;\n  isUc?: string;\n  registeredModelVersion?: string;\n  artifactPath?: string;\n  flavors?: string[];\n}\n\n/**\n * Icon, label and link for a single model\n */\nconst ModelLink = ({\n  model: { isUc, registeredModelName, registeredModelVersion, flavors, artifactPath } = {},\n  experimentId,\n  runUuid,\n}: {\n  model?: CombinedModelType;\n  experimentId: string;\n  runUuid: string;\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  // Renders a model name based on whether it's a registered model or not\n  const renderModelName = () => {\n    const displayFullName = `${registeredModelName} v${registeredModelVersion}`;\n    if (registeredModelName) {\n      return (\n        <LegacyTooltip title={displayFullName} placement=\"topLeft\">\n          <span css={{ verticalAlign: 'middle' }}>{registeredModelName}</span>{' '}\n          <Tag css={{ marginRight: 0, verticalAlign: 'middle' }}>v{registeredModelVersion}</Tag>\n        </LegacyTooltip>\n      );\n    }\n\n    const firstFlavorName = flavors?.[0];\n\n    return (\n      firstFlavorName || (\n        <FormattedMessage\n          defaultMessage=\"Model\"\n          description=\"Experiment page > runs table > models column > default label for no specific model\"\n        />\n      )\n    );\n  };\n\n  // Renders a link to either the model registry or the run artifacts page\n  const renderModelLink = () => {\n    if (registeredModelName && registeredModelVersion) {\n      return ModelRegistryRoutes.getModelVersionPageRoute(registeredModelName, registeredModelVersion);\n    }\n    return Routes.getRunPageRoute(experimentId, runUuid, artifactPath);\n  };\n\n  // Renders an icon based on whether it's a registered model or not\n  const renderModelIcon = () => {\n    if (registeredModelName) {\n      return <RegisteredModelOkIcon css={{ color: theme.colors.actionPrimaryBackgroundDefault }} />;\n    }\n    return <ModelsIcon css={{ color: theme.colors.actionPrimaryBackgroundDefault }} />;\n  };\n\n  return (\n    <div css={{ display: 'flex', alignItems: 'center', gap: theme.spacing.xs, overflow: 'hidden' }}>\n      <div css={{ width: 20, display: 'flex', alignItems: 'center', justifyContent: 'flex-start', flexShrink: 0 }}>\n        {renderModelIcon()}\n      </div>\n      <Link\n        to={renderModelLink()}\n        target=\"_blank\"\n        css={{ textOverflow: 'ellipsis', overflow: 'hidden', cursor: 'pointer' }}\n      >\n        {renderModelName()}\n      </Link>\n    </div>\n  );\n};\n\nexport const ModelsCellRenderer = React.memo((props: ModelsCellRendererProps) => {\n  if (!props.value) {\n    return <>{EMPTY_CELL_PLACEHOLDER}</>;\n  }\n  const { registeredModels, loggedModels, experimentId, runUuid } = props.value;\n  const models: CombinedModelType[] = Utils.mergeLoggedAndRegisteredModels(loggedModels, registeredModels) as any[];\n\n  if (models && models.length) {\n    return (\n      // <Overflow /> component does not ideally fit within ag-grid cell so we need to override its styles a bit\n      <div css={{ width: '100%', '&>div': { maxWidth: '100%', display: 'flex' } }}>\n        <Overflow>\n          {models.map((model, index) => (\n            <ModelLink model={model} key={model.artifactPath || index} experimentId={experimentId} runUuid={runUuid} />\n          ))}\n        </Overflow>\n      </div>\n    );\n  }\n  return <>{EMPTY_CELL_PLACEHOLDER}</>;\n});\n","import React from 'react';\nimport { SortAscendingIcon, SortDescendingIcon, LegacyTooltip, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport { ATTRIBUTE_COLUMN_LABELS } from '../../../../../constants';\n\nexport const ModelsHeaderCellRenderer = React.memo(() => {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <div\n      role=\"columnheader\"\n      css={{\n        height: '100%',\n        width: '100%',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'space-between',\n        padding: '0 12px',\n        gap: theme.spacing.sm,\n      }}\n    >\n      <LegacyTooltip\n        title={\n          <FormattedMessage\n            defaultMessage=\"Click into an individual run to see all models associated with it\"\n            description='MLflow experiment detail page > runs table > tooltip on ML \"Models\" column header'\n          />\n        }\n      >\n        {ATTRIBUTE_COLUMN_LABELS.MODELS}\n      </LegacyTooltip>\n    </div>\n  );\n});\n","import React from 'react';\nimport Utils from '../../../../../../common/utils/Utils';\nimport { RunRowVersionInfo } from '../../../utils/experimentPage.row-types';\n\nexport const VersionCellRenderer = React.memo(({ value }: { value?: RunRowVersionInfo }) => {\n  if (!value) {\n    return <>-</>;\n  }\n  const {\n    // Run row version object parameters\n    version,\n    name,\n    type,\n  } = value;\n\n  return (\n    Utils.renderSourceVersion(\n      // Using function from utils to render the source link\n      version,\n      name,\n      type,\n    ) || <>-</>\n  );\n});\n","var _path, _circle;\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nimport * as React from \"react\";\nfunction SvgIconVisibleFill(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 16,\n    height: 16,\n    viewBox: \"0 0 16 16\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M8 3C3.45 3 1.4375 6.33333 1 8C1.4375 9.66667 3.45 13 8 13C12.55 13 14.5625 9.66667 15 8C14.5625 6.33333 12.55 3 8 3Z\",\n    fill: \"currentColor\",\n    stroke: \"currentColor\"\n  })), _circle || (_circle = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 8,\n    cy: 8,\n    r: 2.25,\n    fill: \"currentColor\",\n    stroke: \"white\",\n    strokeWidth: 1.5\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgIconVisibleFill);\nexport default __webpack_public_path__ + \"static/media/icon-visible-fill.8d34cd35303828fdfc15154f5536e63b.svg\";\nexport { ForwardRef as ReactComponent };","import {\n  Icon,\n  LegacyTooltip,\n  VisibleIcon as VisibleHollowIcon,\n  VisibleOffIcon,\n  useDesignSystemTheme,\n  visuallyHidden,\n} from '@databricks/design-system';\nimport { RUNS_VISIBILITY_MODE } from '../../../models/ExperimentPageUIState';\nimport { shouldUseNewRunRowsVisibilityModel } from '../../../../../../common/utils/FeatureUtils';\nimport { ReactComponent as VisibleFillIcon } from '../../../../../../common/static/icon-visible-fill.svg';\nimport { Theme } from '@emotion/react';\n\nconst VisibleIcon = () =>\n  shouldUseNewRunRowsVisibilityModel() ? <Icon component={VisibleFillIcon} /> : <VisibleHollowIcon />;\n\ninterface RunVisibilityControlButtonProps {\n  className?: string;\n  runUuid: string;\n  rowHidden: boolean;\n  buttonHidden: boolean;\n  disabled: boolean;\n  onClick: (runUuidOrToggle: string | RUNS_VISIBILITY_MODE, runUuid?: string) => void;\n  label: React.ReactNode;\n}\n\n// Mouse enter/leave delays passed to tooltips are set to 0 so swift toggling/pinning runs is not hampered\nconst MOUSE_DELAYS = { mouseEnterDelay: 0, mouseLeaveDelay: 0 };\n\nexport const RunVisibilityControlButton = ({\n  runUuid,\n  className,\n  rowHidden,\n  buttonHidden,\n  disabled,\n  onClick,\n  label,\n}: RunVisibilityControlButtonProps) => {\n  const { theme } = useDesignSystemTheme();\n  if (buttonHidden) {\n    return <div className={className} css={[styles.button(theme)]} />;\n  }\n  if (disabled) {\n    return (\n      <VisibleOffIcon\n        className={className}\n        css={[\n          styles.button(theme),\n          {\n            opacity: 0.25,\n            color: theme.colors.grey400,\n          },\n        ]}\n      />\n    );\n  }\n  return (\n    <LegacyTooltip dangerouslySetAntdProps={MOUSE_DELAYS} placement=\"right\" title={label}>\n      <label className={className} css={styles.button(theme)}>\n        <span css={visuallyHidden}>{label}</span>\n        <input\n          type=\"checkbox\"\n          className=\"is-visibility-toggle-checkbox\"\n          checked={!rowHidden}\n          onChange={() => {\n            if (runUuid) {\n              if (shouldUseNewRunRowsVisibilityModel()) {\n                onClick(RUNS_VISIBILITY_MODE.CUSTOM, runUuid);\n              } else {\n                onClick(runUuid);\n              }\n            }\n          }}\n        />\n        {!rowHidden ? <VisibleIcon /> : <VisibleOffIcon />}\n      </label>\n    </LegacyTooltip>\n  );\n};\n\nconst styles = {\n  button: (theme: Theme) => ({\n    width: theme.general.iconFontSize,\n    color: theme.colors.grey400,\n    '.ag-row:hover &': {\n      color: theme.colors.grey500,\n    },\n  }),\n};\n","import React, { useMemo } from 'react';\nimport { RUNS_VISIBILITY_MODE } from '../../models/ExperimentPageUIState';\n\nconst ExperimentViewRunsTableHeaderContext = React.createContext({\n  runsHiddenMode: RUNS_VISIBILITY_MODE.FIRST_10_RUNS,\n  useGroupedValuesInCharts: true,\n});\n\n/**\n * A tiny context that passes the current runs hidden mode to the header cell renderer.\n *\n * This is needed because ag-grid context is unreliable and does not always update when the\n * runs hidden mode changes. The solution below is way more performant than recreating column definitions\n * based on a new value.\n */\nexport const ExperimentViewRunsTableHeaderContextProvider = ({\n  children,\n  runsHiddenMode,\n  useGroupedValuesInCharts,\n}: {\n  children: React.ReactNode;\n  runsHiddenMode: RUNS_VISIBILITY_MODE;\n  useGroupedValuesInCharts?: boolean;\n}) => {\n  const contextValue = useMemo(\n    () => ({ runsHiddenMode, useGroupedValuesInCharts: useGroupedValuesInCharts ?? true }),\n    [runsHiddenMode, useGroupedValuesInCharts],\n  );\n  return (\n    <ExperimentViewRunsTableHeaderContext.Provider value={contextValue}>\n      {children}\n    </ExperimentViewRunsTableHeaderContext.Provider>\n  );\n};\n\nexport const useExperimentViewRunsTableHeaderContext = () => React.useContext(ExperimentViewRunsTableHeaderContext);\n","import {\n  PinIcon,\n  PinFillIcon,\n  LegacyTooltip,\n  VisibleIcon as VisibleHollowIcon,\n  VisibleOffIcon,\n  useDesignSystemTheme,\n  Icon,\n  visuallyHidden,\n} from '@databricks/design-system';\nimport type { SuppressKeyboardEventParams } from '@ag-grid-community/core';\n\n// TODO: Import this icon from design system when added\nimport { ReactComponent as VisibleFillIcon } from '../../../../../../common/static/icon-visible-fill.svg';\nimport { Theme } from '@emotion/react';\nimport React, { useMemo } from 'react';\nimport { FormattedMessage, defineMessages } from 'react-intl';\nimport { RunRowType, RunRowVisibilityControl } from '../../../utils/experimentPage.row-types';\nimport {\n  shouldEnableToggleIndividualRunsInGroups,\n  shouldUseNewRunRowsVisibilityModel,\n} from '../../../../../../common/utils/FeatureUtils';\nimport { useUpdateExperimentViewUIState } from '../../../contexts/ExperimentPageUIStateContext';\nimport { RUNS_VISIBILITY_MODE } from '../../../models/ExperimentPageUIState';\nimport { isRemainingRunsGroup } from '../../../utils/experimentPage.group-row-utils';\nimport { RunVisibilityControlButton } from './RunVisibilityControlButton';\nimport { useExperimentViewRunsTableHeaderContext } from '../ExperimentViewRunsTableHeaderContext';\n\nconst labels = {\n  visibility: {\n    groups: defineMessages({\n      unhide: {\n        defaultMessage: 'Unhide group',\n        description: 'A tooltip for the visibility icon button in the runs table next to the hidden run group',\n      },\n      hide: {\n        defaultMessage: 'Hide group',\n        description: 'A tooltip for the visibility icon button in the runs table next to the visible run group',\n      },\n    }),\n    runs: defineMessages({\n      unhide: {\n        defaultMessage: 'Unhide run',\n        description: 'A tooltip for the visibility icon button in the runs table next to the hidden run',\n      },\n      hide: {\n        defaultMessage: 'Hide run',\n        description: 'A tooltip for the visibility icon button in the runs table next to the visible run',\n      },\n    }),\n  },\n  pinning: {\n    groups: defineMessages({\n      unpin: {\n        defaultMessage: 'Unpin group',\n        description: 'A tooltip for the pin icon button in the runs table next to the pinned run group',\n      },\n      pin: {\n        defaultMessage: 'Pin group',\n        description: 'A tooltip for the pin icon button in the runs table next to the not pinned run group',\n      },\n    }),\n    runs: defineMessages({\n      unpin: {\n        defaultMessage: 'Unpin run',\n        description: 'A tooltip for the pin icon button in the runs table next to the pinned run',\n      },\n      pin: {\n        defaultMessage: 'Pin run',\n        description: 'A tooltip for the pin icon button in the runs table next to the not pinned run',\n      },\n    }),\n  },\n};\n\n// Mouse enter/leave delays passed to tooltips are set to 0 so swift toggling/pinning runs is not hampered\nconst MOUSE_DELAYS = { mouseEnterDelay: 0, mouseLeaveDelay: 0 };\n\nexport const RowActionsCellRenderer = React.memo(\n  (props: {\n    data: RunRowType;\n    value: { pinned: boolean; hidden: boolean };\n    onTogglePin: (runUuid: string) => void;\n    onToggleVisibility: (runUuidOrToggle: string | RUNS_VISIBILITY_MODE, runUuid?: string) => void;\n  }) => {\n    const updateUIState = useUpdateExperimentViewUIState();\n    const { theme } = useDesignSystemTheme();\n    const { useGroupedValuesInCharts } = useExperimentViewRunsTableHeaderContext();\n\n    const { groupParentInfo, runDateAndNestInfo, visibilityControl } = props.data;\n    const { belongsToGroup } = runDateAndNestInfo || {};\n    const isGroupRow = Boolean(groupParentInfo);\n    const isVisibilityButtonDisabled =\n      shouldEnableToggleIndividualRunsInGroups() && visibilityControl === RunRowVisibilityControl.Disabled;\n    const { pinned, hidden } = props.value;\n    const { runUuid, rowUuid } = props.data;\n\n    // If a row is a run group, we use its rowUuid for setting visibility.\n    // If this is a run, use runUuid.\n    const runUuidToToggle = groupParentInfo ? rowUuid : runUuid;\n\n    const isRowHidden = (() => {\n      // If \"Use grouping from the runs table in charts\" option is off and we're displaying a group,\n      // we should check if all runs in the group are hidden in order to determine visibility toggle.\n      if (shouldEnableToggleIndividualRunsInGroups() && useGroupedValuesInCharts === false && groupParentInfo) {\n        return Boolean(groupParentInfo.allRunsHidden);\n      }\n\n      // Otherwise, we should use the hidden flag from the row itself.\n      return hidden;\n    })();\n\n    const visibilityMessageDescriptor = isGroupRow\n      ? isRowHidden\n        ? labels.visibility.groups.unhide\n        : labels.visibility.groups.hide\n      : isRowHidden\n      ? labels.visibility.runs.unhide\n      : labels.visibility.runs.hide;\n\n    const pinningMessageDescriptor = isGroupRow\n      ? pinned\n        ? labels.pinning.groups.unpin\n        : labels.pinning.groups.pin\n      : pinned\n      ? labels.pinning.runs.unpin\n      : labels.pinning.runs.pin;\n\n    const isVisibilityButtonHidden = useMemo(() => {\n      if (shouldEnableToggleIndividualRunsInGroups()) {\n        return visibilityControl === RunRowVisibilityControl.Hidden;\n      }\n      return !(\n        !shouldUseNewRunRowsVisibilityModel() ||\n        (groupParentInfo && !isRemainingRunsGroup(groupParentInfo)) ||\n        (Boolean(runUuid) && !belongsToGroup)\n      );\n    }, [groupParentInfo, belongsToGroup, runUuid, visibilityControl]);\n\n    return (\n      <div css={styles.actionsContainer}>\n        <RunVisibilityControlButton\n          rowHidden={isRowHidden}\n          buttonHidden={isVisibilityButtonHidden}\n          disabled={isVisibilityButtonDisabled}\n          label={<FormattedMessage {...visibilityMessageDescriptor} />}\n          onClick={props.onToggleVisibility}\n          runUuid={runUuidToToggle}\n          css={[\n            styles.actionCheckbox(theme),\n            // We show this button only in the runs compare mode and only when the feature flag is set\n            shouldUseNewRunRowsVisibilityModel() && styles.showOnlyInCompareMode,\n          ]}\n        />\n        {((props.data.pinnable && runUuid) || groupParentInfo) && (\n          <LegacyTooltip\n            dangerouslySetAntdProps={MOUSE_DELAYS}\n            placement=\"right\"\n            // We have to force remount of the tooltip with every rerender, otherwise it will jump\n            // around when the row order changes.\n            key={Math.random()}\n            title={<FormattedMessage {...pinningMessageDescriptor} />}\n          >\n            <label css={styles.actionCheckbox(theme)} className=\"is-pin-toggle\" data-testid=\"column-pin-toggle\">\n              <span css={visuallyHidden}>\n                <FormattedMessage {...pinningMessageDescriptor} />\n              </span>\n              <input\n                type=\"checkbox\"\n                checked={pinned}\n                onChange={() => {\n                  const uuidToPin = groupParentInfo ? props.data.rowUuid : runUuid;\n                  updateUIState((existingState) => {\n                    if (uuidToPin) {\n                      return {\n                        ...existingState,\n                        runsPinned: !existingState.runsPinned.includes(uuidToPin)\n                          ? [...existingState.runsPinned, uuidToPin]\n                          : existingState.runsPinned.filter((r) => r !== uuidToPin),\n                      };\n                    }\n                    return existingState;\n                  });\n                }}\n              />\n              {pinned ? <PinFillIcon /> : <PinIcon />}\n            </label>\n          </LegacyTooltip>\n        )}\n      </div>\n    );\n  },\n  (prevProps, nextProps) =>\n    prevProps.value.hidden === nextProps.value.hidden &&\n    prevProps.value.pinned === nextProps.value.pinned &&\n    prevProps.data.visibilityControl === nextProps.data.visibilityControl &&\n    prevProps.data.groupParentInfo?.allRunsHidden === nextProps.data.groupParentInfo?.allRunsHidden,\n);\n\n/**\n * A utility function that enables custom keyboard navigation for the row actions cell renderer by providing\n * conditional suppression of default events.\n */\nexport const RowActionsCellRendererSuppressKeyboardEvents = ({ event }: SuppressKeyboardEventParams) => {\n  if (\n    event.key === 'Tab' &&\n    event.target instanceof HTMLElement &&\n    // Let's suppress the default action if the focus is on cell or on visibility toggle checkbox, allowing\n    // tab to move to the next focusable element.\n    (event.target.classList.contains('ag-cell') || event.target.classList.contains('is-visibility-toggle-checkbox'))\n  ) {\n    return true;\n  }\n  return false;\n};\n\nconst styles = {\n  actionsContainer: {\n    display: 'flex',\n    gap: 18, // In design there's 20 px of gutter, it's minus 2 px due to pin icon's internal padding\n  },\n  showOnlyInCompareMode: {\n    display: 'none',\n    '.is-table-comparing-runs-mode &': {\n      display: 'flex',\n    },\n  },\n  actionCheckbox: (theme: Theme) => ({\n    input: { width: 0, appearance: 'none' as const },\n    cursor: 'pointer',\n    display: 'flex',\n    svg: {\n      width: theme.general.iconFontSize,\n      height: theme.general.iconFontSize,\n      cursor: 'pointer',\n    },\n    // Styling for the pin button - it's transparent when unpinned and not hovered\n    '&.is-pin-toggle svg': {\n      color: 'transparent',\n      '.ag-row:hover &': {\n        color: theme.colors.grey500,\n      },\n    },\n    '& input:checked + span svg': {\n      color: theme.colors.grey500,\n    },\n    '& input:focus-visible + span svg': {\n      color: theme.colors.grey500,\n    },\n  }),\n};\n","import {\n  DropdownMenu,\n  Icon,\n  VisibleIcon as VisibleHollowIcon,\n  VisibleOffIcon,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { Theme } from '@emotion/react';\nimport React, { useEffect } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { RUNS_VISIBILITY_MODE } from '@mlflow/mlflow/src/experiment-tracking/components/experiment-page/models/ExperimentPageUIState';\nimport { shouldUseNewRunRowsVisibilityModel } from '../../../../../../common/utils/FeatureUtils';\n// TODO: Import this icon from design system when added\nimport { ReactComponent as VisibleFillIcon } from '../../../../../../common/static/icon-visible-fill.svg';\nimport { useExperimentViewRunsTableHeaderContext } from '../ExperimentViewRunsTableHeaderContext';\n\nconst VisibleIcon = () =>\n  shouldUseNewRunRowsVisibilityModel() ? <Icon component={VisibleFillIcon} /> : <VisibleHollowIcon />;\n\nexport const RowActionsHeaderCellRendererV2 = React.memo(\n  ({\n    allRunsHidden,\n    onToggleVisibility,\n  }: {\n    allRunsHidden?: boolean;\n    onToggleVisibility: (mode: RUNS_VISIBILITY_MODE | string, runOrGroupUuid?: string) => void;\n  }) => {\n    const { theme } = useDesignSystemTheme();\n    const intl = useIntl();\n    const { runsHiddenMode } = useExperimentViewRunsTableHeaderContext();\n\n    return (\n      <DropdownMenu.Root modal={false}>\n        <DropdownMenu.Trigger asChild>\n          <button\n            css={[\n              styles.actionButton(theme),\n              // We show this button only in the runs compare mode and only when the feature flag is set\n              shouldUseNewRunRowsVisibilityModel() && styles.showOnlyInCompareMode,\n            ]}\n            data-testid=\"experiment-view-runs-visibility-column-header\"\n            aria-label={intl.formatMessage({\n              defaultMessage: 'Toggle visibility of runs',\n              description: 'Experiment page > runs table > toggle visibility of runs > accessible label',\n            })}\n          >\n            {runsHiddenMode === RUNS_VISIBILITY_MODE.HIDEALL || allRunsHidden ? <VisibleOffIcon /> : <VisibleIcon />}\n          </button>\n        </DropdownMenu.Trigger>\n\n        <DropdownMenu.Content>\n          <DropdownMenu.RadioGroup value={runsHiddenMode} onValueChange={(e) => onToggleVisibility(e)}>\n            <DropdownMenu.RadioItem value={RUNS_VISIBILITY_MODE.FIRST_10_RUNS}>\n              <DropdownMenu.ItemIndicator />\n              <FormattedMessage\n                defaultMessage=\"Show first 10\"\n                description=\"Menu option for showing only 10 first runs in the experiment view runs compare mode\"\n              />\n            </DropdownMenu.RadioItem>\n            <DropdownMenu.RadioItem value={RUNS_VISIBILITY_MODE.FIRST_20_RUNS}>\n              <DropdownMenu.ItemIndicator />\n              <FormattedMessage\n                defaultMessage=\"Show first 20\"\n                description=\"Menu option for showing only 10 first runs in the experiment view runs compare mode\"\n              />\n            </DropdownMenu.RadioItem>\n            <DropdownMenu.RadioItem value={RUNS_VISIBILITY_MODE.SHOWALL}>\n              <DropdownMenu.ItemIndicator />\n              <FormattedMessage\n                defaultMessage=\"Show all runs\"\n                description=\"Menu option for revealing all hidden runs in the experiment view runs compare mode\"\n              />\n            </DropdownMenu.RadioItem>\n            <DropdownMenu.RadioItem value={RUNS_VISIBILITY_MODE.HIDEALL}>\n              <DropdownMenu.ItemIndicator />\n              <FormattedMessage\n                defaultMessage=\"Hide all runs\"\n                description=\"Menu option for revealing all hidden runs in the experiment view runs compare mode\"\n              />\n            </DropdownMenu.RadioItem>\n          </DropdownMenu.RadioGroup>\n        </DropdownMenu.Content>\n      </DropdownMenu.Root>\n    );\n  },\n);\n\n/**\n * A component used to render \"eye\" icon in the table header used to hide/show all runs\n */\nexport const RowActionsHeaderCellRenderer = React.memo(\n  (props: {\n    allRunsHidden?: boolean;\n    onToggleVisibility: (runUuidOrToggle: string) => void;\n    eGridHeader?: HTMLElement;\n  }) => {\n    const intl = useIntl();\n\n    // Since ag-grid does not add accessible labels to its checkboxes, we do it manually.\n    // This is executed once per table lifetime.\n    useEffect(() => {\n      // Find a checkbox in the header\n      const selectAllCheckbox = props.eGridHeader?.querySelector('input');\n\n      // If found, assign aria-label attribute\n      if (selectAllCheckbox) {\n        selectAllCheckbox.ariaLabel = intl.formatMessage({\n          defaultMessage: 'Select all runs',\n          description: 'Experiment page > runs table > select all rows > accessible label',\n        });\n      }\n    }, [props.eGridHeader, intl]);\n\n    return shouldUseNewRunRowsVisibilityModel() ? (\n      <RowActionsHeaderCellRendererV2 {...props} />\n    ) : (\n      <DropdownMenu.Root modal={false}>\n        <DropdownMenu.Trigger asChild>\n          <button css={[styles.actionButton]} data-testid=\"experiment-view-runs-visibility-column-header\">\n            {props.allRunsHidden ? <VisibleOffIcon /> : <VisibleIcon />}\n          </button>\n        </DropdownMenu.Trigger>\n\n        <DropdownMenu.Content>\n          <DropdownMenu.Item\n            onClick={() => props.onToggleVisibility(RUNS_VISIBILITY_MODE.HIDEALL)}\n            data-testid=\"experiment-view-runs-visibility-hide-all\"\n          >\n            <DropdownMenu.IconWrapper>\n              <VisibleOffIcon />\n            </DropdownMenu.IconWrapper>\n            <FormattedMessage\n              defaultMessage=\"Hide all runs\"\n              description=\"Menu option for hiding all runs in the experiment view runs compare mode\"\n            />\n          </DropdownMenu.Item>\n          <DropdownMenu.Item\n            onClick={() => props.onToggleVisibility(RUNS_VISIBILITY_MODE.SHOWALL)}\n            data-testid=\"experiment-view-runs-visibility-show-all\"\n          >\n            <DropdownMenu.IconWrapper>\n              <VisibleIcon />\n            </DropdownMenu.IconWrapper>\n            <FormattedMessage\n              defaultMessage=\"Show all runs\"\n              description=\"Menu option for revealing all hidden runs in the experiment view runs compare mode\"\n            />\n          </DropdownMenu.Item>\n        </DropdownMenu.Content>\n\n        {/*  */}\n      </DropdownMenu.Root>\n    );\n  },\n);\n\nconst styles = {\n  actionButton: (theme: Theme) => ({\n    background: 'transparent',\n    border: 'none',\n    cursor: 'pointer',\n    padding: '8px',\n    // When visibility icon is next to the ag-grid checkbox, remove the bonus padding\n    '.ag-checkbox:not(.ag-hidden) + &': { padding: '0 1px' },\n    svg: {\n      width: theme.general.iconFontSize,\n      height: theme.general.iconFontSize,\n      cursor: 'pointer',\n      color: theme.colors.grey500,\n    },\n  }),\n  showOnlyInCompareMode: {\n    display: 'none',\n    '.is-table-comparing-runs-mode &': {\n      display: 'flex',\n    },\n  },\n};\n","import { ICellRendererParams } from '@ag-grid-community/core';\nimport { RunGroupParentInfo, RunGroupingMode, RunRowType } from '../../../utils/experimentPage.row-types';\nimport {\n  Button,\n  ChevronDownIcon,\n  ChevronRightIcon,\n  TableIcon,\n  Tag,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { getRunGroupDisplayName, isRemainingRunsGroup } from '../../../utils/experimentPage.group-row-utils';\nimport { useUpdateExperimentViewUIState } from '../../../contexts/ExperimentPageUIStateContext';\nimport { useCallback, useMemo } from 'react';\nimport { RunColorPill } from '../../RunColorPill';\nimport { isObject } from 'lodash';\nimport invariant from 'invariant';\nimport { FormattedMessage } from 'react-intl';\nimport { useGetExperimentRunColor, useSaveExperimentRunColor } from '../../../hooks/useExperimentRunColor';\nimport { useExperimentViewRunsTableHeaderContext } from '../ExperimentViewRunsTableHeaderContext';\nimport { shouldEnableToggleIndividualRunsInGroups } from '../../../../../../common/utils/FeatureUtils';\n\nexport interface GroupParentCellRendererProps extends ICellRendererParams {\n  data: RunRowType;\n  isComparingRuns?: boolean;\n}\n\nexport const GroupParentCellRenderer = ({ data, isComparingRuns }: GroupParentCellRendererProps) => {\n  const groupParentInfo = data.groupParentInfo;\n  const hidden = data.hidden;\n  invariant(groupParentInfo, 'groupParentInfo should be defined');\n  const { theme } = useDesignSystemTheme();\n\n  const { useGroupedValuesInCharts } = useExperimentViewRunsTableHeaderContext();\n  const getRunColor = useGetExperimentRunColor();\n  const saveRunColor = useSaveExperimentRunColor();\n  const updateUIState = useUpdateExperimentViewUIState();\n  const onExpandToggle = useCallback(\n    (groupId: string, doOpen: boolean) => {\n      updateUIState((current) => {\n        const { groupsExpanded } = current;\n        return {\n          ...current,\n          groupsExpanded: { ...groupsExpanded, [groupId]: doOpen },\n        };\n      });\n    },\n    [updateUIState],\n  );\n\n  const groupName = getRunGroupDisplayName(groupParentInfo);\n  const groupIsDisplayedInCharts = useMemo(() => {\n    if (shouldEnableToggleIndividualRunsInGroups()) {\n      return useGroupedValuesInCharts && !isRemainingRunsGroup(groupParentInfo);\n    }\n\n    return !isRemainingRunsGroup(groupParentInfo);\n  }, [groupParentInfo, useGroupedValuesInCharts]);\n\n  return (\n    <div css={{ display: 'flex', gap: theme.spacing.sm, alignItems: 'center' }}>\n      {groupParentInfo.expanderOpen ? (\n        <ChevronDownIcon\n          role=\"button\"\n          onClick={() => {\n            onExpandToggle(groupParentInfo.groupId, false);\n          }}\n        />\n      ) : (\n        <ChevronRightIcon\n          role=\"button\"\n          onClick={() => {\n            onExpandToggle(groupParentInfo.groupId, true);\n          }}\n        />\n      )}\n      {/* Display color pill only when it's displayed in chart area */}\n      {groupIsDisplayedInCharts && (\n        <RunColorPill\n          color={getRunColor(groupParentInfo.groupId)}\n          hidden={isComparingRuns && hidden}\n          onChangeColor={(colorValue) => {\n            saveRunColor({ groupUuid: groupParentInfo.groupId, colorValue });\n          }}\n        />\n      )}\n      <div\n        css={{\n          display: 'inline-flex',\n          gap: theme.spacing.sm,\n          alignItems: 'center',\n          overflow: 'hidden',\n          textOverflow: 'ellipsis',\n        }}\n      >\n        {isRemainingRunsGroup(groupParentInfo) ? (\n          <FormattedMessage\n            defaultMessage=\"Additional runs\"\n            description=\"Experiment page > grouped runs table > label for group with additional, ungrouped runs\"\n          />\n        ) : (\n          <span title={groupName} css={{ overflow: 'hidden', textOverflow: 'ellipsis' }}>\n            <FormattedMessage\n              defaultMessage=\"Group: {groupName}\"\n              description=\"Experiment page > grouped runs table > run group header label\"\n              values={{ groupName }}\n            />\n          </span>\n        )}\n        <Tag css={{ marginLeft: 0, marginRight: 0 }}>{groupParentInfo.runUuids.length}</Tag>\n      </div>\n    </div>\n  );\n};\n","import { ICellRendererParams } from '@ag-grid-community/core';\nimport { Button, MinusBoxIcon, PlusSquareIcon, useDesignSystemTheme } from '@databricks/design-system';\nimport { Theme } from '@emotion/react';\nimport React, { useMemo } from 'react';\nimport { Link } from '../../../../../../common/utils/RoutingUtils';\nimport Routes from '../../../../../routes';\nimport { RunRowType } from '../../../utils/experimentPage.row-types';\nimport { GroupParentCellRenderer } from './GroupParentCellRenderer';\nimport invariant from 'invariant';\nimport { RunColorPill } from '../../RunColorPill';\nimport {\n  shouldEnableToggleIndividualRunsInGroups,\n  shouldUseNewRunRowsVisibilityModel,\n} from '../../../../../../common/utils/FeatureUtils';\nimport { useGetExperimentRunColor, useSaveExperimentRunColor } from '../../../hooks/useExperimentRunColor';\nimport { useExperimentViewRunsTableHeaderContext } from '../ExperimentViewRunsTableHeaderContext';\n\nexport interface RunNameCellRendererProps extends ICellRendererParams {\n  data: RunRowType;\n  isComparingRuns?: boolean;\n  onExpand: (runUuid: string, childrenIds?: string[]) => void;\n}\n\nexport const RunNameCellRenderer = React.memo((props: RunNameCellRendererProps) => {\n  const { theme } = useDesignSystemTheme();\n\n  const saveRunColor = useSaveExperimentRunColor();\n  const getRunColor = useGetExperimentRunColor();\n  const { useGroupedValuesInCharts } = useExperimentViewRunsTableHeaderContext();\n\n  // If we're rendering a group row, use relevant component\n  if (props.data.groupParentInfo) {\n    return <GroupParentCellRenderer {...props} />;\n  }\n  const { onExpand, data } = props;\n  const { runName, experimentId, runUuid, runDateAndNestInfo, hidden } = data;\n\n  // If we are not rendering a group, assert existence of necessary fields\n  invariant(experimentId, 'experimentId should be set for run rows');\n  invariant(runUuid, 'runUuid should be set for run rows');\n  invariant(runDateAndNestInfo, 'runDateAndNestInfo should be set for run rows');\n\n  const { hasExpander, expanderOpen, childrenIds, level, belongsToGroup } = runDateAndNestInfo;\n\n  const renderingAsParent = !isNaN(level) && hasExpander;\n  const hideRunColorControl = (() => {\n    if (shouldEnableToggleIndividualRunsInGroups()) {\n      return belongsToGroup && useGroupedValuesInCharts;\n    }\n    return belongsToGroup;\n  })();\n\n  return (\n    <div css={styles.cellWrapper}>\n      <div css={styles.expanderWrapper}>\n        <div\n          css={styles.nestLevel(theme)}\n          style={{\n            width: (level + 1) * theme.spacing.lg,\n          }}\n        >\n          {renderingAsParent && (\n            <Button\n              componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_cells_runnamecellrenderer.tsx_46\"\n              css={styles.expanderButton}\n              size=\"small\"\n              onClick={() => {\n                onExpand(runUuid, childrenIds);\n              }}\n              key={'Expander-' + runUuid}\n              type=\"link\"\n              icon={expanderOpen ? <MinusBoxIcon /> : <PlusSquareIcon />}\n            />\n          )}\n        </div>\n      </div>\n      <div css={styles.runLink}>\n        {hideRunColorControl ? (\n          // Render empty color pills for grouped runs\n          <div css={{ width: 12, height: 12, flexShrink: 0 }} />\n        ) : (\n          <RunColorPill\n            color={getRunColor(runUuid)}\n            hidden={shouldUseNewRunRowsVisibilityModel() && props.isComparingRuns && hidden}\n            data-testid=\"experiment-view-table-run-color\"\n            onChangeColor={(colorValue) => saveRunColor({ runUuid, colorValue })}\n          />\n        )}\n        <Link to={Routes.getRunPageRoute(experimentId, runUuid)} css={styles.runLink} tabIndex={0}>\n          <span css={styles.runName}>{runName}</span>\n        </Link>\n      </div>\n    </div>\n  );\n});\n\nconst styles = {\n  link: (theme: Theme) => ({\n    display: 'inline-block',\n    minWidth: theme.typography.fontSizeBase,\n    minHeight: theme.typography.fontSizeBase,\n  }),\n  cellWrapper: {\n    display: 'flex',\n  },\n  expanderButton: {\n    svg: {\n      width: 12,\n      height: 12,\n    },\n  },\n  runLink: {\n    overflow: 'hidden',\n    display: 'flex',\n    gap: 8,\n    alignItems: 'center',\n    '&:focus-visible': {\n      textDecoration: 'underline',\n    },\n  },\n  runName: {\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n  },\n  expanderWrapper: {\n    display: 'none',\n    '.ag-grid-expanders-visible &': {\n      display: 'block',\n    },\n  },\n  nestLevel: (theme: Theme) => ({\n    display: 'flex',\n    justifyContent: 'flex-end',\n    height: theme.spacing.lg,\n  }),\n};\n","import type { ICellRendererParams } from '@ag-grid-community/core';\nimport { Button } from '@databricks/design-system';\nimport { uniqueId } from 'lodash';\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nexport const createLoadMoreRow = () => ({\n  runUuid: '',\n  rowUuid: uniqueId('load_more'),\n  isLoadMoreRow: true,\n});\n\n/**\n * A cell renderer for special type of full width rows housing \"Load more\"\n * button displayed at the bottom of the grid\n */\nexport const LoadMoreRowRenderer = React.memo(\n  ({ loadMoreRunsFunc }: ICellRendererParams & { loadMoreRunsFunc: () => void }) => (\n    <div css={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: 32 }}>\n      <Button\n        componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_cells_loadmorerowrenderer.tsx_20\"\n        type=\"primary\"\n        onClick={loadMoreRunsFunc}\n        size=\"small\"\n      >\n        <FormattedMessage defaultMessage=\"Load more\" description=\"Load more button text to load more experiment runs\" />\n      </Button>\n    </div>\n  ),\n);\n","import { throttle } from 'lodash';\nimport { Button, Popover, TableIcon, Tag, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport React, { useRef, useEffect, useState, useMemo } from 'react';\nimport { MLFLOW_RUN_DATASET_CONTEXT_TAG } from '../../../../../constants';\nimport type { RunDatasetWithTags } from '../../../../../types';\nimport { RunRowType } from '../../../utils/experimentPage.row-types';\nimport { EXPERIMENT_RUNS_TABLE_ROW_HEIGHT } from '../../../utils/experimentPage.common-utils';\nimport type { SuppressKeyboardEventParams } from '@ag-grid-community/core';\nconst MAX_DATASETS_VISIBLE = 3;\n\n/**\n * Local component, used to render a single dataset within a cell\n * or a context menu\n */\nconst SingleDataset = ({\n  datasetWithTags,\n  onDatasetSelected,\n  appendComma = false,\n  inPopover = false,\n}: {\n  datasetWithTags: RunDatasetWithTags;\n  onDatasetSelected: () => void;\n  appendComma?: boolean;\n  inPopover?: boolean;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const { dataset, tags } = datasetWithTags;\n  if (!dataset) {\n    return null;\n  }\n  const contextTag = tags?.find(({ key }) => key === MLFLOW_RUN_DATASET_CONTEXT_TAG);\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexShrink: 0,\n        alignItems: 'center',\n        overflow: 'hidden',\n        marginRight: theme.spacing.xs,\n      }}\n    >\n      <TableIcon css={{ color: theme.colors.textSecondary, marginRight: theme.spacing.xs }} />{' '}\n      <span\n        css={{ minWidth: 32, marginRight: theme.spacing.xs, flexShrink: 0 }}\n        title={`${dataset.name} (${dataset.digest})`}\n      >\n        {inPopover ? (\n          <Popover.Close asChild>\n            <Button\n              componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_cells_datasetscellrenderer.tsx_49\"\n              type=\"link\"\n              onClick={onDatasetSelected}\n              tabIndex={0}\n            >\n              <span css={{ fontSize: 12 }}>\n                {dataset.name} ({dataset.digest})\n              </span>\n            </Button>\n          </Popover.Close>\n        ) : (\n          <Button\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_cells_datasetscellrenderer.tsx_56\"\n            type=\"link\"\n            onClick={onDatasetSelected}\n            data-testid=\"open-dataset-drawer\"\n            tabIndex={0}\n          >\n            <span>\n              {dataset.name} ({dataset.digest})\n            </span>\n          </Button>\n        )}\n      </span>\n      {contextTag && (\n        <Tag css={{ textTransform: 'capitalize', marginRight: theme.spacing.xs }}>\n          <span css={{ fontSize: 12 }}>{contextTag.value}</span>\n        </Tag>\n      )}\n      {appendComma && <>,</>}\n    </div>\n  );\n};\n\nexport interface DatasetsCellRendererProps {\n  value: RunDatasetWithTags[];\n  data: RunRowType;\n  onDatasetSelected: (dataset: RunDatasetWithTags, run: RunRowType) => void;\n  expandRows: boolean;\n}\n\nexport const DatasetsCellRenderer = React.memo(\n  ({ value: datasets, data, onDatasetSelected, expandRows }: DatasetsCellRendererProps) => {\n    const containerElement = useRef<HTMLDivElement>(null);\n    const [datasetsVisible, setDatasetsVisible] = useState(0);\n    const [ellipsisVisible, setEllipsisVisible] = useState(false);\n    const clampedDatasets = useMemo(() => (datasets || []).slice(0, MAX_DATASETS_VISIBLE), [datasets]);\n    const { theme } = useDesignSystemTheme();\n\n    const datasetsLength = (datasets || []).length;\n\n    useEffect(() => {\n      if (!containerElement.current) {\n        return () => {};\n      }\n      const callback: ResizeObserverCallback = throttle(([entry]) => {\n        if (expandRows) {\n          const availableHeight = entry.contentRect.height;\n          let elementsFit = 0;\n          let stackedHeight = 0;\n          for (let i = 0; i < entry.target.children.length; i++) {\n            const item = entry.target.children.item(i) as Element;\n            if (stackedHeight + item.clientHeight > availableHeight) {\n              break;\n            }\n            stackedHeight += item.clientHeight;\n            elementsFit++;\n          }\n          setDatasetsVisible(elementsFit);\n          setEllipsisVisible(elementsFit < datasetsLength);\n        } else {\n          const availableWidth = entry.contentRect.width;\n          if (availableWidth === 0 && datasetsLength) {\n            setDatasetsVisible(0);\n            setEllipsisVisible(true);\n            return;\n          }\n          let elementsFit = 0;\n          let stackedWidth = 0;\n          for (let i = 0; i < entry.target.children.length; i++) {\n            const item = entry.target.children.item(i) as Element;\n            if (stackedWidth + item.clientWidth >= availableWidth) {\n              break;\n            }\n            stackedWidth += item.clientWidth;\n            elementsFit++;\n          }\n          const partiallyVisibleDatasets = Math.min(datasetsLength, elementsFit + 1);\n          setDatasetsVisible(partiallyVisibleDatasets);\n          setEllipsisVisible(elementsFit < datasetsLength);\n        }\n      }, 100);\n\n      const resizeObserver = new ResizeObserver(callback);\n\n      resizeObserver.observe(containerElement.current);\n      return () => resizeObserver.disconnect();\n    }, [expandRows, datasetsLength]);\n\n    const moreItemsToShow = datasetsLength - datasetsVisible;\n    if (!datasets || datasetsLength < 1) {\n      return <>-</>;\n    }\n\n    const datasetsToShow = expandRows ? clampedDatasets : datasets;\n\n    return (\n      <div css={{ display: 'flex' }}>\n        <div\n          css={{\n            overflow: 'hidden',\n            display: 'flex',\n            flexDirection: expandRows ? 'column' : 'row',\n          }}\n          ref={containerElement}\n        >\n          {datasetsToShow.map((datasetWithTags, index) => (\n            <SingleDataset\n              appendComma={expandRows ? false : index < datasetsToShow.length - 1}\n              key={`${datasetWithTags.dataset.name}-${datasetWithTags.dataset.digest}`}\n              datasetWithTags={datasetWithTags}\n              onDatasetSelected={() => onDatasetSelected?.(datasetWithTags, data)}\n            />\n          ))}\n        </div>\n        {(moreItemsToShow > 0 || ellipsisVisible) && (\n          <div css={{ display: 'flex', alignItems: 'flex-end' }}>\n            {!expandRows && ellipsisVisible && (\n              <span css={{ paddingLeft: 0, paddingRight: theme.spacing.xs }}>&hellip;</span>\n            )}\n            {moreItemsToShow > 0 && (\n              <Popover.Root modal={false}>\n                <Popover.Trigger asChild>\n                  <Button\n                    componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_cells_datasetscellrenderer.tsx_172\"\n                    size=\"small\"\n                    style={{ borderRadius: '8px', width: '40px' }}\n                    tabIndex={0}\n                  >\n                    <Typography.Text color=\"secondary\">+{moreItemsToShow}</Typography.Text>\n                  </Button>\n                </Popover.Trigger>\n                <Popover.Content align=\"start\" css={{ maxHeight: '400px', overflow: 'auto' }}>\n                  {datasets.slice(datasetsLength - moreItemsToShow).map((datasetWithTags) => (\n                    <div\n                      css={{\n                        height: theme.general.heightSm,\n                        display: 'flex',\n                        alignItems: 'center',\n                      }}\n                      key={`${datasetWithTags.dataset.name}-${datasetWithTags.dataset.digest}`}\n                    >\n                      <SingleDataset\n                        datasetWithTags={datasetWithTags}\n                        onDatasetSelected={() => onDatasetSelected?.(datasetWithTags, data)}\n                        inPopover\n                      />\n                    </div>\n                  ))}\n                </Popover.Content>\n              </Popover.Root>\n            )}\n          </div>\n        )}\n      </div>\n    );\n  },\n);\n\nexport const getDatasetsCellHeight = (datasetColumnShown: boolean, row: { data: RunRowType }) => {\n  if (datasetColumnShown) {\n    const { data } = row;\n\n    // Display at least 1, but at most 5 text lines in the cell.\n    const datasetsCount = Math.min(data.datasets?.length || 1, MAX_DATASETS_VISIBLE);\n    return EXPERIMENT_RUNS_TABLE_ROW_HEIGHT * datasetsCount;\n  }\n  return EXPERIMENT_RUNS_TABLE_ROW_HEIGHT;\n};\n\n/**\n * A utility function that enables custom keyboard navigation for the datasets cell renderer by providing\n * conditional suppression of default events.\n *\n * This cell needs specific handling since it's the only one that displays multiple buttons simultaneously.\n */\nexport const DatasetsCellRendererSuppressKeyboardEvents = ({ event }: SuppressKeyboardEventParams) => {\n  return (\n    event.key === 'Tab' &&\n    event.target instanceof HTMLElement &&\n    // Let's suppress the default action if the focus is on cell or on the dataset button, allowing\n    // tab to move to the next focusable element.\n    (event.target.classList.contains('ag-cell') || event.target instanceof HTMLButtonElement)\n  );\n};\n","import { Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { RunRowType } from '../../../utils/experimentPage.row-types';\n\nexport const AggregateMetricValueCell = ({\n  value,\n  data,\n  valueFormatted,\n}: {\n  value: string;\n  valueFormatted: null | string;\n  data: RunRowType;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  if (data.groupParentInfo?.aggregateFunction) {\n    return (\n      <Typography.Text>\n        {valueFormatted ?? value}{' '}\n        <span css={{ color: theme.colors.textSecondary }}>({data.groupParentInfo.aggregateFunction})</span>\n      </Typography.Text>\n    );\n  }\n  return value;\n};\n","import type {\n  CellClassParams,\n  ColDef,\n  ColGroupDef,\n  ColumnApi,\n  IsFullWidthRowParams,\n  SuppressKeyboardEventParams,\n} from '@ag-grid-community/core';\nimport { Spinner, SpinnerProps, useDesignSystemTheme } from '@databricks/design-system';\nimport React, { useEffect, useMemo, useRef } from 'react';\nimport { isEqual } from 'lodash';\nimport Utils from '../../../../common/utils/Utils';\nimport { ATTRIBUTE_COLUMN_LABELS, ATTRIBUTE_COLUMN_SORT_KEY, COLUMN_TYPES } from '../../../constants';\nimport { ColumnHeaderCell } from '../components/runs/cells/ColumnHeaderCell';\nimport { DateCellRenderer } from '../components/runs/cells/DateCellRenderer';\nimport { RunDescriptionCellRenderer } from '../components/runs/cells/RunDescriptionCellRenderer';\nimport { ExperimentNameCellRenderer } from '../components/runs/cells/ExperimentNameCellRenderer';\nimport { ModelsCellRenderer } from '../components/runs/cells/ModelsCellRenderer';\nimport { ModelsHeaderCellRenderer } from '../components/runs/cells/ModelsHeaderCellRenderer';\nimport { SourceCellRenderer } from '../components/runs/cells/SourceCellRenderer';\nimport { VersionCellRenderer } from '../components/runs/cells/VersionCellRenderer';\nimport {\n  EXPERIMENT_FIELD_PREFIX_METRIC,\n  EXPERIMENT_FIELD_PREFIX_PARAM,\n  EXPERIMENT_FIELD_PREFIX_TAG,\n  getQualifiedEntityName,\n  makeCanonicalSortKey,\n} from './experimentPage.common-utils';\nimport { RunRowType } from './experimentPage.row-types';\nimport {\n  RowActionsCellRenderer,\n  RowActionsCellRendererSuppressKeyboardEvents,\n} from '../components/runs/cells/RowActionsCellRenderer';\nimport { RowActionsHeaderCellRenderer } from '../components/runs/cells/RowActionsHeaderCellRenderer';\nimport { RunNameCellRenderer } from '../components/runs/cells/RunNameCellRenderer';\nimport { LoadMoreRowRenderer } from '../components/runs/cells/LoadMoreRowRenderer';\nimport { shouldUseNewRunRowsVisibilityModel } from '../../../../common/utils/FeatureUtils';\nimport {\n  DatasetsCellRenderer,\n  DatasetsCellRendererSuppressKeyboardEvents,\n} from '../components/runs/cells/DatasetsCellRenderer';\nimport { RunDatasetWithTags } from '../../../types';\nimport { AggregateMetricValueCell } from '../components/runs/cells/AggregateMetricValueCell';\nimport { type RUNS_VISIBILITY_MODE } from '../models/ExperimentPageUIState';\nimport { useMediaQuery } from '@databricks/web-shared/hooks';\nimport { customMetricBehaviorDefs } from './customMetricBehaviorUtils';\n\nconst cellClassIsOrderedBy = ({ colDef, context }: CellClassParams) =>\n  context.orderByKey === colDef.headerComponentParams?.canonicalSortKey;\n/**\n * Width for \"run name\" column.\n */\nconst RUN_NAME_COLUMN_WIDTH = 190;\n\n/**\n * Width for \"run actions\" column.\n */\nconst BASE_RUN_ACTIONS_COLUMN_WIDTH = 105;\nconst VISIBILITY_TOGGLE_WIDTH = 32;\n\n/**\n * Calculates width for \"actions\" column. \"compactMode\" should be set to true\n * for compare runs mode when checkboxes are hidden.\n */\nconst getActionsColumnWidth = (isComparingRuns?: boolean) => {\n  if (!shouldUseNewRunRowsVisibilityModel()) {\n    return BASE_RUN_ACTIONS_COLUMN_WIDTH;\n  }\n  return isComparingRuns ? BASE_RUN_ACTIONS_COLUMN_WIDTH : BASE_RUN_ACTIONS_COLUMN_WIDTH - VISIBILITY_TOGGLE_WIDTH;\n};\n\n/*\n * Functions used to generate grid field names for params, metrics and prefixes\n */\nexport const createParamFieldName = (key: string) => `${EXPERIMENT_FIELD_PREFIX_PARAM}-${key}`;\nconst createMetricFieldName = (key: string) => `${EXPERIMENT_FIELD_PREFIX_METRIC}-${key}`;\nconst createTagFieldName = (key: string) => `${EXPERIMENT_FIELD_PREFIX_TAG}-${key}`;\n\nconst UntrackedSpinner: React.FC<SpinnerProps> = ({ loading, ...props }) => {\n  return Spinner({ loading: false, ...props });\n};\n\n/**\n * A default listener that suppresses default agGrid keyboard events on the row actions cell renderer.\n * If the focus is on a cell, the tab key should be allowed to navigate to the next focusable element instead of a next cell.\n */\nconst defaultKeyboardNavigationSuppressor = ({ event }: SuppressKeyboardEventParams) =>\n  event.key === 'Tab' && event.target instanceof HTMLElement && event.target.classList.contains('ag-cell');\n\n/**\n * Functions returns all framework components to be used by agGrid\n */\nexport const getFrameworkComponents = () => ({\n  agColumnHeader: ColumnHeaderCell,\n\n  // A workaround for https://github.com/ag-grid/ag-grid/issues/7028.\n  // The page will add an interaction hold directly instead of relying on DuBois' Spinner\n  // to do it.\n  loadingOverlayComponent: UntrackedSpinner,\n\n  /**\n   * We're saving cell renderer component references, otherwise\n   * agGrid will unnecessarily flash cells' content (e.g. when changing sort order)\n   */\n  LoadMoreRowRenderer,\n  SourceCellRenderer,\n  ModelsCellRenderer,\n  ModelsHeaderCellRenderer,\n  VersionCellRenderer,\n  DateCellRenderer,\n  ExperimentNameCellRenderer,\n  RunDescriptionCellRenderer,\n  RowActionsCellRenderer,\n  RowActionsHeaderCellRenderer,\n  RunNameCellRenderer,\n  DatasetsCellRenderer,\n  AggregateMetricValueCell,\n});\n\n/**\n * Certain columns are described as run attributes (opposed to metrics, params etc.), however\n * they actually source their data from the run tags. This objects maps tag names to column identifiers.\n */\nexport const TAGS_TO_COLUMNS_MAP = {\n  [ATTRIBUTE_COLUMN_SORT_KEY.USER]: makeCanonicalSortKey(COLUMN_TYPES.ATTRIBUTES, 'User'),\n  [ATTRIBUTE_COLUMN_SORT_KEY.RUN_NAME]: makeCanonicalSortKey(COLUMN_TYPES.ATTRIBUTES, 'Run Name'),\n  [ATTRIBUTE_COLUMN_SORT_KEY.SOURCE]: makeCanonicalSortKey(COLUMN_TYPES.ATTRIBUTES, 'Source'),\n  [ATTRIBUTE_COLUMN_SORT_KEY.VERSION]: makeCanonicalSortKey(COLUMN_TYPES.ATTRIBUTES, 'Version'),\n  [ATTRIBUTE_COLUMN_SORT_KEY.DESCRIPTION]: makeCanonicalSortKey(COLUMN_TYPES.ATTRIBUTES, 'Description'),\n};\n\n/**\n * Function returns unique row ID to be used in runs table\n */\nexport const getRowId = ({ data }: { data: RunRowType }) => data.rowUuid;\n\n/**\n * Determines if a data row houses \"load more\" button\n */\nexport const getRowIsLoadMore = ({ rowNode }: IsFullWidthRowParams) => rowNode.data.isLoadMoreRow;\n\n/**\n * Parameters used by `useRunsColumnDefinitions()` hook\n */\nexport interface UseRunsColumnDefinitionsParams {\n  selectedColumns: string[];\n  onExpand: (parentUuid: string, childrenIds: string[]) => void;\n  onTogglePin: (runUuid: string) => void;\n  onToggleVisibility:\n    | ((runUuidOrToggle: string) => void)\n    | ((mode: RUNS_VISIBILITY_MODE, runOrGroupUuid: string) => void);\n  compareExperiments: boolean;\n  metricKeyList: string[];\n  paramKeyList: string[];\n  tagKeyList: string[];\n  columnApi?: ColumnApi;\n  isComparingRuns?: boolean;\n  onDatasetSelected?: (dataset: RunDatasetWithTags, run: RunRowType) => void;\n  expandRows?: boolean;\n  allRunsHidden?: boolean;\n  runsHiddenMode?: RUNS_VISIBILITY_MODE;\n}\n\n/**\n * List of all attribute columns that can be shown/hidden by user\n * - when displaying a single experiment (ADJUSTABLE_ATTRIBUTE_COLUMNS_SINGLE_EXPERIMENT)\n * - when comparing experiments (ADJUSTABLE_ATTRIBUTE_COLUMNS)\n */\n\nexport const getAdjustableAttributeColumns = (isComparingExperiments = false) => {\n  const result = [\n    ATTRIBUTE_COLUMN_LABELS.USER,\n    ATTRIBUTE_COLUMN_LABELS.SOURCE,\n    ATTRIBUTE_COLUMN_LABELS.VERSION,\n    ATTRIBUTE_COLUMN_LABELS.MODELS,\n    ATTRIBUTE_COLUMN_LABELS.DATASET,\n    ATTRIBUTE_COLUMN_LABELS.DESCRIPTION,\n  ];\n\n  if (isComparingExperiments) {\n    result.push(ATTRIBUTE_COLUMN_LABELS.EXPERIMENT_NAME);\n  }\n  return result;\n};\n\n/**\n * This internal hook passes through the list of all metric/param/tag keys.\n * The lists are memoized internally so if somehow a particular param/metric/tag key is not present\n * in the new runs set (e.g. due to reverse sorting), the relevant column will be still displayed.\n * This prevents weirdly disappearing columns on exotic run sets.\n */\nconst useCumulativeColumnKeys = ({\n  paramKeyList,\n  metricKeyList,\n  tagKeyList,\n}: Pick<UseRunsColumnDefinitionsParams, 'tagKeyList' | 'metricKeyList' | 'paramKeyList'>) => {\n  const cachedMetricKeys = useRef<Set<string>>(new Set());\n  const cachedParamKeys = useRef<Set<string>>(new Set());\n  const cachedTagKeys = useRef<Set<string>>(new Set());\n\n  const paramKeys = useMemo(() => {\n    paramKeyList.forEach((key) => cachedParamKeys.current.add(key));\n    return Array.from(cachedParamKeys.current);\n  }, [paramKeyList]);\n\n  const metricKeys = useMemo(() => {\n    metricKeyList.forEach((key) => cachedMetricKeys.current.add(key));\n    return Array.from(cachedMetricKeys.current);\n  }, [metricKeyList]);\n\n  const tagKeys = useMemo(() => {\n    tagKeyList.forEach((key) => cachedTagKeys.current.add(key));\n    return Array.from(cachedTagKeys.current);\n  }, [tagKeyList]);\n\n  const cumulativeColumns = useMemo(\n    () => ({\n      paramKeys,\n      metricKeys,\n      tagKeys,\n    }),\n    [metricKeys, paramKeys, tagKeys],\n  );\n\n  return cumulativeColumns;\n};\n\n/**\n * This hook creates a agGrid-compatible column set definition basing on currently\n * used sort-filter model and provided list of metrics, params and tags.\n *\n * Internally, it reacts to changes to `selectedColumns` and hides/shows relevant columns\n * if necessary.\n *\n * @param params see UseRunsColumnDefinitionsParams\n */\nexport const useRunsColumnDefinitions = ({\n  selectedColumns,\n  compareExperiments,\n  onTogglePin,\n  onToggleVisibility,\n  onExpand,\n  paramKeyList,\n  metricKeyList,\n  tagKeyList,\n  columnApi,\n  onDatasetSelected,\n  isComparingRuns,\n  expandRows,\n  allRunsHidden,\n  runsHiddenMode,\n}: UseRunsColumnDefinitionsParams) => {\n  const { theme } = useDesignSystemTheme();\n\n  const cumulativeColumns = useCumulativeColumnKeys({\n    metricKeyList,\n    tagKeyList,\n    paramKeyList,\n  });\n\n  // Generate columns differently on super small viewport sizes\n  const usingCompactViewport = useMediaQuery(`(max-width: ${theme.responsive.breakpoints.sm}px)`);\n\n  const columnSet = useMemo(() => {\n    const columns: (ColDef | ColGroupDef)[] = [];\n\n    // Checkbox selection column\n    columns.push({\n      valueGetter: ({ data: { pinned, hidden } }) => ({ pinned, hidden }),\n      checkboxSelection: true,\n      headerComponent: 'RowActionsHeaderCellRenderer',\n      headerComponentParams: { onToggleVisibility, allRunsHidden },\n      headerCheckboxSelection: true,\n      headerName: '',\n      cellClass: 'is-checkbox-cell',\n      cellRenderer: 'RowActionsCellRenderer',\n      cellRendererParams: { onTogglePin, onToggleVisibility },\n      pinned: usingCompactViewport ? undefined : 'left',\n      minWidth: getActionsColumnWidth(isComparingRuns),\n      width: getActionsColumnWidth(isComparingRuns),\n      maxWidth: getActionsColumnWidth(isComparingRuns),\n      resizable: false,\n      suppressKeyboardEvent: RowActionsCellRendererSuppressKeyboardEvents,\n    });\n\n    const isRunColumnDynamicSized = isComparingRuns;\n\n    // Run name column\n    columns.push({\n      headerName: ATTRIBUTE_COLUMN_LABELS.RUN_NAME,\n      colId: isRunColumnDynamicSized ? undefined : TAGS_TO_COLUMNS_MAP[ATTRIBUTE_COLUMN_SORT_KEY.RUN_NAME],\n      headerTooltip: ATTRIBUTE_COLUMN_SORT_KEY.RUN_NAME,\n      pinned: usingCompactViewport ? undefined : 'left',\n      sortable: true,\n      cellRenderer: 'RunNameCellRenderer',\n      cellRendererParams: { onExpand, isComparingRuns },\n      equals: (runA: RunRowType, runB: RunRowType) =>\n        runA?.rowUuid === runB?.rowUuid && runA?.groupParentInfo?.expanderOpen === runB?.groupParentInfo?.expanderOpen,\n      headerComponentParams: {\n        canonicalSortKey: ATTRIBUTE_COLUMN_SORT_KEY.RUN_NAME,\n      },\n      cellClassRules: {\n        'is-ordered-by': cellClassIsOrderedBy,\n      },\n      initialWidth: isRunColumnDynamicSized ? undefined : RUN_NAME_COLUMN_WIDTH,\n      flex: isRunColumnDynamicSized ? 1 : undefined,\n      resizable: !isComparingRuns,\n      suppressKeyboardEvent: defaultKeyboardNavigationSuppressor,\n    });\n\n    // If we are only comparing runs, that's it - we cut off the list after the run name column.\n    // This behavior might be revisited and changed later.\n    if (isComparingRuns) {\n      return columns;\n    }\n\n    // Date and expander selection column\n    columns.push({\n      headerName: ATTRIBUTE_COLUMN_LABELS.DATE,\n      headerTooltip: ATTRIBUTE_COLUMN_SORT_KEY.DATE,\n      pinned: usingCompactViewport ? undefined : 'left',\n      sortable: true,\n      field: 'runDateAndNestInfo',\n      cellRenderer: 'DateCellRenderer',\n      cellRendererParams: { onExpand },\n      equals: (dateInfo1, dateInfo2) => isEqual(dateInfo1, dateInfo2),\n      headerComponentParams: {\n        canonicalSortKey: ATTRIBUTE_COLUMN_SORT_KEY.DATE,\n      },\n      cellClassRules: {\n        'is-ordered-by': cellClassIsOrderedBy,\n      },\n      initialWidth: 150,\n    });\n\n    // Datasets column - guarded by a feature flag\n    columns.push({\n      headerName: ATTRIBUTE_COLUMN_LABELS.DATASET,\n      colId: makeCanonicalSortKey(COLUMN_TYPES.ATTRIBUTES, ATTRIBUTE_COLUMN_LABELS.DATASET),\n      headerTooltip: ATTRIBUTE_COLUMN_LABELS.DATASET,\n      sortable: false,\n      field: 'datasets',\n      cellRenderer: 'DatasetsCellRenderer',\n      cellRendererParams: { onDatasetSelected, expandRows },\n      cellClass: 'is-multiline-cell',\n      initialWidth: 300,\n      suppressKeyboardEvent: DatasetsCellRendererSuppressKeyboardEvents,\n    });\n\n    // Duration column\n    columns.push({\n      headerName: ATTRIBUTE_COLUMN_LABELS.DURATION,\n      field: 'duration',\n      initialWidth: 80,\n    });\n\n    // Experiment name column\n    if (compareExperiments) {\n      columns.push({\n        headerName: ATTRIBUTE_COLUMN_LABELS.EXPERIMENT_NAME,\n        colId: makeCanonicalSortKey(COLUMN_TYPES.ATTRIBUTES, ATTRIBUTE_COLUMN_LABELS.EXPERIMENT_NAME),\n        field: 'experimentName',\n        cellRenderer: 'ExperimentNameCellRenderer',\n        equals: (experimentName1, experimentName2) => isEqual(experimentName1, experimentName2),\n        initialWidth: 140,\n        initialHide: true,\n        suppressKeyboardEvent: defaultKeyboardNavigationSuppressor,\n      });\n    }\n\n    // User column\n    columns.push({\n      headerName: ATTRIBUTE_COLUMN_LABELS.USER,\n      colId: TAGS_TO_COLUMNS_MAP[ATTRIBUTE_COLUMN_SORT_KEY.USER],\n      headerTooltip: ATTRIBUTE_COLUMN_SORT_KEY.USER,\n      field: 'user',\n      sortable: true,\n      headerComponentParams: {\n        canonicalSortKey: ATTRIBUTE_COLUMN_SORT_KEY.USER,\n      },\n      cellClassRules: {\n        'is-ordered-by': cellClassIsOrderedBy,\n      },\n      initialHide: true,\n    });\n\n    // Source column\n    columns.push({\n      headerName: ATTRIBUTE_COLUMN_LABELS.SOURCE,\n      colId: TAGS_TO_COLUMNS_MAP[ATTRIBUTE_COLUMN_SORT_KEY.SOURCE],\n      field: 'tags',\n      cellRenderer: 'SourceCellRenderer',\n      equals: (tags1 = {}, tags2 = {}) => Utils.getSourceName(tags1) === Utils.getSourceName(tags2),\n      sortable: true,\n      headerComponentParams: {\n        canonicalSortKey: ATTRIBUTE_COLUMN_SORT_KEY.SOURCE,\n      },\n      cellClassRules: {\n        'is-ordered-by': cellClassIsOrderedBy,\n      },\n      initialHide: true,\n      suppressKeyboardEvent: defaultKeyboardNavigationSuppressor,\n    });\n\n    // Version column\n    columns.push({\n      headerName: ATTRIBUTE_COLUMN_LABELS.VERSION,\n      colId: TAGS_TO_COLUMNS_MAP[ATTRIBUTE_COLUMN_SORT_KEY.VERSION],\n      field: 'version',\n      cellRenderer: 'VersionCellRenderer',\n      equals: (version1 = {}, version2 = {}) => isEqual(version1, version2),\n      sortable: true,\n      headerComponentParams: {\n        canonicalSortKey: ATTRIBUTE_COLUMN_SORT_KEY.VERSION,\n      },\n      cellClassRules: {\n        'is-ordered-by': cellClassIsOrderedBy,\n      },\n      initialHide: true,\n    });\n\n    // Models column\n    columns.push({\n      headerComponent: 'ModelsHeaderCellRenderer',\n      colId: makeCanonicalSortKey(COLUMN_TYPES.ATTRIBUTES, ATTRIBUTE_COLUMN_LABELS.MODELS),\n      field: 'models',\n      cellRenderer: 'ModelsCellRenderer',\n      initialWidth: 200,\n      equals: (models1 = {}, models2 = {}) => isEqual(models1, models2),\n      initialHide: true,\n      suppressKeyboardEvent: defaultKeyboardNavigationSuppressor,\n    });\n\n    columns.push({\n      headerName: ATTRIBUTE_COLUMN_LABELS.DESCRIPTION,\n      colId: TAGS_TO_COLUMNS_MAP[ATTRIBUTE_COLUMN_SORT_KEY.DESCRIPTION],\n      field: 'tags',\n      cellRenderer: 'RunDescriptionCellRenderer',\n      initialWidth: 300,\n      initialHide: true,\n      sortable: true,\n      headerComponentParams: {\n        canonicalSortKey: ATTRIBUTE_COLUMN_SORT_KEY.DESCRIPTION,\n      },\n      cellClassRules: {\n        'is-ordered-by': cellClassIsOrderedBy,\n      },\n    });\n\n    const { metricKeys, paramKeys, tagKeys } = cumulativeColumns;\n\n    // Metrics columns\n    if (metricKeys.length) {\n      columns.push({\n        headerName: 'Metrics',\n        groupId: COLUMN_TYPES.METRICS,\n        children: metricKeys.map((metricKey) => {\n          const canonicalSortKey = makeCanonicalSortKey(COLUMN_TYPES.METRICS, metricKey);\n          const customMetricColumnDef = customMetricBehaviorDefs[metricKey];\n          return {\n            headerName: customMetricColumnDef?.displayName ?? metricKey,\n            colId: canonicalSortKey,\n            headerTooltip: getQualifiedEntityName(COLUMN_TYPES.METRICS, metricKey),\n            field: createMetricFieldName(metricKey),\n            tooltipField: createMetricFieldName(metricKey),\n            initialWidth: customMetricColumnDef?.initialColumnWidth ?? 100,\n            initialHide: true,\n            sortable: true,\n            headerComponentParams: {\n              canonicalSortKey,\n            },\n            valueFormatter: customMetricColumnDef?.valueFormatter,\n            cellRendererSelector: ({ data: { groupParentInfo } }) =>\n              groupParentInfo ? { component: 'AggregateMetricValueCell' } : undefined,\n            cellClassRules: {\n              'is-previewable-cell': () => true,\n              'is-ordered-by': cellClassIsOrderedBy,\n            },\n          };\n        }),\n      });\n    }\n\n    // Parameter columns\n    if (paramKeys.length) {\n      columns.push({\n        headerName: 'Parameters',\n        groupId: COLUMN_TYPES.PARAMS,\n        children: paramKeys.map((paramKey) => {\n          const canonicalSortKey = makeCanonicalSortKey(COLUMN_TYPES.PARAMS, paramKey);\n          return {\n            colId: canonicalSortKey,\n            headerName: paramKey,\n            headerTooltip: getQualifiedEntityName(COLUMN_TYPES.PARAMS, paramKey),\n            field: createParamFieldName(paramKey),\n            tooltipField: createParamFieldName(paramKey),\n            initialHide: true,\n            initialWidth: 100,\n            sortable: true,\n            headerComponentParams: {\n              canonicalSortKey,\n            },\n            cellClassRules: {\n              'is-previewable-cell': () => true,\n              'is-ordered-by': cellClassIsOrderedBy,\n            },\n          };\n        }),\n      });\n    }\n\n    // Tags columns\n    if (tagKeys.length) {\n      columns.push({\n        headerName: 'Tags',\n        colId: COLUMN_TYPES.TAGS,\n        children: tagKeys.map((tagKey) => {\n          const canonicalSortKey = makeCanonicalSortKey(COLUMN_TYPES.TAGS, tagKey);\n          return {\n            colId: canonicalSortKey,\n            headerName: tagKey,\n            initialHide: true,\n            initialWidth: 100,\n            headerTooltip: getQualifiedEntityName(COLUMN_TYPES.TAGS, tagKey),\n            field: createTagFieldName(tagKey),\n            tooltipField: createTagFieldName(tagKey),\n          };\n        }),\n      });\n    }\n\n    return columns;\n  }, [\n    onTogglePin,\n    onToggleVisibility,\n    onExpand,\n    compareExperiments,\n    cumulativeColumns,\n    isComparingRuns,\n    onDatasetSelected,\n    expandRows,\n    allRunsHidden,\n    usingCompactViewport,\n  ]);\n\n  const canonicalSortKeys = useMemo(\n    () => [\n      ...getAdjustableAttributeColumns(true).map((key) => makeCanonicalSortKey(COLUMN_TYPES.ATTRIBUTES, key)),\n      ...cumulativeColumns.paramKeys.map((key) => makeCanonicalSortKey(COLUMN_TYPES.PARAMS, key)),\n      ...cumulativeColumns.metricKeys.map((key) => makeCanonicalSortKey(COLUMN_TYPES.METRICS, key)),\n      ...cumulativeColumns.tagKeys.map((key) => makeCanonicalSortKey(COLUMN_TYPES.TAGS, key)),\n    ],\n    [cumulativeColumns],\n  );\n\n  useEffect(() => {\n    if (!columnApi || isComparingRuns) {\n      return;\n    }\n    for (const canonicalKey of canonicalSortKeys) {\n      const visible = selectedColumns.includes(canonicalKey);\n      columnApi.setColumnVisible(canonicalKey, visible);\n    }\n  }, [selectedColumns, columnApi, canonicalSortKeys, isComparingRuns]);\n\n  return columnSet;\n};\n\nexport const EXPERIMENTS_DEFAULT_COLUMN_SETUP = {\n  initialWidth: 100,\n  autoSizePadding: 0,\n  headerComponentParams: { menuIcon: 'fa-bars' },\n  resizable: true,\n  filter: true,\n  suppressMenu: true,\n  suppressMovable: true,\n};\n","import { BeakerIcon, Button, Empty, FilterIcon } from '@databricks/design-system';\nimport { Theme } from '@emotion/react';\nimport { FormattedMessage } from 'react-intl';\nimport { LoggingRunsDocUrl } from '../../../../../common/constants';\n\n/**\n * This component displays information about no results being displayed in runs tample,\n * either due to no runs recorded in an experiment at all or due to currently used filters.\n */\nexport const ExperimentViewRunsEmptyTable = ({\n  isFiltered,\n  onClearFilters,\n}: {\n  onClearFilters: () => void;\n  isFiltered: boolean;\n}) => {\n  const getLearnMoreLinkUrl = () => LoggingRunsDocUrl;\n\n  return (\n    <div css={styles.noResultsWrapper}>\n      <div css={styles.noResults}>\n        {isFiltered ? (\n          <Empty\n            button={\n              <Button\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewrunsemptytable.tsx_35\"\n                type=\"primary\"\n                onClick={onClearFilters}\n              >\n                <FormattedMessage\n                  defaultMessage=\"Clear filters\"\n                  description=\"Label for a button that clears all filters, visible on a experiment runs page next to a empty state when all runs have been filtered out\"\n                />\n              </Button>\n            }\n            description={\n              <FormattedMessage\n                defaultMessage=\"All runs in this experiment have been filtered. Change or clear filters to view runs.\"\n                description=\"Empty state description text for experiment runs page when all runs have been filtered out\"\n              />\n            }\n            title={\n              <FormattedMessage\n                defaultMessage=\"All runs are filtered\"\n                description=\"Empty state title text for experiment runs page when all runs have been filtered out\"\n              />\n            }\n            image={<FilterIcon />}\n          />\n        ) : (\n          <Empty\n            description={\n              <FormattedMessage\n                defaultMessage=\"No runs have been logged yet. <link>Learn more</link> about how to create ML model training runs in this experiment.\"\n                description=\"Empty state description text for experiment runs page when no runs are logged in the experiment\"\n                values={{\n                  link: (chunks: any) => (\n                    <a target=\"_blank\" href={getLearnMoreLinkUrl()} rel=\"noreferrer\">\n                      {chunks}\n                    </a>\n                  ),\n                }}\n              />\n            }\n            title={\n              <FormattedMessage\n                defaultMessage=\"No runs logged\"\n                description=\"Empty state title text for experiment runs page when no runs are logged in the experiment\"\n              />\n            }\n            image={<BeakerIcon />}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst styles = {\n  noResults: {\n    maxWidth: 360,\n  },\n  noResultsWrapper: (theme: Theme) => ({\n    marginTop: theme.spacing.lg,\n    inset: 0,\n    backgroundColor: theme.colors.backgroundPrimary,\n    position: 'absolute' as const,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  }),\n};\n","import { Button, PlusCircleIcon } from '@databricks/design-system';\nimport { Theme } from '@emotion/react';\nimport { useCallback, useEffect, useRef } from 'react';\nimport { FormattedMessage } from 'react-intl';\n\n/**\n * Width of the CTA column\n */\nconst COLUMN_CTA_WIDTH = 180;\n\n/**\n * CSS classes used internally\n */\nconst CLASS_OUT_OF_VIEWPORT = 'is-out-of-viewport';\nconst CLASS_IS_HIDDEN = 'is-hidden';\nconst CLASS_IS_MINIMIZED = 'is-minimized';\n\n/**\n * List all necessary agGrid sub-element classes\n */\nconst AG_GRID_CLS = {\n  ROOT: '.ag-root',\n  LEFT_COLS_CONTAINER: '.ag-pinned-left-cols-container',\n  FULL_WIDTH_ROW: '.ag-full-width-row',\n  COLS_CONTAINER: '.ag-center-cols-container',\n  HEADER: '.ag-header',\n  BODY_VIEWPORT: '.ag-body-viewport',\n};\n\ninterface ExperimentViewRunsTableAddColumnCTAProps {\n  onClick: () => void;\n  gridContainerElement: HTMLElement | null;\n  isInitialized: boolean;\n  visible?: boolean;\n  moreRunsAvailable?: boolean;\n  moreAvailableRunsTableColumnCount?: number;\n}\n\n/**\n * Component displaying dynamic table column with \"add metrics and parameters\" CTA.\n *\n * Sample usage:\n *\n * const [gridInitialized, setGridInitialized] = useState(false);\n *\n * return (\n *   <div ref={containerElement}>\n *     <AgGrid onGridReady={() => setGridInitialized(true)} {...} />\n *     <ExperimentViewRunsTableAddColumnCTA\n *       gridContainerElement={containerElement.current}\n *       isInitialized={gridInitialized}\n *       onAddColumnClicked={onAddColumnClicked}\n *       visible={!isLoading}\n *       moreAvailableRunsTableColumnCount={3}\n *     />\n *   </div>\n * );\n */\nexport const ExperimentViewRunsTableAddColumnCTA = ({\n  onClick,\n  gridContainerElement,\n  isInitialized,\n  visible,\n  moreRunsAvailable,\n  moreAvailableRunsTableColumnCount = 0,\n}: ExperimentViewRunsTableAddColumnCTAProps) => {\n  const ctaRef = useRef<HTMLDivElement>(null);\n\n  const savedContainerRef = useRef<HTMLElement>();\n  const immediateMoreRunsAvailable = useRef<boolean>(Boolean(moreRunsAvailable));\n\n  // Save immediate value of \"moreRunsAvailable\" so the fresh version\n  // will be accessible within the resize observer\n  useEffect(() => {\n    immediateMoreRunsAvailable.current = Boolean(moreRunsAvailable);\n  }, [moreRunsAvailable]);\n\n  const initialize = useCallback((containerElement: HTMLElement) => {\n    if (!ctaRef.current || !window.ResizeObserver || !containerElement) {\n      return undefined;\n    }\n\n    const targetElement = ctaRef.current;\n\n    /**\n     * On initialization, first gather all the agGrid sub-elements\n     */\n    const rootElement = containerElement.querySelector(AG_GRID_CLS.ROOT);\n    const refLeftElem = containerElement.querySelector(AG_GRID_CLS.LEFT_COLS_CONTAINER);\n    const refCenterElem = containerElement.querySelector(AG_GRID_CLS.COLS_CONTAINER);\n    const refHeaderElem = containerElement.querySelector(AG_GRID_CLS.HEADER);\n    const refBodyViewport = containerElement.querySelector(AG_GRID_CLS.BODY_VIEWPORT);\n\n    /**\n     * Initialize variables used for position calculation\n     */\n    let gridAreaWidth = 0;\n    let leftColContainerWidth = 0;\n    let leftColContainerHeight = 0;\n    let centerColContainerWidth = 0;\n    let colContainerHeight = 0;\n    let headerHeight = 0;\n\n    /**\n     * Execute only if all elements are in place\n     */\n    if (refLeftElem && refCenterElem && refHeaderElem && rootElement && refBodyViewport) {\n      /**\n       * Hook up an resize observer\n       */\n      const resizeObserver = new ResizeObserver((entries) => {\n        /**\n         * For every changed element, gather the exact dimensions\n         */\n        for (const entry of entries) {\n          if (entry.target === rootElement) {\n            gridAreaWidth = entry.contentRect.width;\n          }\n          if (entry.target === refLeftElem) {\n            leftColContainerWidth = entry.contentRect.width;\n            leftColContainerHeight = entry.contentRect.height;\n          }\n          if (entry.target === refBodyViewport) {\n            colContainerHeight = entry.contentRect.height;\n          }\n          if (entry.target === refHeaderElem) {\n            headerHeight = entry.contentRect.height;\n          }\n          if (entry.target === refCenterElem) {\n            centerColContainerWidth = entry.contentRect.width;\n          }\n        }\n\n        /**\n         * Our \"left\" position will be offset by column container widths\n         */\n        const calculatedLeft = leftColContainerWidth + centerColContainerWidth;\n\n        /**\n         * Our \"top\"  position will be offset by the header height\n         */\n        const calculatedTop = headerHeight;\n\n        /**\n         * If the column is out of viewport (expanding out of the root element),\n         * add proper CSS class to hide it\n         */\n        const isOutOfViewport = calculatedLeft + COLUMN_CTA_WIDTH >= gridAreaWidth;\n        isOutOfViewport\n          ? savedContainerRef.current?.classList.add(CLASS_OUT_OF_VIEWPORT)\n          : savedContainerRef.current?.classList.remove(CLASS_OUT_OF_VIEWPORT);\n\n        // Check if \"load more\" button is visible\n        const loadMoreRowHeight = immediateMoreRunsAvailable.current ? 32 : 0;\n\n        // If the visible row set takes only portion of the table height-wise (leftColContainerHeight < colContainerHeight),\n        // let's contract our CTA a little so \"load more\" button will fit in. If it takes whole area, do not reduce its height.\n        const calculatedHeight =\n          leftColContainerHeight < colContainerHeight ? leftColContainerHeight - loadMoreRowHeight : colContainerHeight;\n\n        /**\n         * If the available height is too low, add a class that indicates\n         * that we should display minimized version\n         */\n        const shouldBeMinimized = calculatedHeight < 100;\n        shouldBeMinimized\n          ? savedContainerRef.current?.classList.add(CLASS_IS_MINIMIZED)\n          : savedContainerRef.current?.classList.remove(CLASS_IS_MINIMIZED);\n\n        /**\n         * Finally, set proper values as CSS transform property. Use 3d transform\n         * to ensure hardware acceleration.\n         */\n        targetElement.style.transform = `translate3d(${calculatedLeft}px, ${calculatedTop}px, 0)`;\n\n        /**\n         * Set target height and add 1px to accomodate the border.\n         */\n        targetElement.style.height = `${calculatedHeight + 1}px`;\n      });\n\n      /**\n       * Setup observer with all the necessary elements.\n       */\n      resizeObserver.observe(refLeftElem);\n      resizeObserver.observe(refCenterElem);\n      resizeObserver.observe(refHeaderElem);\n      resizeObserver.observe(rootElement);\n      resizeObserver.observe(refBodyViewport);\n\n      /**\n       * After cleanup, disconnect the observer.\n       */\n      return () => resizeObserver.disconnect();\n    }\n    return undefined;\n  }, []);\n\n  useEffect(() => {\n    if (isInitialized && gridContainerElement) {\n      savedContainerRef.current = gridContainerElement;\n      initialize(gridContainerElement);\n    }\n  }, [initialize, isInitialized, gridContainerElement]);\n\n  /**\n   * This component works only if ResizeObserver is supported by the browser.\n   * If it's not supported, return nothing.\n   */\n  if (!window.ResizeObserver) {\n    return null;\n  }\n\n  return (\n    <div ref={ctaRef} css={styles.columnContainer} className={visible ? '' : CLASS_IS_HIDDEN}>\n      {visible && (\n        <div css={styles.buttonContainer}>\n          <Button\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewrunstableaddcolumncta.tsx_218\"\n            css={styles.button}\n            type=\"link\"\n            onClick={onClick}\n          >\n            <PlusCircleIcon css={styles.buttonIcon} />\n            <div css={styles.caption}>\n              <FormattedMessage\n                defaultMessage=\"Show more columns {count, select, 0 {} other {({count} total)}}\"\n                description=\"Label for a CTA button in experiment runs table which invokes column management dropdown\"\n                values={{\n                  count: moreAvailableRunsTableColumnCount,\n                }}\n              />\n            </div>\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst styles = {\n  columnContainer: (theme: Theme) => ({\n    width: COLUMN_CTA_WIDTH,\n    height: 0,\n    position: 'absolute' as const,\n    border: `1px solid ${theme.colors.borderDecorative}`,\n    borderTop: 0,\n    top: 0,\n    left: 0,\n    willChange: 'transform' as const,\n    transform: 'translate3d(0, 0, 0)',\n    [`.${CLASS_IS_MINIMIZED} &`]: {\n      display: 'flex',\n      alignItems: 'center' as const,\n    },\n    [`&.${CLASS_IS_HIDDEN}, .${CLASS_OUT_OF_VIEWPORT} &`]: {\n      display: 'none',\n    },\n    pointerEvents: 'none' as const,\n    display: 'flex',\n    alignItems: 'center',\n  }),\n  buttonContainer: (theme: Theme) => ({\n    top: 0,\n    paddingLeft: theme.spacing.lg,\n    paddingRight: theme.spacing.lg,\n    width: '100%',\n    [`.${CLASS_IS_MINIMIZED} &`]: {\n      paddingTop: theme.spacing.xs,\n    },\n    pointerEvents: 'all' as const,\n  }),\n  button: { whiteSpace: 'pre-wrap' as const, width: '100%' },\n  buttonIcon: (theme: Theme) => ({ color: theme.colors.textSecondary }),\n  caption: (theme: Theme) => ({\n    color: theme.colors.textSecondary,\n    [`.${CLASS_IS_MINIMIZED} &`]: {\n      display: 'none',\n    },\n  }),\n};\n","import { Spinner, Typography } from '@databricks/design-system';\nimport type { Theme } from '@emotion/react';\nimport { FormattedMessage } from 'react-intl';\n\ninterface ExperimentViewRunsTableStatusBarProps {\n  isLoading: boolean;\n  allRunsCount: number;\n}\n\n// Strongifies the i18n string, used in <FormattedMessage> below\nconst strong = (text: string) => <strong>{text}</strong>;\n\nexport const ExperimentViewRunsTableStatusBar = ({\n  isLoading,\n  allRunsCount,\n}: ExperimentViewRunsTableStatusBarProps) => (\n  <div css={styles.statusBar}>\n    <Typography.Text size=\"sm\" color={isLoading ? 'secondary' : undefined}>\n      <FormattedMessage\n        // eslint-disable-next-line max-len\n        defaultMessage=\"<strong>{length}</strong> matching {length, plural, =0 {runs} =1 {run} other {runs}}\"\n        // eslint-disable-next-line max-len\n        description=\"Message for displaying how many runs match search criteria on experiment page\"\n        values={{\n          strong,\n          length: allRunsCount,\n        }}\n      />\n    </Typography.Text>\n    {isLoading && <Spinner size=\"small\" />}\n  </div>\n);\n\nconst styles = {\n  statusBar: (theme: Theme) => ({\n    height: 28,\n    display: 'flex',\n    gap: 8,\n    marginTop: -1,\n    position: 'relative' as const,\n    alignItems: 'center',\n    borderTop: `1px solid ${theme.colors.border}`,\n  }),\n};\n","import React from 'react';\nimport { Button, CloseIcon, CopyIcon, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { CopyButton } from '../../shared/building_blocks/CopyButton';\n\nconst PREVIEW_SIDEBAR_WIDTH = 300;\n\n/**\n * Displays a sidebar helpful in expanding textual data in table components.\n * Will be replaced by DuBois standardized component in the future.\n */\nexport const PreviewSidebar = ({\n  content,\n  copyText,\n  headerText,\n  empty,\n  onClose,\n}: {\n  content?: React.ReactNode;\n  copyText?: string;\n  headerText?: string;\n  empty?: React.ReactNode;\n  onClose?: () => void;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <div\n      css={{\n        width: PREVIEW_SIDEBAR_WIDTH,\n        padding: theme.spacing.sm,\n        paddingRight: 0,\n        borderLeft: `1px solid ${theme.colors.borderDecorative}`,\n        overflow: 'hidden',\n        display: 'flex',\n        flexDirection: 'column',\n        height: '100%',\n      }}\n      data-testid=\"preview-sidebar-content\"\n    >\n      {content ? (\n        <>\n          <div\n            css={{\n              display: 'grid',\n              gridTemplateColumns: '1fr auto auto',\n              rowGap: theme.spacing.sm,\n              alignItems: 'flex-start',\n              flex: '0 0 auto',\n            }}\n          >\n            {headerText && (\n              <Typography.Title\n                level={4}\n                css={{\n                  overflowX: 'hidden',\n                  overflowY: 'auto',\n                  marginTop: theme.spacing.sm,\n                  marginRight: theme.spacing.xs,\n\n                  // Escape hatch if for some reason title is so long it would consume entire sidebar\n                  maxHeight: 200,\n                }}\n              >\n                {headerText}\n              </Typography.Title>\n            )}\n            {copyText && <CopyButton copyText={copyText} showLabel={false} icon={<CopyIcon />} />}\n            {onClose && (\n              <Button\n                componentId=\"codegen_mlflow_app_src_common_components_previewsidebar.tsx_67\"\n                type=\"primary\"\n                icon={<CloseIcon />}\n                onClick={onClose}\n              />\n            )}\n          </div>\n          <div\n            css={{\n              // Preserve original line breaks\n              whiteSpace: 'pre-wrap',\n              overflowY: 'auto',\n              flex: 1,\n            }}\n          >\n            {content}\n          </div>\n        </>\n      ) : (\n        <div css={{ marginTop: theme.spacing.md }}>{empty}</div>\n      )}\n    </div>\n  );\n};\n","import { GridApi, RowSelectedEvent, SelectionChangedEvent } from '@ag-grid-community/core';\nimport { useCallback, useRef } from 'react';\nimport { ExperimentPageViewState } from '../models/ExperimentPageViewState';\nimport { RunRowType } from '../utils/experimentPage.row-types';\nimport { uniqBy } from 'lodash';\n\n/**\n * Helper function that select particular run rows in the ag-grid.\n */\nconst agGridSelectRunRows = (runUuids: string[], isSelected: boolean, gridApi: GridApi) => {\n  gridApi.forEachNode((node) => {\n    if (node.data?.isLoadMoreRow) {\n      return;\n    }\n    const { runInfo, runDateAndNestInfo: childRunDateInfo } = node.data as RunRowType;\n\n    if (!runInfo) {\n      return;\n    }\n\n    const childrenRunUuid = runInfo.runUuid;\n    if (runUuids.includes(childrenRunUuid)) {\n      // If we found children being parents, mark their children\n      // to be selected as well.\n      if (childRunDateInfo?.childrenIds) {\n        runUuids.push(...childRunDateInfo.childrenIds);\n      }\n\n      node.setSelected(isSelected, false, true);\n    }\n  });\n};\n\n/**\n * Helper function that select particular group rows in the ag-grid.\n */\nconst agGridSelectGroupRows = (rowData: RunRowType[], gridApi: GridApi) => {\n  gridApi.forEachNode((node) => {\n    const data: RunRowType = node.data;\n    if (!data.groupParentInfo) {\n      return;\n    }\n\n    // If all runs belonging to the group are selected, select the group\n    if (data.groupParentInfo.runUuids.every((runUuid) => rowData.some((row) => row.runUuid === runUuid))) {\n      node.setSelected(true, false, true);\n    }\n\n    // If none of the runs belonging to the group are selected, deselect the group\n    if (!data.groupParentInfo.runUuids.some((runUuid) => rowData.some((row) => row.runUuid === runUuid))) {\n      node.setSelected(false, false, true);\n    }\n  });\n};\n\n/**\n * Returns handlers for row selection in the experiment runs table.\n * Supports groups, nested runs and regular flat hierarchy.\n */\nexport const useExperimentTableSelectRowHandler = (\n  updateViewState: (newPartialViewState: Partial<ExperimentPageViewState>) => void,\n) => {\n  const onSelectionChange = useCallback(\n    ({ api }: SelectionChangedEvent) => {\n      const selectedUUIDs: string[] = api\n        .getSelectedRows()\n        // Filter out \"load more\" and group rows\n        .filter((row) => row.runInfo)\n        .map(({ runInfo }) => runInfo.runUuid);\n      updateViewState({\n        runsSelected: selectedUUIDs.reduce((aggregate, curr) => ({ ...aggregate, [curr]: true }), {}),\n      });\n    },\n    [updateViewState],\n  );\n\n  const handleRowSelected = useCallback((event: RowSelectedEvent) => {\n    // Let's check if the actual number of selected rows have changed\n    // to avoid empty runs\n    const isSelected = Boolean(event.node.isSelected());\n\n    // We will continue only if the selected row has properly set runDateInfo\n    const { runDateAndNestInfo, runInfo, groupParentInfo } = event.data as RunRowType;\n\n    if (groupParentInfo) {\n      agGridSelectRunRows(groupParentInfo.runUuids, isSelected, event.api);\n    }\n\n    if (!runDateAndNestInfo) {\n      return;\n    }\n    const { isParent, expanderOpen, childrenIds } = runDateAndNestInfo;\n\n    // We will continue only if the selected row is a parent containing\n    // children and is actually expanded\n    if (isParent && expanderOpen && childrenIds) {\n      const childrenIdsToSelect = childrenIds;\n      agGridSelectRunRows(childrenIdsToSelect, isSelected, event.api);\n    } else if (runInfo) {\n      // If we are selecting a run row, we need to select other runs with the same UUID\n      agGridSelectRunRows([runInfo.runUuid], isSelected, event.api);\n\n      // Next, we need to (de)select the group row if all runs belonging to the group are (de)selected\n      const selectedRunRows = uniqBy(\n        event.api.getSelectedRows().filter((row) => Boolean(row.runUuid)),\n        'runUuid',\n      );\n      agGridSelectGroupRows(selectedRunRows, event.api);\n    }\n  }, []);\n\n  return { handleRowSelected, onSelectionChange };\n};\n","import { useCallback, useRef } from 'react';\nimport { useUpdateExperimentViewUIState } from '../contexts/ExperimentPageUIStateContext';\nimport { RUNS_VISIBILITY_MODE } from '../models/ExperimentPageUIState';\nimport type { RunRowType } from '../utils/experimentPage.row-types';\nimport { shouldEnableToggleIndividualRunsInGroups } from '../../../../common/utils/FeatureUtils';\n\nexport const useToggleRowVisibilityCallback = (tableRows: RunRowType[], useGroupedValuesInCharts = true) => {\n  const updateUIState = useUpdateExperimentViewUIState();\n\n  // We're going to use current state of the table rows to determine which rows are hidden.\n  // Since we're interested only in the latest data, we avoid using state here to avoid unnecessary re-renders.\n  const immediateTableRows = useRef(tableRows);\n  immediateTableRows.current = tableRows;\n\n  const toggleRowVisibility = useCallback(\n    (mode: RUNS_VISIBILITY_MODE, groupOrRunUuid?: string) => {\n      updateUIState((currentUIState) => {\n        if (mode === RUNS_VISIBILITY_MODE.SHOWALL) {\n          // Case #1: Showing all runs\n          return {\n            ...currentUIState,\n            runsHiddenMode: RUNS_VISIBILITY_MODE.SHOWALL,\n            runsHidden: [],\n          };\n        } else if (mode === RUNS_VISIBILITY_MODE.HIDEALL) {\n          // Case #2: Hiding all runs\n          return {\n            ...currentUIState,\n            runsHiddenMode: RUNS_VISIBILITY_MODE.HIDEALL,\n            runsHidden: [],\n          };\n        } else if (mode === RUNS_VISIBILITY_MODE.FIRST_10_RUNS) {\n          // Case #3: Showing only first 10 runs\n          return {\n            ...currentUIState,\n            runsHiddenMode: RUNS_VISIBILITY_MODE.FIRST_10_RUNS,\n            runsHidden: [],\n          };\n        } else if (mode === RUNS_VISIBILITY_MODE.FIRST_20_RUNS) {\n          // Case #4: Showing only first 20 runs\n          return {\n            ...currentUIState,\n            runsHiddenMode: RUNS_VISIBILITY_MODE.FIRST_20_RUNS,\n            runsHidden: [],\n          };\n        }\n\n        // Case #5: Custom visibility mode enabled by manually toggling visibility of a run or a group\n        if (groupOrRunUuid) {\n          // Determine which runs are hidden at the moment\n          const currentlyHiddenRows = immediateTableRows.current\n            .filter(({ hidden }) => hidden)\n            .map(({ groupParentInfo, rowUuid, runUuid }) => (groupParentInfo ? rowUuid : runUuid));\n\n          // Check if the toggles row is a run group\n          const currentToggledGroupInfo = immediateTableRows.current.find(\n            ({ rowUuid, groupParentInfo }) => rowUuid === groupOrRunUuid && groupParentInfo,\n          )?.groupParentInfo;\n\n          // If we're toggling a group and we're not using grouped values in charts,\n          // then toggle all runs in the group\n          if (\n            currentToggledGroupInfo &&\n            shouldEnableToggleIndividualRunsInGroups() &&\n            useGroupedValuesInCharts === false\n          ) {\n            let newHiddenRows: string[] = [];\n\n            // Depending on the current state of the group, we either show all runs or hide all runs\n            if (currentToggledGroupInfo.allRunsHidden) {\n              newHiddenRows = currentlyHiddenRows.filter(\n                (currentGroupOrRunUuid) => !currentToggledGroupInfo.runUuids.includes(currentGroupOrRunUuid),\n              );\n            } else {\n              newHiddenRows = currentlyHiddenRows.concat(\n                currentToggledGroupInfo.runUuids.filter((runUuid) => !currentlyHiddenRows.includes(runUuid)),\n              );\n            }\n            return {\n              ...currentUIState,\n              // Set mode to \"custom\"\n              runsHiddenMode: RUNS_VISIBILITY_MODE.CUSTOM,\n              runsHidden: newHiddenRows,\n            };\n          }\n\n          // Toggle visibility of a run/group by either adding or removing from the array\n          const newHiddenRows = currentlyHiddenRows.includes(groupOrRunUuid)\n            ? currentlyHiddenRows.filter((currentGroupOrRunUuid) => currentGroupOrRunUuid !== groupOrRunUuid)\n            : [...currentlyHiddenRows, groupOrRunUuid];\n\n          return {\n            ...currentUIState,\n            // Set mode to \"custom\"\n            runsHiddenMode: RUNS_VISIBILITY_MODE.CUSTOM,\n            runsHidden: newHiddenRows,\n          };\n        }\n\n        return currentUIState;\n      });\n    },\n    [updateUIState, useGroupedValuesInCharts],\n  );\n\n  return toggleRowVisibility;\n};\n","import type {\n  CellClickedEvent,\n  ColumnApi,\n  GridApi,\n  GridReadyEvent,\n  RowSelectedEvent,\n  SelectionChangedEvent,\n} from '@ag-grid-community/core';\nimport { Interpolation, Theme } from '@emotion/react';\nimport cx from 'classnames';\nimport React, { useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState } from 'react';\nimport { MLFlowAgGridLoader } from '../../../../../common/components/ag-grid/AgGridLoader';\nimport Utils from '../../../../../common/utils/Utils';\nimport {\n  ExperimentEntity,\n  UpdateExperimentViewStateFn,\n  RunDatasetWithTags,\n  ExperimentViewRunsCompareMode,\n} from '../../../../types';\n\nimport { isSearchFacetsFilterUsed } from '../../utils/experimentPage.fetch-utils';\nimport { ExperimentPageViewState } from '../../models/ExperimentPageViewState';\nimport {\n  EXPERIMENTS_DEFAULT_COLUMN_SETUP,\n  getFrameworkComponents,\n  getRowIsLoadMore,\n  getRowId,\n  useRunsColumnDefinitions,\n  getAdjustableAttributeColumns,\n} from '../../utils/experimentPage.column-utils';\nimport { makeCanonicalSortKey } from '../../utils/experimentPage.common-utils';\nimport { EXPERIMENT_RUNS_TABLE_ROW_HEIGHT } from '../../utils/experimentPage.common-utils';\nimport { RUNS_VISIBILITY_MODE } from '../../models/ExperimentPageUIState';\nimport { RunRowType } from '../../utils/experimentPage.row-types';\nimport { ExperimentRunsSelectorResult } from '../../utils/experimentRuns.selector';\nimport { createLoadMoreRow } from './cells/LoadMoreRowRenderer';\nimport { ExperimentViewRunsEmptyTable } from './ExperimentViewRunsEmptyTable';\nimport { ExperimentViewRunsTableAddColumnCTA } from './ExperimentViewRunsTableAddColumnCTA';\nimport { ExperimentViewRunsTableStatusBar } from './ExperimentViewRunsTableStatusBar';\nimport { shouldUseNewRunRowsVisibilityModel } from '../../../../../common/utils/FeatureUtils';\nimport { getDatasetsCellHeight } from './cells/DatasetsCellRenderer';\nimport { PreviewSidebar } from '../../../../../common/components/PreviewSidebar';\nimport { ATTRIBUTE_COLUMN_LABELS, COLUMN_TYPES } from '../../../../constants';\nimport { Empty, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport { useExperimentPageViewMode } from '../../hooks/useExperimentPageViewMode';\nimport { ExperimentPageUIState } from '../../models/ExperimentPageUIState';\nimport { useUpdateExperimentViewUIState } from '../../contexts/ExperimentPageUIStateContext';\nimport { useUpdateExperimentPageSearchFacets } from '../../hooks/useExperimentPageSearchFacets';\nimport {\n  createExperimentPageSearchFacetsState,\n  ExperimentPageSearchFacetsState,\n} from '../../models/ExperimentPageSearchFacetsState';\nimport { useExperimentTableSelectRowHandler } from '../../hooks/useExperimentTableSelectRowHandler';\nimport { useToggleRowVisibilityCallback } from '../../hooks/useToggleRowVisibilityCallback';\nimport { ExperimentViewRunsTableHeaderContextProvider } from './ExperimentViewRunsTableHeaderContext';\nimport {\n  ChartsTraceHighlightSource,\n  useRunsChartTraceHighlight,\n} from '../../../runs-charts/hooks/useRunsChartTraceHighlight';\nimport { useRunsHighlightTableRow } from '../../../runs-charts/hooks/useRunsHighlightTableRow';\n\nconst ROW_HEIGHT = 32;\nconst ROW_BUFFER = 101; // How many rows to keep rendered, even ones not visible\n\nexport interface ExperimentViewRunsTableProps {\n  /**\n   * Actual set of prepared row data to be rendered\n   */\n  rowsData: RunRowType[];\n\n  /**\n   * Helper data set with metric, param and tag keys\n   */\n  runsData: ExperimentRunsSelectorResult;\n\n  experiments: ExperimentEntity[];\n  searchFacetsState: ExperimentPageSearchFacetsState;\n  viewState: ExperimentPageViewState;\n  updateViewState: UpdateExperimentViewStateFn;\n  isLoading: boolean;\n  moreRunsAvailable: boolean;\n  onAddColumnClicked: () => void;\n  loadMoreRunsFunc: () => void;\n  onDatasetSelected?: (dataset: RunDatasetWithTags, run: RunRowType) => void;\n  expandRows: boolean;\n  uiState: ExperimentPageUIState;\n  compareRunsMode: ExperimentViewRunsCompareMode;\n}\n\nexport const ExperimentViewRunsTable = React.memo(\n  // eslint-disable-next-line complexity\n  ({\n    experiments,\n    searchFacetsState,\n    runsData,\n    isLoading,\n    moreRunsAvailable,\n    updateViewState,\n    onAddColumnClicked,\n    rowsData,\n    loadMoreRunsFunc,\n    onDatasetSelected,\n    expandRows,\n    viewState,\n    uiState,\n    compareRunsMode,\n  }: ExperimentViewRunsTableProps) => {\n    const { theme } = useDesignSystemTheme();\n    const updateUIState = useUpdateExperimentViewUIState();\n    const setUrlSearchFacets = useUpdateExperimentPageSearchFacets();\n\n    const { orderByKey, orderByAsc } = searchFacetsState;\n\n    // If using new view state model, get column and run info from `uiState` instead of `searchFacetsState`\n    const { selectedColumns, runsPinned, runsHidden, runListHidden } = uiState;\n\n    const updateRunListHidden = useCallback(\n      (value: boolean) => {\n        updateUIState((state) => ({ ...state, runListHidden: value }));\n      },\n      [updateUIState],\n    );\n\n    const isComparingRuns = compareRunsMode !== 'TABLE';\n\n    const { paramKeyList, metricKeyList, tagsList } = runsData;\n\n    const [gridApi, setGridApi] = useState<GridApi>();\n    const [columnApi, setColumnApi] = useState<ColumnApi>();\n    const prevSelectRunUuids = useRef<string[]>([]);\n\n    const filteredTagKeys = useMemo(() => Utils.getVisibleTagKeyList(tagsList), [tagsList]);\n\n    const containerElement = useRef<HTMLDivElement>(null);\n    // Flag indicating if there are any rows that can be expanded\n    const expandersVisible = useMemo(() => rowsData.some((row) => row.runDateAndNestInfo?.hasExpander), [rowsData]);\n\n    const toggleRowExpanded = useCallback(\n      (parentId: string) =>\n        updateUIState(({ runsExpanded: currentRunsExpanded, ...state }: ExperimentPageUIState) => ({\n          ...state,\n          runsExpanded: { ...currentRunsExpanded, [parentId]: !currentRunsExpanded[parentId] },\n        })),\n      [updateUIState],\n    );\n\n    const togglePinnedRow = useCallback(\n      (uuid: string) => {\n        updateUIState((existingFacets: ExperimentPageUIState) => ({\n          ...existingFacets,\n          runsPinned: !existingFacets.runsPinned.includes(uuid)\n            ? [...existingFacets.runsPinned, uuid]\n            : existingFacets.runsPinned.filter((r) => r !== uuid),\n        }));\n      },\n      [updateUIState],\n    );\n\n    // A modern version of row visibility toggle function, supports \"show all\", \"show first n runs\" options\n    const toggleRowVisibilityV2 = useToggleRowVisibilityCallback(rowsData, uiState.useGroupedValuesInCharts);\n\n    // This callback toggles visibility of runs: either all of them or a particular one\n    // TODO: remove after new run row visibility model is rolled out completely\n    const toggleRowVisibilityV1 = useCallback(\n      // `runUuidOrToggle` param can be a run ID or a keyword value indicating that all/none should be hidden\n      (runUuidOrToggle: string) => {\n        updateUIState((existingFacets: ExperimentPageUIState) => {\n          if (runUuidOrToggle === RUNS_VISIBILITY_MODE.SHOWALL) {\n            // Case #1: Showing all runs by clearing `runsHidden` array\n            return {\n              ...existingFacets,\n              runsHidden: [],\n            };\n          } else if (runUuidOrToggle === RUNS_VISIBILITY_MODE.HIDEALL) {\n            // Case #2: Hiding all runs by fully populating `runsHidden` array\n            return {\n              ...existingFacets,\n              runsHidden: runsData.runInfos.map(({ runUuid }) => runUuid),\n            };\n          }\n\n          // Case #3: toggling particular run\n          const uuid = runUuidOrToggle;\n          return {\n            ...existingFacets,\n            runsHidden: !existingFacets.runsHidden.includes(uuid)\n              ? [...existingFacets.runsHidden, uuid]\n              : existingFacets.runsHidden.filter((r) => r !== uuid),\n          };\n        });\n      },\n      [updateUIState, runsData],\n    );\n\n    // Determine toggle version to use based on the feature flag\n    const toggleRowVisibility = shouldUseNewRunRowsVisibilityModel() ? toggleRowVisibilityV2 : toggleRowVisibilityV1;\n\n    const gridReadyHandler = useCallback((params: GridReadyEvent) => {\n      setGridApi(params.api);\n      setColumnApi(params.columnApi);\n    }, []);\n\n    const { handleRowSelected, onSelectionChange } = useExperimentTableSelectRowHandler(updateViewState);\n\n    const allRunsHidden = runsData.runInfos.every(({ runUuid }) => runsHidden.includes(runUuid));\n\n    const columnDefs = useRunsColumnDefinitions({\n      selectedColumns,\n      onExpand: toggleRowExpanded,\n      compareExperiments: experiments.length > 1,\n      onTogglePin: togglePinnedRow,\n      onToggleVisibility: toggleRowVisibility,\n      metricKeyList,\n      paramKeyList,\n      tagKeyList: filteredTagKeys,\n      columnApi,\n      isComparingRuns,\n      onDatasetSelected,\n      expandRows,\n      allRunsHidden,\n      runsHiddenMode: uiState.runsHiddenMode,\n    });\n\n    const gridSizeHandler = useCallback(\n      (api: GridApi) => {\n        if (api && isComparingRuns) {\n          api.sizeColumnsToFit();\n        }\n      },\n      [isComparingRuns],\n    );\n\n    useEffect(() => {\n      if (!gridApi) {\n        return;\n      }\n\n      if (isLoading) {\n        gridApi.showLoadingOverlay();\n      } else {\n        gridApi.hideOverlay();\n\n        // If there are more runs available in the API, append\n        // additional special row that will display \"Load more\" button\n        if (rowsData.length && moreRunsAvailable) {\n          gridApi.setRowData([...rowsData, createLoadMoreRow()]);\n          gridSizeHandler(gridApi);\n          return;\n        }\n\n        gridApi.setRowData(rowsData);\n        gridSizeHandler(gridApi);\n      }\n    }, [gridApi, rowsData, isLoading, moreRunsAvailable, loadMoreRunsFunc, gridSizeHandler]);\n\n    // Count all columns available for selection\n    const allAvailableColumnsCount = useMemo(() => {\n      const attributeColumnCount = getAdjustableAttributeColumns(experiments.length > 1).length;\n\n      const valuesColumnCount = metricKeyList.length + paramKeyList.length + filteredTagKeys.length;\n\n      return attributeColumnCount + valuesColumnCount;\n    }, [experiments.length, filteredTagKeys.length, metricKeyList.length, paramKeyList.length]);\n\n    const hasSelectedAllColumns = selectedColumns.length >= allAvailableColumnsCount;\n\n    const moreAvailableRunsTableColumnCount = Math.max(0, allAvailableColumnsCount - selectedColumns.length);\n\n    const allRunsCount = useMemo(\n      () =>\n        runsData.runInfos.filter(\n          (r) => runsPinned.includes(r.runUuid) || runsData.runUuidsMatchingFilter.includes(r.runUuid),\n        ).length,\n      [runsData, runsPinned],\n    );\n\n    useLayoutEffect(() => {\n      if (!gridApi) {\n        return;\n      }\n      // Each time we switch to \"compare runs\" mode, we should\n      // maximize columns so \"run name\" column will take up all remaining space\n      if (isComparingRuns) {\n        // Selection feature is not supported in compare runs mode so we should deselect all\n        gridApi.deselectAll();\n        gridApi.sizeColumnsToFit();\n      }\n      gridApi.resetRowHeights();\n    }, [gridApi, isComparingRuns]);\n\n    /**\n     * Function used by ag-grid to calculate each row's height.\n     * In this case, it's based on a datasets cell size.\n     */\n\n    const rowHeightGetterFn = useCallback(\n      // if is comparing runs, use the default row height\n      (row: { data: RunRowType }) => {\n        if (isComparingRuns || !expandRows) {\n          return EXPERIMENT_RUNS_TABLE_ROW_HEIGHT;\n        }\n        const datasetColumnId = makeCanonicalSortKey(COLUMN_TYPES.ATTRIBUTES, ATTRIBUTE_COLUMN_LABELS.DATASET);\n        const datasetColumnShown = selectedColumns.includes(datasetColumnId);\n        // if not comparing runs, use the datasets cell height\n        return getDatasetsCellHeight(datasetColumnShown, row);\n      },\n      [selectedColumns, isComparingRuns, expandRows],\n    );\n\n    useEffect(() => {\n      // Enabling certain columns (datasets) will change our row height calculation,\n      // let's recalculate them\n      gridApi?.resetRowHeights();\n    }, [gridApi, selectedColumns, expandRows]);\n\n    const [sidebarPreviewData, setSidebarPreviewData] = useState<{\n      value: string;\n      header: string;\n    } | null>(null);\n\n    const handleCellClicked = useCallback(\n      ({ column, data, value }: CellClickedEvent) => {\n        const columnGroupId = column.getParent()?.getGroupId();\n        const shouldInvokePreviewSidebar =\n          columnGroupId === COLUMN_TYPES.METRICS || columnGroupId === COLUMN_TYPES.PARAMS;\n\n        if (shouldInvokePreviewSidebar) {\n          setSidebarPreviewData({\n            value,\n            header: `Run name: ${data.runName}, Column name: ${column.getColId()}`,\n          });\n          updateViewState({ previewPaneVisible: true });\n        }\n      },\n      [updateViewState],\n    );\n\n    const displayAddColumnsCTA = !hasSelectedAllColumns && !isComparingRuns && rowsData.length > 0;\n    const displayPreviewSidebar = !isComparingRuns && viewState.previewPaneVisible;\n    const displayRunsTable = !runListHidden || !isComparingRuns;\n    const displayStatusBar = !runListHidden;\n    const displayEmptyState = rowsData.length < 1 && !isLoading && !runListHidden;\n\n    const tableContext = useMemo(() => ({ orderByAsc, orderByKey }), [orderByAsc, orderByKey]);\n\n    const { cellMouseOverHandler, cellMouseOutHandler } = useRunsHighlightTableRow(containerElement);\n\n    return (\n      <div\n        css={(theme) => ({\n          display: 'grid',\n          flex: 1,\n          gridTemplateColumns: displayPreviewSidebar ? '1fr auto' : '1fr',\n          borderTop: `1px solid ${theme.colors.border}`,\n        })}\n        className={isComparingRuns && shouldUseNewRunRowsVisibilityModel() ? 'is-table-comparing-runs-mode' : undefined}\n      >\n        <div\n          css={{\n            display: 'flex',\n            flexDirection: 'column',\n            position: 'relative',\n          }}\n        >\n          <div\n            ref={containerElement}\n            className={cx('ag-theme-balham ag-grid-sticky', {\n              'ag-grid-expanders-visible': expandersVisible,\n              'is-table-comparing-runs-mode': isComparingRuns && shouldUseNewRunRowsVisibilityModel(),\n            })}\n            css={[styles.agGridOverrides(theme), { display: displayRunsTable ? 'block' : 'hidden', height: '100%' }]}\n            aria-hidden={!displayRunsTable}\n          >\n            <ExperimentViewRunsTableHeaderContextProvider\n              runsHiddenMode={uiState.runsHiddenMode}\n              useGroupedValuesInCharts={Boolean(uiState.groupBy) && uiState.useGroupedValuesInCharts}\n            >\n              <MLFlowAgGridLoader\n                context={tableContext}\n                defaultColDef={EXPERIMENTS_DEFAULT_COLUMN_SETUP}\n                columnDefs={columnDefs}\n                rowSelection=\"multiple\"\n                onGridReady={gridReadyHandler}\n                onSelectionChanged={onSelectionChange}\n                getRowHeight={rowHeightGetterFn}\n                headerHeight={EXPERIMENT_RUNS_TABLE_ROW_HEIGHT}\n                onRowSelected={handleRowSelected}\n                suppressRowClickSelection\n                suppressColumnMoveAnimation\n                suppressScrollOnNewData\n                isFullWidthRow={getRowIsLoadMore}\n                fullWidthCellRenderer=\"LoadMoreRowRenderer\"\n                fullWidthCellRendererParams={{ loadMoreRunsFunc }}\n                suppressFieldDotNotation\n                enableCellTextSelection\n                components={getFrameworkComponents()}\n                suppressNoRowsOverlay\n                loadingOverlayComponent=\"loadingOverlayComponent\"\n                loadingOverlayComponentParams={{ showImmediately: true }}\n                getRowId={getRowId}\n                rowBuffer={ROW_BUFFER}\n                onCellClicked={handleCellClicked}\n                onGridSizeChanged={({ api }) => gridSizeHandler(api)}\n                onCellMouseOver={cellMouseOverHandler}\n                onCellMouseOut={cellMouseOutHandler}\n              />\n            </ExperimentViewRunsTableHeaderContextProvider>\n            {displayAddColumnsCTA && (\n              <ExperimentViewRunsTableAddColumnCTA\n                gridContainerElement={containerElement.current}\n                isInitialized={Boolean(gridApi)}\n                onClick={onAddColumnClicked}\n                visible={!isLoading}\n                moreRunsAvailable={moreRunsAvailable}\n                moreAvailableRunsTableColumnCount={moreAvailableRunsTableColumnCount}\n              />\n            )}\n          </div>\n          {displayEmptyState && (\n            <ExperimentViewRunsEmptyTable\n              onClearFilters={() => {\n                setUrlSearchFacets(createExperimentPageSearchFacetsState());\n              }}\n              isFiltered={isSearchFacetsFilterUsed(searchFacetsState)}\n            />\n          )}\n          {displayStatusBar && <ExperimentViewRunsTableStatusBar allRunsCount={allRunsCount} isLoading={isLoading} />}\n        </div>\n        {displayPreviewSidebar && (\n          <PreviewSidebar\n            content={sidebarPreviewData?.value}\n            copyText={sidebarPreviewData?.value}\n            headerText={sidebarPreviewData?.header}\n            onClose={() => updateViewState({ previewPaneVisible: false })}\n            empty={\n              <Empty\n                description={\n                  <FormattedMessage\n                    defaultMessage=\"Select a cell to display preview\"\n                    description=\"Experiment page > table view > preview sidebar > nothing selected\"\n                  />\n                }\n              />\n            }\n          />\n        )}\n      </div>\n    );\n  },\n);\n\n/**\n * Concrete named definitions for colors used in this agGrid\n */\nconst getGridColors = (theme: Theme) => ({\n  rowForeground: theme.colors.textPrimary, // regular row background\n  rowBackground: theme.colors.backgroundPrimary, // regular row background\n  rowBackgroundHover: theme.colors.tableBackgroundUnselectedHover,\n  rowBackgroundSelected: theme.colors.tableBackgroundSelectedDefault,\n  rowBackgroundHoverSelected: theme.colors.tableBackgroundSelectedHover,\n  columnSortedBy: `${theme.colors.blue400}1F`,\n  headerBackground: theme.colors.backgroundSecondary,\n  headerTextColor: theme.colors.textSecondary, // directly from Figma design\n  headerGroupTextColor: theme.colors.textSecondary, // directly from Figma design\n  borderColor: theme.colors.borderDecorative, // border between header and content and scrollable areas\n  headerBorderColor: 'transparent', // borders inside the header\n  checkboxBorderColor: theme.colors.actionDefaultBorderDefault,\n  checkboxBorderColorChecked: theme.colors.backgroundPrimary,\n  checkboxBackgroundColorChecked: theme.colors.actionPrimaryBackgroundDefault,\n  overlayBackground: `${theme.colors.backgroundSecondary}99`, // color for the loading overlay\n});\n\nconst styles = {\n  agGridOverrides: (theme: Theme): Interpolation<Theme> => {\n    const gridColors = getGridColors(theme);\n    return {\n      height: '100%',\n      position: 'relative',\n      '&.ag-theme-balham': {\n        // Set up internal variable values\n        '--ag-border-color': gridColors.borderColor,\n        '--ag-row-border-color': gridColors.borderColor,\n        '--ag-foreground-color': gridColors.rowForeground,\n        '--ag-background-color': gridColors.rowBackground,\n        '--ag-odd-row-background-color': gridColors.rowBackground,\n        '--ag-row-hover-color': gridColors.rowBackgroundHover,\n        '--ag-selected-row-background-color': gridColors.rowBackgroundSelected,\n        '--ag-header-foreground-color': gridColors.headerTextColor,\n        '--ag-header-background-color': gridColors.headerBackground,\n        '--ag-modal-overlay-background-color': gridColors.overlayBackground,\n\n        // Makes row header sticky\n        '&.ag-grid-sticky .ag-header': {\n          position: 'sticky',\n          top: 0,\n          zIndex: 1,\n        },\n        '&.ag-grid-sticky .ag-root': {\n          overflow: 'visible',\n        },\n        '&.ag-grid-sticky .ag-root-wrapper': {\n          border: '0',\n          borderRadius: '4px',\n          overflow: 'visible',\n        },\n\n        // Adds a static line between column group header row and column headers\n        '.ag-header::after': {\n          content: '\"\"',\n          position: 'absolute',\n          top: EXPERIMENT_RUNS_TABLE_ROW_HEIGHT,\n          left: 0,\n          right: 0,\n          height: 1,\n          backgroundColor: gridColors.borderColor,\n        },\n\n        // Line height for cell contents is the row height minus the border\n        '.ag-cell': {\n          // lineHeight: `min(var(--ag-line-height, ${ROW_HEIGHT - 2}px), ${ROW_HEIGHT - 2}px)`,\n          display: 'flex',\n          overflow: 'hidden',\n          '& > .ag-cell-wrapper': {\n            overflow: 'hidden',\n          },\n        },\n\n        // Padding fixes for the header (we use custom component)\n        '.ag-header-cell': {\n          padding: 0,\n        },\n        '.ag-header-cell .ag-checkbox': {\n          padding: '0 7px',\n          borderLeft: '1px solid transparent', // to match it with the cell sizing\n        },\n\n        '.ag-cell.is-ordered-by, .ag-header-cell > .is-ordered-by': {\n          backgroundColor: gridColors.columnSortedBy,\n        },\n        '.ag-header-row': {\n          '--ag-border-color': gridColors.headerBorderColor,\n        },\n        '.ag-header-row.ag-header-row-column-group': {\n          '--ag-header-foreground-color': gridColors.headerGroupTextColor,\n        },\n        '.ag-row.ag-row-selected.ag-row-hover': {\n          backgroundColor: gridColors.rowBackgroundHoverSelected,\n        },\n        '.ag-row.is-highlighted': {\n          backgroundColor: gridColors.rowBackgroundHoverSelected,\n        },\n        // Hides resize guidelines when header is not hovered\n        '.ag-header:not(:hover) .ag-header-cell::after, .ag-header:not(:hover) .ag-header-group-cell::after': {\n          opacity: 0,\n        },\n        '.ag-pinned-left-header': {\n          borderRight: 'none',\n        },\n\n        // Fixed for loading overlay, should be above \"load more\" button\n        '.ag-overlay-loading-wrapper': {\n          paddingTop: theme.spacing.md * 4,\n          alignItems: 'center',\n          zIndex: 2,\n        },\n        '.ag-overlay-loading-wrapper .ag-react-container': {\n          flex: 1,\n        },\n\n        // Adds border after the last column to separate contents from \"Add columns\" CTA\n        '.ag-center-cols-container': {\n          minHeight: 0,\n        },\n\n        '.ag-full-width-row': {\n          borderBottom: 0,\n          backgroundColor: 'transparent',\n          zIndex: 1,\n          '&.ag-row-hover': {\n            backgroundColor: 'transparent',\n          },\n        },\n\n        // Centers vertically and styles the checkbox cell\n        '.is-checkbox-cell': {\n          display: 'flex',\n          alignItems: 'center',\n          paddingLeft: 7, // will end up in 8px due to 1px of transparent border on the left\n          '.is-multiline-cell .ag-cell-value': {\n            height: '100%',\n          },\n        },\n\n        // Change appearance of the previewable cells\n        '.is-previewable-cell': {\n          cursor: 'pointer',\n        },\n\n        // Header checkbox cell will get the same background as header only if it's unchecked\n        '.ag-header-cell .ag-checkbox .ag-input-wrapper:not(.ag-indeterminate):not(.ag-checked)': {\n          '--ag-checkbox-background-color': gridColors.headerBackground,\n        },\n\n        // Distance from the checkbox to other icons (pin, visibility etc.)\n        '.ag-cell-wrapper .ag-selection-checkbox': {\n          marginRight: 20,\n        },\n\n        // Header and cell checkboxes will get same colors from the palette\n        '.is-checkbox-cell, .ag-header-cell .ag-checkbox': {\n          '.ag-checkbox-input-wrapper::after': {\n            color: gridColors.checkboxBorderColor,\n          },\n          '.ag-checkbox-input-wrapper.ag-checked': {\n            '--ag-checkbox-background-color': gridColors.checkboxBackgroundColorChecked,\n            '--ag-checkbox-checked-color': gridColors.checkboxBorderColorChecked,\n            '&::after': {\n              color: gridColors.checkboxBorderColorChecked,\n            },\n          },\n        },\n      },\n    };\n  },\n};\n","import { type RefObject, useCallback, useEffect } from 'react';\nimport { ChartsTraceHighlightSource, useRunsChartTraceHighlight } from './useRunsChartTraceHighlight';\nimport { CellMouseOverEvent } from '@ag-grid-community/core';\n\nconst DEFAULT_HIGH_LIGHT_CLASS_NAME = 'is-highlighted';\n\n/**\n * Helper hook adding support for useRunsChartTraceSetHighlight() logic to a ag-grid table rows\n */\nexport const useRunsHighlightTableRow = (\n  /**\n   * Reference to the container element of the table.\n   */\n  containerElementRef: RefObject<HTMLDivElement>,\n  /**\n   * Class name to be added to the highlighted row.\n   */\n  highlightedClassName = DEFAULT_HIGH_LIGHT_CLASS_NAME,\n) => {\n  const { onHighlightChange, highlightDataTrace } = useRunsChartTraceHighlight();\n  /**\n   * Listener function that highlights a row in the table by adding a class to it.\n   */\n  const highlightFn = useCallback(\n    (rowUuid: string | null, source?: ChartsTraceHighlightSource) => {\n      // First, quickly remove the highlight class from the previous highlighted row\n      const existingHighlightedRowElement = containerElementRef.current?.querySelector(`.${highlightedClassName}`);\n\n      // Find the new row element and add the highlight class to it\n      const rowElement = containerElementRef.current?.querySelector(`.ag-row[row-id=\"${rowUuid}\"]`);\n      if (existingHighlightedRowElement && existingHighlightedRowElement !== rowElement) {\n        existingHighlightedRowElement.classList.remove(highlightedClassName);\n      }\n\n      // Do not highlight the row if the source of highlight event is the table itself\n      if (source === ChartsTraceHighlightSource.TABLE) {\n        return;\n      }\n\n      rowElement && rowElement.classList.add(highlightedClassName);\n    },\n    [containerElementRef, highlightedClassName],\n  );\n\n  // Subscribe to the highlight change event\n  useEffect(() => onHighlightChange(highlightFn), [highlightFn, onHighlightChange]);\n\n  // Create event handlers for table cell mouse over and out events\n  const cellMouseOverHandler = useCallback(\n    ({ data }: CellMouseOverEvent) => {\n      const isGroupRow = 'groupParentInfo' in data;\n      // Extract the trace UUID from the data\n      // Use runUuid for non-group rows and rowUuid for group rows\n      const dataTraceUuid = isGroupRow ? data.rowUuid : data.runUuid;\n\n      highlightDataTrace(dataTraceUuid, {\n        source: ChartsTraceHighlightSource.TABLE,\n      });\n    },\n    [highlightDataTrace],\n  );\n\n  const cellMouseOutHandler = useCallback(() => highlightDataTrace(null), [highlightDataTrace]);\n\n  return { cellMouseOverHandler, cellMouseOutHandler };\n};\n","/**\n * Defines non-persistable, local state that\n * controls visibility of various UI elements in the\n * runs table and controls\n */\nexport class ExperimentPageViewState {\n  /**\n   * Currently selected runs\n   */\n  runsSelected: Record<string, boolean> = {};\n\n  /**\n   * Currently hidden, selected child runs\n   */\n  hiddenChildRunsSelected: Record<string, boolean> = {};\n\n  /**\n   * Display \"select columns\" dropdown\n   */\n  columnSelectorVisible = false;\n\n  /**\n   * Display \"select columns\" dropdown\n   */\n  previewPaneVisible = false;\n\n  /**\n   * Persists controls state in the evaluation artifact compare mode\n   */\n  artifactViewState: {\n    selectedTables?: string[];\n    groupByCols?: string[];\n    outputColumn?: string;\n    intersectingOnly?: boolean;\n  } = {\n    selectedTables: [],\n    groupByCols: [],\n    outputColumn: '',\n    intersectingOnly: false,\n  };\n}\n","import type { NotificationInstance } from '@databricks/design-system';\nimport { useCallback } from 'react';\nimport { useIntl } from 'react-intl';\nimport type { RunEntity, RunInfoEntity } from '../../../types';\nimport { EXPERIMENT_PARENT_ID_TAG } from '../utils/experimentPage.common-utils';\n\nconst FETCHED_RUN_NOTIFICATION_DURATION = 3; // Seconds\nconst FETCHED_RUN_NOTIFICATION_KEY = 'FETCHED_RUN_NOTIFICATION_KEY';\n\nconst countFetchedRuns = (fetchedRuns: RunEntity[], existingRunInfos: RunInfoEntity[] = []) => {\n  // Extract only runs that are not loaded yet\n  const newRuns = fetchedRuns.filter((r) => !existingRunInfos.some((x) => x.runUuid === r.info.runUuid));\n\n  // Next, extract runs containing non-empty \"parentRunId\" tag\n  const runsWithParent = newRuns.filter((run: any) => {\n    const runTagsList = run?.data?.tags;\n    return (\n      Array.isArray(runTagsList) &&\n      runTagsList.some((tag) => tag.key === EXPERIMENT_PARENT_ID_TAG && Boolean(tag.value))\n    );\n  });\n\n  // Return counts of both all runs and those with parent\n  return {\n    allRuns: newRuns.length,\n    childRuns: runsWithParent.length,\n  };\n};\n\nexport const useFetchedRunsNotification = (notification: NotificationInstance) => {\n  const { formatMessage } = useIntl();\n\n  // Creates the localized message based on the returned run count\n  const getMessage = useCallback(\n    (allRuns: number, childRuns: number) => {\n      // Returned when only child runs are loaded\n      if (allRuns === childRuns) {\n        return formatMessage(\n          {\n            defaultMessage: 'Loaded {childRuns} child {childRuns, plural, =1 {run} other {runs}}',\n            description: 'Experiment page > loaded more runs notification > loaded only child runs',\n          },\n          { childRuns: childRuns },\n        );\n      }\n\n      // Returned when we fetch both regular (parent) and child runs\n      return formatMessage(\n        {\n          defaultMessage:\n            // eslint-disable-next-line formatjs/no-multiple-plurals\n            'Loaded {allRuns} {allRuns, plural, =1 {run} other {runs}}, including {childRuns} child {childRuns, plural, =1 {run} other {runs}}',\n          description: 'Experiment page > loaded more runs notification > loaded both parent and child runs',\n        },\n        { allRuns, childRuns: childRuns },\n      );\n    },\n    [formatMessage],\n  );\n\n  return useCallback(\n    (fetchedRuns: RunEntity[], existingRunInfos: RunInfoEntity[]) => {\n      if (Array.isArray(fetchedRuns)) {\n        // Get counted runs\n        const { allRuns, childRuns } = countFetchedRuns(fetchedRuns, existingRunInfos);\n\n        // Display notification only if there are any new child runs\n        if (childRuns < 1) {\n          return;\n        }\n\n        // If there is a similar notification visible already, close it first\n        // to avoid confusion due to multiple displayed notification elements\n        notification.close(FETCHED_RUN_NOTIFICATION_KEY);\n\n        // Display the notification\n        notification.info({\n          message: getMessage(allRuns, childRuns),\n          duration: FETCHED_RUN_NOTIFICATION_DURATION,\n          placement: 'bottomRight',\n          key: FETCHED_RUN_NOTIFICATION_KEY,\n        });\n      }\n    },\n    [notification, getMessage],\n  );\n};\n","import { useCallback, useEffect, useRef, useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { UseEvaluationArtifactTableDataResult } from './useEvaluationArtifactTableData';\nimport { useDispatch } from 'react-redux';\nimport { ThunkDispatch } from '../../../../redux-types';\nimport {\n  compilePromptInputText,\n  extractEvaluationPrerequisitesForRun,\n  extractPromptInputVariables,\n} from '../../prompt-engineering/PromptEngineering.utils';\nimport { RunRowType } from '../../experiment-page/utils/experimentPage.row-types';\nimport { evaluatePromptTableValue } from '../../../actions/PromptEngineeringActions';\nimport Utils from '../../../../common/utils/Utils';\nimport { getPromptEngineeringErrorMessage } from '../utils/PromptEngineeringErrorUtils';\n\n/**\n * Local utilility function, confirms if all param values\n * are provided for a particular evaluation table data row.\n */\nconst containsAllParamValuesForRow = (row: UseEvaluationArtifactTableDataResult[0], requiredInputs: string[]) => {\n  const missingInputParams = requiredInputs.filter((requiredInput) => !row.groupByCellValues[requiredInput]);\n\n  return missingInputParams.length === 0;\n};\n\n/**\n * A hook containing complete toolset supporting \"Evaluate all\" button\n */\nexport const useEvaluateAllRows = (evaluationTableData: UseEvaluationArtifactTableDataResult, outputColumn: string) => {\n  const currentTableData = useRef<UseEvaluationArtifactTableDataResult>(evaluationTableData);\n  const currentRunsBeingEvaluated = useRef<string[]>([]);\n  const intl = useIntl();\n\n  useEffect(() => {\n    currentTableData.current = evaluationTableData;\n  }, [evaluationTableData]);\n\n  const [runColumnsBeingEvaluated, setEvaluatedRuns] = useState<string[]>([]);\n\n  useEffect(() => {\n    currentRunsBeingEvaluated.current = runColumnsBeingEvaluated;\n  }, [runColumnsBeingEvaluated]);\n\n  const dispatch = useDispatch<ThunkDispatch>();\n\n  // Processes single run's evaluation queue.\n  const processQueueForRun = useCallback(\n    (run: RunRowType) => {\n      const tableData = currentTableData.current;\n      const { parameters, promptTemplate, routeName, routeType } = extractEvaluationPrerequisitesForRun(run);\n\n      if (!promptTemplate) {\n        return;\n      }\n\n      const requiredInputs = extractPromptInputVariables(promptTemplate);\n\n      // Try to find the next row in the table that can be evaluated for a particular table\n      const nextEvaluableRow = tableData.find(\n        (tableRow) => !tableRow.cellValues[run.runUuid] && containsAllParamValuesForRow(tableRow, requiredInputs),\n      );\n\n      // If there's no row, close the queue and return\n      if (!nextEvaluableRow) {\n        setEvaluatedRuns((runs) => runs.filter((existingRunUuid) => existingRunUuid !== run.runUuid));\n        return;\n      }\n      const rowKey = nextEvaluableRow.key;\n      const inputValues = nextEvaluableRow.groupByCellValues;\n\n      if (!promptTemplate) {\n        return;\n      }\n\n      const compiledPrompt = compilePromptInputText(promptTemplate, inputValues);\n\n      if (routeName) {\n        dispatch(\n          evaluatePromptTableValue({\n            routeName,\n            routeType,\n            compiledPrompt,\n            inputValues,\n            outputColumn,\n            rowKey,\n            parameters,\n            run,\n          }),\n        )\n          .then(() => {\n            // If the current queue for the run is still active, continue with processing\n            if (currentRunsBeingEvaluated.current.includes(run.runUuid)) {\n              processQueueForRun(run);\n            }\n          })\n          .catch((e) => {\n            const errorMessage = getPromptEngineeringErrorMessage(e);\n\n            // In case of error, notify the user and close the queue\n            const wrappedMessage = intl.formatMessage(\n              {\n                defaultMessage: 'Gateway returned the following error: \"{errorMessage}\"',\n                description: 'Experiment page > gateway error message',\n              },\n              {\n                errorMessage,\n              },\n            );\n            Utils.logErrorAndNotifyUser(wrappedMessage);\n            setEvaluatedRuns((runs) => runs.filter((existingRunUuid) => existingRunUuid !== run.runUuid));\n          });\n      }\n    },\n    [dispatch, outputColumn, intl],\n  );\n\n  // Enables run's evaluation queue and starts its processing\n  const startEvaluatingRunColumn = useCallback(\n    (run: RunRowType) => {\n      setEvaluatedRuns((runs) => [...runs, run.runUuid]);\n      processQueueForRun(run);\n    },\n    [processQueueForRun],\n  );\n\n  // Removes the run from evaluation queue so it will gracefully stop after currently pending evaluation\n  const stopEvaluatingRunColumn = useCallback((run: RunRowType) => {\n    setEvaluatedRuns((runs) => runs.filter((existingRunUuid) => existingRunUuid !== run.runUuid));\n  }, []);\n\n  return { runColumnsBeingEvaluated, startEvaluatingRunColumn, stopEvaluatingRunColumn };\n};\n","import React, { useCallback, useContext, useMemo, useState } from 'react';\nimport { RunRowType } from '../../experiment-page/utils/experimentPage.row-types';\nimport { UseEvaluationArtifactTableDataResult } from '../hooks/useEvaluationArtifactTableData';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ReduxState, ThunkDispatch } from '../../../../redux-types';\nimport { EvaluationDataReduxState } from '../../../reducers/EvaluationDataReducer';\nimport { evaluatePromptTableValue } from '../../../actions/PromptEngineeringActions';\nimport {\n  DEFAULT_PROMPTLAB_OUTPUT_COLUMN,\n  canEvaluateOnRun,\n  compilePromptInputText,\n  extractEvaluationPrerequisitesForRun,\n  extractPromptInputVariables,\n} from '../../prompt-engineering/PromptEngineering.utils';\nimport Utils from '../../../../common/utils/Utils';\nimport { useEvaluateAllRows } from '../hooks/useEvaluateAllRows';\nimport { useIntl } from 'react-intl';\nimport { ErrorWrapper } from '../../../../common/utils/ErrorWrapper';\nimport { getPromptEngineeringErrorMessage } from '../utils/PromptEngineeringErrorUtils';\nimport { GatewayErrorWrapper } from '../../../utils/LLMGatewayUtils';\n\nexport interface PromptEngineeringContextType {\n  getMissingParams: (run: RunRowType, rowKey: string) => string[] | null;\n  getEvaluableRowCount: (run: RunRowType) => number;\n  pendingDataLoading: EvaluationDataReduxState['evaluationPendingDataLoadingByRunUuid'];\n  evaluateCell: (run: RunRowType, rowKey: string) => void;\n  evaluateAllClick: (run: RunRowType) => void;\n  runColumnsBeingEvaluated: string[];\n  canEvaluateInRunColumn: (run: RunRowType) => boolean;\n  toggleExpandedHeader: () => void;\n  isHeaderExpanded: boolean;\n}\n\nconst PromptEngineeringContext = React.createContext<PromptEngineeringContextType>({\n  getMissingParams: () => [],\n  pendingDataLoading: {},\n  getEvaluableRowCount: () => 0,\n  evaluateCell: () => {},\n  evaluateAllClick: () => {},\n  runColumnsBeingEvaluated: [],\n  canEvaluateInRunColumn: () => false,\n  toggleExpandedHeader: () => {},\n  isHeaderExpanded: false,\n});\n\nexport const PromptEngineeringContextProvider = ({\n  tableData,\n  outputColumn,\n  children,\n}: React.PropsWithChildren<{\n  tableData: UseEvaluationArtifactTableDataResult;\n  outputColumn: string;\n}>) => {\n  const intl = useIntl();\n\n  const [isHeaderExpanded, setIsHeaderExpanded] = useState(false);\n  const toggleExpandedHeader = useCallback(() => setIsHeaderExpanded((expanded) => !expanded), []);\n\n  const getMissingParams = useCallback(\n    (run: RunRowType, rowKey: string) => {\n      if (!canEvaluateOnRun(run)) {\n        return null;\n      }\n      const row = tableData.find((x) => x.key === rowKey);\n      if (!row) {\n        return null;\n      }\n\n      const { promptTemplate } = extractEvaluationPrerequisitesForRun(run);\n\n      if (!promptTemplate) {\n        return null;\n      }\n\n      const requiredInputs = extractPromptInputVariables(promptTemplate);\n\n      const missingInputParams = requiredInputs.filter((requiredInput) => !row.groupByCellValues[requiredInput]);\n\n      return missingInputParams;\n    },\n    [tableData],\n  );\n\n  const dispatch = useDispatch<ThunkDispatch>();\n  const { startEvaluatingRunColumn, stopEvaluatingRunColumn, runColumnsBeingEvaluated } = useEvaluateAllRows(\n    tableData,\n    outputColumn,\n  );\n\n  const pendingDataLoading = useSelector(\n    ({ evaluationData }: ReduxState) => evaluationData.evaluationPendingDataLoadingByRunUuid,\n  );\n\n  const canEvaluateInRunColumn = useCallback(\n    (run?: RunRowType) => outputColumn === DEFAULT_PROMPTLAB_OUTPUT_COLUMN && canEvaluateOnRun(run),\n    [outputColumn],\n  );\n\n  const getEvaluableRowCount = useCallback(\n    (run: RunRowType) => {\n      const evaluatableRows = tableData.filter((tableRow) => {\n        if (tableRow.cellValues[run.runUuid]) {\n          return false;\n        }\n        const missingParams = getMissingParams(run, tableRow.key);\n        return missingParams?.length === 0;\n      });\n\n      return evaluatableRows.length;\n    },\n    [tableData, getMissingParams],\n  );\n\n  const evaluateAllClick = useCallback(\n    (run: RunRowType) => {\n      if (runColumnsBeingEvaluated.includes(run.runUuid)) {\n        stopEvaluatingRunColumn(run);\n      } else {\n        startEvaluatingRunColumn(run);\n      }\n    },\n    [runColumnsBeingEvaluated, startEvaluatingRunColumn, stopEvaluatingRunColumn],\n  );\n\n  const evaluateCell = useCallback(\n    (run: RunRowType, rowKey: string) => {\n      const row = tableData.find(({ key }) => key === rowKey);\n      if (!row) {\n        return;\n      }\n      const inputValues = row.groupByCellValues;\n\n      const { parameters, promptTemplate, routeName, routeType } = extractEvaluationPrerequisitesForRun(run);\n\n      if (!promptTemplate) {\n        return;\n      }\n\n      const compiledPrompt = compilePromptInputText(promptTemplate, inputValues);\n\n      if (routeName) {\n        const getAction = () => {\n          return evaluatePromptTableValue({\n            routeName,\n            routeType,\n            compiledPrompt,\n            inputValues,\n            outputColumn,\n            rowKey,\n            parameters,\n            run,\n          });\n        };\n\n        dispatch(getAction()).catch((e: Error | ErrorWrapper | GatewayErrorWrapper) => {\n          const errorMessage = getPromptEngineeringErrorMessage(e);\n\n          const wrappedMessage = intl.formatMessage(\n            {\n              defaultMessage: 'MLflow deployment returned the following error: \"{errorMessage}\"',\n              description: 'Experiment page > MLflow deployment error message',\n            },\n            {\n              errorMessage,\n            },\n          );\n          Utils.logErrorAndNotifyUser(wrappedMessage);\n        });\n      }\n    },\n    [tableData, dispatch, outputColumn, intl],\n  );\n  const contextValue = useMemo(\n    () => ({\n      getMissingParams,\n      getEvaluableRowCount,\n      evaluateCell,\n      evaluateAllClick,\n      pendingDataLoading,\n      canEvaluateInRunColumn,\n      runColumnsBeingEvaluated,\n      isHeaderExpanded,\n      toggleExpandedHeader,\n    }),\n    [\n      getMissingParams,\n      getEvaluableRowCount,\n      evaluateAllClick,\n      evaluateCell,\n      pendingDataLoading,\n      canEvaluateInRunColumn,\n      runColumnsBeingEvaluated,\n      isHeaderExpanded,\n      toggleExpandedHeader,\n    ],\n  );\n  return <PromptEngineeringContext.Provider value={contextValue}>{children}</PromptEngineeringContext.Provider>;\n};\n\nexport const usePromptEngineeringContext = () => useContext(PromptEngineeringContext);\n","import { Button, Popover, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport { useSelector } from 'react-redux';\nimport { ReduxState } from '../../../../redux-types';\nimport type { RunRowType } from '../../experiment-page/utils/experimentPage.row-types';\nimport {\n  canEvaluateOnRun,\n  extractEvaluationPrerequisitesForRun,\n} from '../../prompt-engineering/PromptEngineering.utils';\nimport { usePromptEngineeringContext } from '../contexts/PromptEngineeringContext';\n\ninterface EvaluationRunHeaderModelIndicatorProps {\n  run: RunRowType;\n}\nexport const EvaluationRunHeaderModelIndicator = ({ run }: EvaluationRunHeaderModelIndicatorProps) => {\n  const { theme } = useDesignSystemTheme();\n\n  const { isHeaderExpanded } = usePromptEngineeringContext();\n\n  const promptEvaluationDataForRun = extractEvaluationPrerequisitesForRun(run);\n\n  const gatewayRoute = useSelector(({ modelGateway }: ReduxState) => {\n    const gatewayKey = `${promptEvaluationDataForRun.routeType}:${promptEvaluationDataForRun.routeName}`;\n    return promptEvaluationDataForRun.routeName ? modelGateway.modelGatewayRoutes[gatewayKey] : null;\n  });\n\n  if (!canEvaluateOnRun(run) || !promptEvaluationDataForRun) {\n    return null;\n  }\n\n  const { parameters, promptTemplate, routeName } = promptEvaluationDataForRun;\n  const { stop: stopSequences = [] } = parameters;\n\n  return (\n    <div\n      css={{\n        marginTop: theme.spacing.xs,\n        flex: 1,\n        display: 'flex',\n        flexDirection: 'column',\n        gap: theme.spacing.sm,\n        overflowX: 'hidden',\n        width: '100%',\n      }}\n    >\n      {gatewayRoute && 'mlflowDeployment' in gatewayRoute && gatewayRoute.mlflowDeployment && (\n        <Typography.Hint>{gatewayRoute.mlflowDeployment.name}</Typography.Hint>\n      )}\n      {isHeaderExpanded && (\n        <>\n          <Typography.Hint>\n            <FormattedMessage\n              defaultMessage=\"Temperature: {temperature}\"\n              description=\"Experiment page > artifact compare view > run column header prompt metadata > temperature parameter\"\n              values={parameters}\n            />\n          </Typography.Hint>\n          <Typography.Hint>\n            <FormattedMessage\n              defaultMessage=\"Max. tokens: {max_tokens}\"\n              description=\"Experiment page > artifact compare view > run column header prompt metadata > max tokens parameter\"\n              values={parameters}\n            />\n          </Typography.Hint>\n          {stopSequences.length ? (\n            <Typography.Hint css={{ overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap' }}>\n              <FormattedMessage\n                defaultMessage=\"Stop sequences: {stopSequences}\"\n                description=\"Experiment page > artifact compare view > run column header prompt metadata > stop sequences parameter\"\n                values={{ stopSequences: stopSequences?.join(', ') }}\n              />\n            </Typography.Hint>\n          ) : null}\n          <div css={{ fontSize: 0 }}>\n            <Popover.Root>\n              <Popover.Trigger asChild>\n                <Button\n                  componentId=\"codegen_mlflow_app_src_experiment-tracking_components_evaluation-artifacts-compare_components_evaluationrunheadermodelindicator.tsx_115\"\n                  type=\"link\"\n                  size=\"small\"\n                  css={{\n                    fontSize: theme.typography.fontSizeSm,\n                  }}\n                >\n                  <FormattedMessage\n                    defaultMessage=\"View prompt template\"\n                    description='Experiment page > artifact compare view > run column header prompt metadata > \"view prompt template\" button label'\n                  />\n                </Button>\n              </Popover.Trigger>\n              <Popover.Content css={{ maxWidth: 300 }}>\n                <Popover.Arrow />\n                {promptTemplate}\n              </Popover.Content>\n            </Popover.Root>\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n","import { Button, Popover, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { ExperimentViewDatasetWithContext } from '../../experiment-page/components/runs/ExperimentViewDatasetWithContext';\nimport type { RunRowType } from '../../experiment-page/utils/experimentPage.row-types';\nimport type { RunDatasetWithTags } from '../../../types';\nimport { useCallback } from 'react';\n\ninterface EvaluationRunHeaderDatasetIndicatorProps {\n  run: RunRowType;\n  onDatasetSelected: (dataset: RunDatasetWithTags, run: RunRowType) => void;\n}\n\nexport const EvaluationRunHeaderDatasetIndicator = ({\n  run,\n  onDatasetSelected,\n}: EvaluationRunHeaderDatasetIndicatorProps) => {\n  const { theme } = useDesignSystemTheme();\n\n  const handleDatasetSelected = useCallback(\n    (datasetWithTags: RunDatasetWithTags) => onDatasetSelected(datasetWithTags, run),\n    [onDatasetSelected, run],\n  );\n\n  if (run.datasets?.length < 1) {\n    return null;\n  }\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        alignItems: 'center',\n        gap: theme.spacing.xs,\n        overflow: 'hidden',\n      }}\n    >\n      <div css={{ flexShrink: 1, flexGrow: 1, overflow: 'hidden' }}>\n        <Button\n          componentId=\"codegen_mlflow_app_src_experiment-tracking_components_evaluation-artifacts-compare_components_evaluationrunheaderdatasetindicator.tsx_37\"\n          type=\"link\"\n          onClick={() => handleDatasetSelected(run.datasets[0])}\n        >\n          <ExperimentViewDatasetWithContext\n            datasetWithTags={run.datasets[0]}\n            displayTextAsLink\n            css={{ marginTop: theme.spacing.xs / 2, marginBottom: theme.spacing.xs / 2 }}\n          />\n        </Button>\n      </div>\n      {run.datasets.length > 1 && (\n        <div css={{ flexShrink: 0, flexGrow: 1, display: 'flex', alignItems: 'flex-end' }}>\n          <Popover.Root modal={false}>\n            <Popover.Trigger asChild>\n              <Button\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_evaluation-artifacts-compare_components_evaluationrunheaderdatasetindicator.tsx_49\"\n                size=\"small\"\n                style={{ borderRadius: '8px', width: '40px' }}\n              >\n                <Typography.Text color=\"secondary\">+{run.datasets.length - 1}</Typography.Text>\n              </Button>\n            </Popover.Trigger>\n            <Popover.Content align=\"start\">\n              {run.datasets\n                .slice(1)\n                .filter(Boolean)\n                .map((datasetWithTags) => (\n                  <div\n                    css={{\n                      height: theme.general.heightSm,\n                      display: 'flex',\n                      alignItems: 'center',\n                    }}\n                    key={`${datasetWithTags.dataset.name}-${datasetWithTags.dataset.digest}`}\n                  >\n                    <Button\n                      componentId=\"codegen_mlflow_app_src_experiment-tracking_components_evaluation-artifacts-compare_components_evaluationrunheaderdatasetindicator.tsx_66\"\n                      type=\"link\"\n                      onClick={() => handleDatasetSelected(datasetWithTags)}\n                    >\n                      <ExperimentViewDatasetWithContext datasetWithTags={datasetWithTags} displayTextAsLink />\n                    </Button>\n                  </div>\n                ))}\n            </Popover.Content>\n          </Popover.Root>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { useDesignSystemTheme } from '@databricks/design-system';\nimport { PropsWithChildren, ReactNode } from 'react';\n\ninterface Props {\n  className?: string;\n  groupHeaderContent?: ReactNode;\n  isGroupByHeader?: false;\n}\n\nexport const EvaluationTableHeader = ({ children, className, groupHeaderContent = null }: PropsWithChildren<Props>) => {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    // Header cell wrapper element\n    <div\n      css={{\n        width: '100%',\n        height: '100%',\n        display: 'flex',\n        flexDirection: 'column',\n      }}\n    >\n      {/* Spacer element serving as a group header */}\n      <div\n        css={{\n          width: '100%',\n          flexBasis: 40,\n          display: 'flex',\n          alignItems: 'center',\n          padding: theme.spacing.sm,\n          borderBottom: `1px solid ${theme.colors.borderDecorative}`,\n        }}\n        className=\"header-group-cell\"\n      >\n        {groupHeaderContent}\n      </div>\n      {/* Main header cell content */}\n      <div\n        css={{\n          width: '100%',\n          flex: 1,\n          display: 'flex',\n          justifyContent: 'flex-start',\n          alignItems: 'flex-start',\n          padding: theme.spacing.xs,\n          borderRight: `1px solid ${theme.colors.borderDecorative}`,\n        }}\n        className={className}\n      >\n        {children}\n      </div>\n    </div>\n  );\n};\n","import {\n  Button,\n  DropdownMenu,\n  OverflowIcon,\n  PlayIcon,\n  StopIcon,\n  LegacyTooltip,\n  VisibleIcon,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { Link } from '../../../../common/utils/RoutingUtils';\nimport ExperimentRoutes from '../../../routes';\nimport { RunRowType } from '../../experiment-page/utils/experimentPage.row-types';\nimport { EvaluationRunHeaderModelIndicator } from './EvaluationRunHeaderModelIndicator';\nimport { shouldEnablePromptLab } from '../../../../common/utils/FeatureUtils';\nimport { EvaluationRunHeaderDatasetIndicator } from './EvaluationRunHeaderDatasetIndicator';\nimport type { RunDatasetWithTags } from '../../../types';\nimport { usePromptEngineeringContext } from '../contexts/PromptEngineeringContext';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport React, { useMemo } from 'react';\nimport { EvaluationTableHeader } from './EvaluationTableHeader';\nimport { useCreateNewRun } from '../../experiment-page/hooks/useCreateNewRun';\nimport { canEvaluateOnRun } from '../../prompt-engineering/PromptEngineering.utils';\nimport { useGetExperimentRunColor } from '../../experiment-page/hooks/useExperimentRunColor';\nimport { RunColorPill } from '../../experiment-page/components/RunColorPill';\n\ninterface EvaluationRunHeaderCellRendererProps {\n  run: RunRowType;\n  onHideRun: (runUuid: string) => void;\n  onDuplicateRun: (run: RunRowType) => void;\n  onDatasetSelected: (dataset: RunDatasetWithTags, run: RunRowType) => void;\n  groupHeaderContent?: React.ReactNode;\n}\n\n/**\n * Component used as a column header for output (\"run\") columns\n */\nexport const EvaluationRunHeaderCellRenderer = ({\n  run,\n  onHideRun,\n  onDuplicateRun,\n  onDatasetSelected,\n  groupHeaderContent = null,\n}: EvaluationRunHeaderCellRendererProps) => {\n  const { theme } = useDesignSystemTheme();\n  const { getEvaluableRowCount, evaluateAllClick, runColumnsBeingEvaluated, canEvaluateInRunColumn } =\n    usePromptEngineeringContext();\n  const intl = useIntl();\n  const evaluableRowCount = getEvaluableRowCount(run);\n  const getRunColor = useGetExperimentRunColor();\n  const evaluateAllButtonEnabled = evaluableRowCount > 0;\n\n  const evaluatingAllInProgress = runColumnsBeingEvaluated.includes(run.runUuid);\n\n  const evaluateAllTooltipContent = useMemo(() => {\n    if (!evaluateAllButtonEnabled) {\n      return intl.formatMessage({\n        defaultMessage: 'There are no evaluable rows within this column',\n        description:\n          'Experiment page > artifact compare view > run column header > Disabled \"Evaluate all\" button tooltip when no rows are evaluable',\n      });\n    }\n    if (evaluateAllButtonEnabled && !evaluatingAllInProgress) {\n      return intl.formatMessage(\n        {\n          defaultMessage: 'Process {evaluableRowCount} rows without evaluation output',\n          description: 'Experiment page > artifact compare view > run column header > \"Evaluate all\" button tooltip',\n        },\n        {\n          evaluableRowCount,\n        },\n      );\n    }\n\n    return null;\n  }, [evaluableRowCount, evaluateAllButtonEnabled, evaluatingAllInProgress, intl]);\n\n  return (\n    <EvaluationTableHeader\n      css={{\n        justifyContent: 'flex-start',\n        padding: theme.spacing.sm,\n        paddingBottom: 0,\n        paddingTop: theme.spacing.sm,\n        flexDirection: 'column',\n        gap: theme.spacing.xs / 2,\n        overflow: 'hidden',\n      }}\n      groupHeaderContent={groupHeaderContent}\n    >\n      <div\n        css={{\n          width: '100%',\n          display: 'flex',\n        }}\n      >\n        <span css={{ display: 'flex', gap: theme.spacing.sm, alignItems: 'center' }}>\n          <RunColorPill color={getRunColor(run.runUuid)} />\n          <Link to={ExperimentRoutes.getRunPageRoute(run.experimentId || '', run.runUuid)} target=\"_blank\">\n            {run.runName}\n          </Link>\n        </span>\n        <div css={{ flexBasis: theme.spacing.sm, flexShrink: 0 }} />\n\n        <Button\n          componentId=\"codegen_mlflow_app_src_experiment-tracking_components_evaluation-artifacts-compare_components_evaluationrunheadercellrenderer.tsx_112\"\n          onClick={() => onHideRun(run.runUuid)}\n          size=\"small\"\n          icon={<VisibleIcon />}\n          css={{ flexShrink: 0 }}\n        />\n        <div css={{ flex: 1 }} />\n        {shouldEnablePromptLab() && canEvaluateInRunColumn(run) && (\n          <>\n            <div css={{ flexBasis: theme.spacing.sm }} />\n            <LegacyTooltip title={evaluateAllTooltipContent}>\n              <Button\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_evaluation-artifacts-compare_components_evaluationrunheadercellrenderer.tsx_118\"\n                disabled={!evaluateAllButtonEnabled}\n                size=\"small\"\n                onClick={() => evaluateAllClick(run)}\n                icon={evaluatingAllInProgress ? <StopIcon /> : <PlayIcon />}\n              >\n                {evaluatingAllInProgress ? (\n                  <FormattedMessage\n                    defaultMessage=\"Stop evaluating\"\n                    description='Experiment page > artifact compare view > run column header > \"Evaluate all\" button label when the column is being evaluated'\n                  />\n                ) : (\n                  <FormattedMessage\n                    defaultMessage=\"Evaluate all\"\n                    description='Experiment page > artifact compare view > run column header > \"Evaluate all\" button label'\n                  />\n                )}\n              </Button>\n            </LegacyTooltip>\n          </>\n        )}\n        <div css={{ flexBasis: theme.spacing.sm }} />\n        {shouldEnablePromptLab() && canEvaluateOnRun(run) && (\n          <DropdownMenu.Root modal={false}>\n            <DropdownMenu.Trigger asChild>\n              <Button\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_evaluation-artifacts-compare_components_evaluationrunheadercellrenderer.tsx_143\"\n                size=\"small\"\n                icon={<OverflowIcon />}\n              />\n            </DropdownMenu.Trigger>\n            <DropdownMenu.Content>\n              <DropdownMenu.Item onClick={() => onDuplicateRun(run)}>\n                <FormattedMessage\n                  defaultMessage=\"Duplicate run\"\n                  description='Experiment page > artifact compare view > run column header > \"duplicate run\" button label'\n                />\n              </DropdownMenu.Item>\n            </DropdownMenu.Content>\n          </DropdownMenu.Root>\n        )}\n      </div>\n\n      {shouldEnablePromptLab() && canEvaluateOnRun(run) ? (\n        <EvaluationRunHeaderModelIndicator run={run} />\n      ) : (\n        <EvaluationRunHeaderDatasetIndicator run={run} onDatasetSelected={onDatasetSelected} />\n      )}\n    </EvaluationTableHeader>\n  );\n};\n","import { Button, InfoIcon, PlayIcon, RefreshIcon, LegacyTooltip } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport { usePromptEngineeringContext } from '../contexts/PromptEngineeringContext';\nimport { RunRowType } from '../../experiment-page/utils/experimentPage.row-types';\nimport { canEvaluateOnRun } from '../../prompt-engineering/PromptEngineering.utils';\n\n/**\n * Displays multiple variants of \"(re)evaluate\" button within the artifact comparison table\n */\nexport const EvaluationCellEvaluateButton = ({\n  disabled,\n  isLoading,\n  run,\n  rowKey,\n}: {\n  disabled?: boolean;\n  isLoading: boolean;\n  rowKey: string;\n  run: RunRowType;\n}) => {\n  const isRunEvaluable = canEvaluateOnRun(run);\n  const { evaluateCell, getMissingParams } = usePromptEngineeringContext();\n\n  const missingParamsToEvaluate = (run && getMissingParams(run, rowKey)) || null;\n\n  if (missingParamsToEvaluate && missingParamsToEvaluate.length > 0) {\n    return (\n      <LegacyTooltip\n        title={\n          <FormattedMessage\n            description=\"Experiment page > artifact compare view > text cell > missing evaluation parameter values tooltip\"\n            defaultMessage='Evaluation is not possible because values for the following inputs cannot be determined: {missingParamList}. Add input columns to the \"group by\" settings or use \"Add row\" button to define new parameter set.'\n            values={{\n              missingParamList: <code>{missingParamsToEvaluate.join(', ')}</code>,\n            }}\n          />\n        }\n      >\n        <InfoIcon />\n      </LegacyTooltip>\n    );\n  }\n\n  if (!isRunEvaluable) {\n    return (\n      <LegacyTooltip\n        title={\n          <FormattedMessage\n            description=\"Experiment page > artifact compare view > text cell > run not evaluable tooltip\"\n            defaultMessage=\"You cannot evaluate this cell, this run was not created using served LLM model route\"\n          />\n        }\n      >\n        <InfoIcon />\n      </LegacyTooltip>\n    );\n  }\n  return (\n    <Button\n      componentId=\"codegen_mlflow_app_src_experiment-tracking_components_evaluation-artifacts-compare_components_evaluationcellevaluatebutton.tsx_59\"\n      loading={isLoading}\n      disabled={disabled}\n      size=\"small\"\n      onMouseDownCapture={(e) => e.stopPropagation()}\n      onClickCapture={(e) => {\n        e.stopPropagation();\n        evaluateCell(run, rowKey);\n      }}\n      icon={<PlayIcon />}\n    >\n      <>Evaluate</>\n    </Button>\n  );\n};\n","import { TableSkeleton, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport type { ICellRendererParams } from '@ag-grid-community/core';\nimport { FormattedMessage } from 'react-intl';\nimport React from 'react';\nimport { RunRowType } from '../../experiment-page/utils/experimentPage.row-types';\nimport { usePromptEngineeringContext } from '../contexts/PromptEngineeringContext';\nimport { useSelector } from 'react-redux';\nimport { ReduxState } from '../../../../redux-types';\nimport { EvaluationCellEvaluateButton } from './EvaluationCellEvaluateButton';\nimport { shouldEnablePromptLab } from '../../../../common/utils/FeatureUtils';\nimport { UseEvaluationArtifactTableDataResult } from '../hooks/useEvaluationArtifactTableData';\nimport { JsonPreview } from '../../../../common/components/JsonFormatting';\n\n// Truncate the text in the cell, it doesn't make sense to populate\n// more data into the DOM since cells have hidden overflow anyway\nconst MAX_TEXT_LENGTH = 512;\n\ninterface EvaluationTextCellRendererProps extends ICellRendererParams {\n  value: string;\n  isGroupByColumn?: boolean;\n  context: { highlightedText: string };\n\n  data: UseEvaluationArtifactTableDataResult extends (infer U)[] ? U : UseEvaluationArtifactTableDataResult;\n\n  // Valid only for run columns\n  run?: RunRowType;\n}\n\n/**\n * Internal use component - breaks down the rendered text into chunks and highlights\n * particular part found by the provided substring.\n */\nconst HighlightedText = React.memo(({ text, highlight }: { text: string; highlight: string }) => {\n  const { theme } = useDesignSystemTheme();\n  if (!highlight) {\n    return <>{text}</>;\n  }\n\n  const parts = text.split(new RegExp(`(${highlight})`, 'gi'));\n\n  return (\n    <>\n      {parts.map((part, i) => (\n        <React.Fragment key={i}>\n          {part.toLowerCase() === highlight.toLowerCase() ? (\n            <span css={{ backgroundColor: theme.colors.yellow200 }}>{part}</span>\n          ) : (\n            part\n          )}\n        </React.Fragment>\n      ))}\n    </>\n  );\n});\n\n/**\n * Component used to render a single text cell in the evaluation artifacts comparison table.\n */\n/* eslint-disable complexity */\nexport const EvaluationTextCellRenderer = ({\n  value,\n  context,\n  isGroupByColumn,\n  run,\n  data,\n}: EvaluationTextCellRendererProps) => {\n  const { theme } = useDesignSystemTheme();\n  const { pendingDataLoading, canEvaluateInRunColumn } = usePromptEngineeringContext();\n  const isGatewayRoutesLoading = useSelector(\n    ({ modelGateway: { modelGatewayRoutesLoading, modelGatewayRoutesLoadingLegacy } }: ReduxState) => {\n      return modelGatewayRoutesLoading.loading;\n    },\n  );\n\n  const isCellEvaluating = run && pendingDataLoading[run.runUuid]?.[data?.key];\n  const outputMetadata = (run && data.outputMetadataByRunUuid?.[run.runUuid]) || null;\n\n  const backgroundColor =\n    outputMetadata?.isPending || data.isPendingInputRow\n      ? theme.colors.backgroundSecondary\n      : theme.colors.backgroundPrimary;\n\n  const structuredJSONValue = React.useMemo(() => {\n    try {\n      const objectData = JSON.parse(value);\n      return objectData;\n    } catch (e) {\n      return null;\n    }\n  }, [value]);\n\n  return (\n    <div\n      css={{\n        height: '100%',\n        whiteSpace: 'normal',\n        padding: theme.spacing.sm,\n        overflow: 'hidden',\n        position: 'relative',\n        cursor: 'pointer',\n        backgroundColor,\n        '&:hover': {\n          backgroundColor: theme.colors.actionDefaultBackgroundHover,\n        },\n      }}\n    >\n      {isCellEvaluating ? (\n        <TableSkeleton lines={3} />\n      ) : (\n        <>\n          {!value ? (\n            <Typography.Text color=\"info\" css={{ overflow: 'hidden', textOverflow: 'ellipsis' }}>\n              <FormattedMessage\n                defaultMessage=\"(empty)\"\n                description=\"Experiment page > artifact compare view > results table > no result (empty cell)\"\n              />\n            </Typography.Text>\n          ) : structuredJSONValue ? (\n            <JsonPreview json={JSON.stringify(structuredJSONValue, null, 2)} />\n          ) : (\n            <span\n              css={{\n                display: '-webkit-box',\n                overflow: 'hidden',\n                textOverflow: 'ellipsis',\n                '-webkit-box-orient': 'vertical',\n                '-webkit-line-clamp': '7',\n              }}\n            >\n              {isGroupByColumn && context.highlightedText ? (\n                <HighlightedText text={value} highlight={context.highlightedText} />\n              ) : typeof value === 'string' ? (\n                value.substring(0, MAX_TEXT_LENGTH)\n              ) : (\n                /**\n                 * There is a transient state when this value is an object used\n                 * for EvaluationImageCellRenderer. This will prevent displaying\n                 * [object Object] in the cell and cause AgGrid errors.\n                 */\n                typeof value !== 'object' && value\n              )}\n            </span>\n          )}\n        </>\n      )}\n      {shouldEnablePromptLab() && run && canEvaluateInRunColumn(run) && (\n        <div\n          css={{\n            position: 'absolute',\n            left: 8,\n            bottom: 8,\n            right: 8,\n            display: 'flex',\n            gap: theme.spacing.sm,\n            alignItems: 'center',\n            justifyContent: 'space-between',\n          }}\n        >\n          <div css={{ display: 'flex', alignItems: 'center', gap: theme.spacing.xs }}>\n            {!value && (\n              <EvaluationCellEvaluateButton\n                disabled={isCellEvaluating}\n                isLoading={isGatewayRoutesLoading}\n                run={run}\n                rowKey={data.key}\n              />\n            )}\n            {(outputMetadata?.isPending || data.isPendingInputRow) && (\n              <Typography.Hint size=\"sm\" css={{ fontStyle: 'italic' }}>\n                <FormattedMessage\n                  defaultMessage=\"Unsaved\"\n                  description=\"Experiment page > artifact compare view > results table > unsaved indicator\"\n                />\n              </Typography.Hint>\n            )}\n          </div>\n          {outputMetadata && !isCellEvaluating && (\n            <div css={{ display: 'flex', gap: theme.spacing.xs, alignItems: 'center' }}>\n              {outputMetadata.evaluationTime && (\n                <Typography.Hint size=\"sm\">\n                  {Math.round(outputMetadata.evaluationTime)} ms\n                  {outputMetadata.totalTokens ? ',' : ''}\n                </Typography.Hint>\n              )}\n              {outputMetadata.totalTokens && (\n                <Typography.Hint size=\"sm\">\n                  <FormattedMessage\n                    defaultMessage=\"{totalTokens} total tokens\"\n                    description=\"Experiment page > artifact compare view > results table > total number of evaluated tokens\"\n                    values={{ totalTokens: outputMetadata.totalTokens }}\n                  />\n                </Typography.Hint>\n              )}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n","export const EVALUATION_ARTIFACTS_TEXT_COLUMN_WIDTH = {\n  // Default width of \"group by\" columns\n  initialWidthGroupBy: 200,\n  // Default width of \"compare\" (output) columns\n  initialWidthOutput: 360,\n  maxWidth: 500,\n  minWidth: 140,\n};\nexport const EVALUATION_ARTIFACTS_RUN_NAME_HEIGHT = 40;\nexport const EVALUATION_ARTIFACTS_TABLE_ROW_HEIGHT = 190;\n\nexport const getEvaluationArtifactsTableHeaderHeight = (isExpanded = false, includePlaceForMetadata = false) => {\n  // If there is no metadata displayed at all, prepare\n  // 40 px for group header plus 40 px for the run name\n  if (!includePlaceForMetadata) {\n    return 80;\n  }\n\n  // If there's a metadata to be displayed, base the resulting height\n  // on the header expansion. Pixel values according to designs.\n  return 40 + (isExpanded ? 175 : 62);\n};\n","import { IHeaderParams } from '@ag-grid-community/core';\nimport { LegacyTooltip, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { truncate } from 'lodash';\nimport { EvaluationTableHeader } from './EvaluationTableHeader';\n\ninterface EvaluationGroupByHeaderCellRendererProps extends IHeaderParams {\n  displayName: string;\n  onAddNewInputs: () => void;\n  displayAddNewInputsButton?: boolean;\n}\n\n/**\n * Component used as a column header for \"group by\" columns\n */\nexport const EvaluationGroupByHeaderCellRenderer = ({ displayName }: EvaluationGroupByHeaderCellRendererProps) => {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <EvaluationTableHeader css={{ justifyContent: 'flex-start', padding: theme.spacing.sm }}>\n      <LegacyTooltip title={truncate(displayName, { length: 250 })}>\n        <Typography.Text bold css={{ overflow: 'hidden', textOverflow: 'ellipsis' }}>\n          {displayName}\n        </Typography.Text>\n      </LegacyTooltip>\n    </EvaluationTableHeader>\n  );\n};\n","import { Input, Modal, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { useCallback, useMemo, useState } from 'react';\nimport { RunRowType } from '../../experiment-page/utils/experimentPage.row-types';\nimport { uniq, compact } from 'lodash';\nimport { canEvaluateOnRun, extractRequiredInputParamsForRun } from '../../prompt-engineering/PromptEngineering.utils';\nimport { FormattedMessage } from 'react-intl';\n\nconst MAX_RUN_NAMES = 5;\n\nexport const useEvaluationAddNewInputsModal = () => {\n  const [modalVisible, setModalVisible] = useState(false);\n  const [requiredInputKeys, setRequiredInputKeys] = useState<\n    {\n      inputName: string;\n      runNames: string[];\n    }[]\n  >([]);\n  const [inputValues, setInputValues] = useState<Record<string, string>>({});\n\n  const allValuesProvided = useMemo(\n    () => requiredInputKeys.every(({ inputName }) => inputValues[inputName]),\n    [inputValues, requiredInputKeys],\n  );\n\n  const [successCallback, setSuccessCallback] = useState<(providedParamValues: Record<string, string>) => void>(\n    async () => {},\n  );\n\n  const setInputValue = useCallback((key: string, value: string) => {\n    setInputValues((values) => ({ ...values, [key]: value }));\n  }, []);\n\n  const showAddNewInputsModal = useCallback(\n    (runs: RunRowType[], onSuccess: (providedParamValues: Record<string, string>) => void) => {\n      const requiredInputsForRuns = runs.filter(canEvaluateOnRun).map((run) => ({\n        runName: run.runName,\n        params: extractRequiredInputParamsForRun(run),\n      }));\n      const inputValuesWithRunNames = uniq(requiredInputsForRuns.map(({ params }) => params).flat()).map(\n        (inputName) => ({\n          inputName,\n          runNames: compact(\n            requiredInputsForRuns.filter((r) => r.params.includes(inputName)).map(({ runName }) => runName),\n          ),\n        }),\n      );\n      setModalVisible(true);\n      setRequiredInputKeys(inputValuesWithRunNames);\n      setInputValues({});\n      setSuccessCallback(() => onSuccess);\n    },\n    [],\n  );\n  const { theme } = useDesignSystemTheme();\n\n  const AddNewInputsModal = (\n    <Modal\n      title={\n        <FormattedMessage\n          defaultMessage=\"Add row\"\n          description='Experiment page > artifact compare view > \"add new row\" modal title'\n        />\n      }\n      okButtonProps={{ disabled: !allValuesProvided }}\n      okText={\n        <FormattedMessage\n          // TODO(ML-32664): Implement \"Submit and evaluate\" that evaluates entire row\n          defaultMessage=\"Submit\"\n          description='Experiment page > artifact compare view > \"add new row\" modal submit button label'\n        />\n      }\n      cancelText={\n        <FormattedMessage\n          defaultMessage=\"Cancel\"\n          description='Experiment page > artifact compare view > \"add new row\" modal cancel button label'\n        />\n      }\n      onOk={() => {\n        successCallback(inputValues);\n        setModalVisible(false);\n      }}\n      visible={modalVisible}\n      onCancel={() => setModalVisible(false)}\n    >\n      {requiredInputKeys.map(({ inputName, runNames }) => (\n        <div key={inputName} css={{ marginBottom: theme.spacing.md }}>\n          <Typography.Text bold>{inputName}</Typography.Text>\n          <Typography.Hint css={{ whiteSpace: 'nowrap', overflow: 'hidden', textOverflow: 'ellipsis' }}>\n            <FormattedMessage\n              defaultMessage=\"Used by {runNames} {hasMore, select, true {and other runs} other {}}\"\n              description=\"Experiment page > artifact compare view > label indicating which runs are using particular input field\"\n              values={{\n                runNames: runNames.slice(0, MAX_RUN_NAMES).join(', '),\n                hasMore: runNames.length > MAX_RUN_NAMES,\n              }}\n            />\n          </Typography.Hint>\n          <div css={{ marginTop: theme.spacing.sm }}>\n            <Input.TextArea value={inputValues[inputName]} onChange={(e) => setInputValue(inputName, e.target.value)} />\n          </div>\n        </div>\n      ))}\n    </Modal>\n  );\n  return { showAddNewInputsModal, AddNewInputsModal };\n};\n","import { Button, ChevronDownIcon, ChevronRightIcon, LegacyTooltip } from '@databricks/design-system';\nimport { EvaluationTableHeader } from './EvaluationTableHeader';\nimport { usePromptEngineeringContext } from '../contexts/PromptEngineeringContext';\nimport { FormattedMessage } from 'react-intl';\n\nconst enlargedIconStyle = { svg: { width: 20, height: 20 } };\n\nexport const EvaluationTableActionsColumnRenderer = () => {\n  const { toggleExpandedHeader, isHeaderExpanded } = usePromptEngineeringContext();\n\n  return (\n    <EvaluationTableHeader>\n      <LegacyTooltip\n        placement=\"right\"\n        title={\n          <FormattedMessage\n            defaultMessage=\"Toggle detailed view\"\n            description='Experiment page > artifact compare view > table header > label for \"toggle detailed view\" button'\n          />\n        }\n      >\n        <Button\n          componentId=\"codegen_mlflow_app_src_experiment-tracking_components_evaluation-artifacts-compare_components_evaluationtableactionscolumnrenderer.tsx_22\"\n          icon={\n            isHeaderExpanded ? (\n              <ChevronDownIcon css={enlargedIconStyle} />\n            ) : (\n              <ChevronRightIcon css={enlargedIconStyle} />\n            )\n          }\n          onClick={toggleExpandedHeader}\n        />\n      </LegacyTooltip>\n    </EvaluationTableHeader>\n  );\n};\n","import { Button, PlusIcon, LegacyTooltip, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\n\ninterface EvaluationTableActionsCellRendererProps {\n  onAddNewInputs: () => void;\n  displayAddNewInputsButton: boolean;\n}\n\nexport const EvaluationTableActionsCellRenderer = ({\n  onAddNewInputs,\n  displayAddNewInputsButton,\n}: EvaluationTableActionsCellRendererProps) => {\n  const { theme } = useDesignSystemTheme();\n  if (!displayAddNewInputsButton) {\n    return null;\n  }\n\n  return (\n    <div\n      css={{\n        width: '100%',\n        height: '100%',\n        display: 'flex',\n        flexDirection: 'column',\n        padding: theme.spacing.xs,\n      }}\n    >\n      <LegacyTooltip\n        placement=\"right\"\n        title={\n          <FormattedMessage\n            defaultMessage=\"Add row\"\n            description=\"Experiment page > artifact compare view > add new row button\"\n          />\n        }\n      >\n        <Button\n          componentId=\"codegen_mlflow_app_src_experiment-tracking_components_evaluation-artifacts-compare_components_evaluationtableactionscellrenderer.tsx_37\"\n          icon={<PlusIcon />}\n          onClick={onAddNewInputs}\n        />\n      </LegacyTooltip>\n    </div>\n  );\n};\n","import { Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport type { ICellRendererParams } from '@ag-grid-community/core';\nimport { FormattedMessage } from 'react-intl';\nimport { RunRowType } from '../../experiment-page/utils/experimentPage.row-types';\nimport { UseEvaluationArtifactTableDataResult } from '../hooks/useEvaluationArtifactTableData';\nimport { ImagePlot } from '@mlflow/mlflow/src/experiment-tracking/components/runs-charts/components/charts/ImageGridPlot.common';\nimport { EvaluateCellImage } from '@mlflow/mlflow/src/experiment-tracking/types';\n\ninterface EvaluationImageCellRendererProps extends ICellRendererParams {\n  value: EvaluateCellImage;\n  isGroupByColumn?: boolean;\n  context: { highlightedText: string };\n\n  data: UseEvaluationArtifactTableDataResult extends (infer U)[] ? U : UseEvaluationArtifactTableDataResult;\n\n  // Valid only for run columns\n  run?: RunRowType;\n}\n\n/**\n * Component used to render a single text cell in the evaluation artifacts comparison table.\n */\n/* eslint-disable complexity */\nexport const EvaluationImageCellRenderer = ({ value }: EvaluationImageCellRendererProps) => {\n  const { theme } = useDesignSystemTheme();\n\n  const backgroundColor = theme.colors.backgroundPrimary;\n\n  return (\n    <div\n      css={{\n        height: '100%',\n        whiteSpace: 'normal',\n        padding: theme.spacing.sm,\n        overflow: 'hidden',\n        position: 'relative',\n        cursor: 'pointer',\n        backgroundColor,\n        '&:hover': {\n          backgroundColor: theme.colors.actionDefaultBackgroundHover,\n        },\n      }}\n    >\n      {!value || !value.url || !value.compressed_url ? (\n        <Typography.Text color=\"info\" css={{ overflow: 'hidden', textOverflow: 'ellipsis' }}>\n          <FormattedMessage\n            defaultMessage=\"(empty)\"\n            description=\"Experiment page > artifact compare view > results table > no result (empty cell)\"\n          />\n        </Typography.Text>\n      ) : (\n        <span\n          css={{\n            display: '-webkit-box',\n            overflow: 'hidden',\n            textOverflow: 'ellipsis',\n            '-webkit-box-orient': 'vertical',\n            '-webkit-line-clamp': '7',\n            width: '100%',\n            height: '100%',\n          }}\n        >\n          <ImagePlot imageUrl={value.url} compressedImageUrl={value.compressed_url} />\n        </span>\n      )}\n    </div>\n  );\n};\n","import { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { RunRowType } from '../../experiment-page/utils/experimentPage.row-types';\nimport { UseEvaluationArtifactTableDataResult } from '../hooks/useEvaluationArtifactTableData';\nimport { CellClickedEvent, ColDef, GridApi } from '@ag-grid-community/core';\nimport { Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { MLFlowAgGridLoader } from '../../../../common/components/ag-grid/AgGridLoader';\nimport { EvaluationRunHeaderCellRenderer } from './EvaluationRunHeaderCellRenderer';\nimport { EvaluationTextCellRenderer } from './EvaluationTextCellRenderer';\nimport {\n  EVALUATION_ARTIFACTS_TABLE_ROW_HEIGHT,\n  EVALUATION_ARTIFACTS_TEXT_COLUMN_WIDTH,\n  getEvaluationArtifactsTableHeaderHeight,\n} from '../EvaluationArtifactCompare.utils';\nimport { EvaluationGroupByHeaderCellRenderer } from './EvaluationGroupByHeaderCellRenderer';\nimport type { Theme } from '@emotion/react';\nimport type { RunDatasetWithTags } from '../../../types';\nimport { useEvaluationAddNewInputsModal } from '../hooks/useEvaluationAddNewInputsModal';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ReduxState, ThunkDispatch } from '../../../../redux-types';\nimport { evaluateAddInputValues } from '../../../actions/PromptEngineeringActions';\nimport { canEvaluateOnRun, extractRequiredInputParamsForRun } from '../../prompt-engineering/PromptEngineering.utils';\nimport { useIntl } from 'react-intl';\nimport { usePromptEngineeringContext } from '../contexts/PromptEngineeringContext';\nimport { EvaluationTableHeader } from './EvaluationTableHeader';\nimport { EvaluationTableActionsColumnRenderer } from './EvaluationTableActionsColumnRenderer';\nimport { EvaluationTableActionsCellRenderer } from './EvaluationTableActionsCellRenderer';\nimport { shouldEnablePromptLab } from '../../../../common/utils/FeatureUtils';\nimport { useCreateNewRun } from '../../experiment-page/hooks/useCreateNewRun';\nimport { EvaluationImageCellRenderer } from './EvaluationImageCellRenderer';\n\nexport interface EvaluationArtifactCompareTableProps {\n  resultList: UseEvaluationArtifactTableDataResult;\n  visibleRuns: RunRowType[];\n  groupByColumns: string[];\n  onCellClick?: (value: string, columnHeader: string) => void;\n  onHideRun: (runUuid: string) => void;\n  onDatasetSelected: (dataset: RunDatasetWithTags, run: RunRowType) => void;\n  highlightedText: string;\n  isPreviewPaneVisible?: boolean;\n  outputColumnName: string;\n  isImageColumn: boolean;\n}\n\nexport const EvaluationArtifactCompareTable = ({\n  resultList,\n  visibleRuns,\n  groupByColumns,\n  onCellClick,\n  onHideRun,\n  onDatasetSelected,\n  highlightedText = '',\n  isPreviewPaneVisible,\n  outputColumnName,\n  isImageColumn,\n}: EvaluationArtifactCompareTableProps) => {\n  const [columns, setColumns] = useState<ColDef[]>([]);\n\n  const [gridApi, setGridApi] = useState<GridApi | null>(null);\n  const pendingData = useSelector(({ evaluationData }: ReduxState) => evaluationData.evaluationPendingDataByRunUuid);\n  const gridWrapperRef = useRef<HTMLDivElement>(null);\n\n  const { isHeaderExpanded } = usePromptEngineeringContext();\n  const { createNewRun } = useCreateNewRun();\n\n  // Before hiding or duplicating the run, let's refresh the header to mitigate ag-grid's\n  // bug where it fails to defocus cell after the whole table has been hidden.\n  const handleHideRun = useCallback(\n    (runUuid: string) => {\n      gridApi?.refreshHeader();\n      onHideRun(runUuid);\n    },\n    [gridApi, onHideRun],\n  );\n\n  const handleDuplicateRun = useCallback(\n    (runToDuplicate?: RunRowType) => {\n      gridApi?.refreshHeader();\n      createNewRun(runToDuplicate);\n    },\n    [createNewRun, gridApi],\n  );\n\n  useEffect(() => {\n    if (gridApi && !isPreviewPaneVisible) {\n      gridApi.clearFocusedCell();\n    }\n  }, [gridApi, isPreviewPaneVisible]);\n\n  // Force-refresh visible cells' values when some pending data have changes\n  // either by loading new data or discarding values. This makes sure\n  // that even if the prompt evaluates to the same value, the grid still refreshes.\n  useEffect(() => {\n    if (!gridApi) {\n      return;\n    }\n    const visibleRows = gridApi.getRenderedNodes();\n    gridApi.refreshCells({ force: true, rowNodes: visibleRows });\n  }, [gridApi, pendingData, highlightedText]);\n\n  const { showAddNewInputsModal, AddNewInputsModal } = useEvaluationAddNewInputsModal();\n  const dispatch = useDispatch<ThunkDispatch>();\n\n  const scrollGridToTop = useCallback(() => {\n    // Find the scrollable viewport element\n    const gridViewport = gridWrapperRef.current?.querySelector('.ag-body-viewport');\n    if (gridViewport) {\n      gridViewport.scrollTo({ top: 0, behavior: 'smooth' });\n    } else {\n      // If for some reason there's no element, use native jumpy method\n      gridApi?.ensureIndexVisible(0, 'top');\n    }\n  }, [gridApi]);\n\n  const displayAddNewInputsButton = useMemo(\n    // TODO(ML-32969): count prompt-engineered runs based on tags\n    () => visibleRuns.map(extractRequiredInputParamsForRun).flat().length > 0,\n    [visibleRuns],\n  );\n\n  const onAddNewInputs = useCallback(() => {\n    showAddNewInputsModal(visibleRuns, (values) => {\n      dispatch(evaluateAddInputValues(values));\n      // Scroll the grid to the top after adding new row\n      scrollGridToTop();\n    });\n  }, [scrollGridToTop, showAddNewInputsModal, dispatch, visibleRuns]);\n\n  const { theme } = useDesignSystemTheme();\n  const intl = useIntl();\n\n  const handleCellClicked = useCallback(\n    ({ value, colDef, column }: CellClickedEvent) => {\n      const emptyMessage = intl.formatMessage({\n        defaultMessage: '(empty)',\n        description: 'Experiment page > artifact compare view > results table > no result (empty cell)',\n      });\n      return onCellClick?.(value || emptyMessage, colDef.headerName || column.getId());\n    },\n    [intl, onCellClick],\n  );\n\n  const outputColumnIndicator = useMemo(\n    () => <Typography.Text bold>{outputColumnName}</Typography.Text>,\n    [outputColumnName],\n  );\n\n  useEffect(() => {\n    const cols: ColDef[] = [];\n\n    const { initialWidthGroupBy, initialWidthOutput, maxWidth, minWidth } = EVALUATION_ARTIFACTS_TEXT_COLUMN_WIDTH;\n\n    if (shouldEnablePromptLab() && visibleRuns.some((run) => canEvaluateOnRun(run))) {\n      cols.push({\n        resizable: false,\n        pinned: true,\n        width: 40,\n        headerComponent: 'ActionsColumnRenderer',\n        cellRendererSelector: ({ rowIndex }) =>\n          rowIndex === 0\n            ? {\n                component: 'ActionsCellRenderer',\n                params: {\n                  displayAddNewInputsButton,\n                  onAddNewInputs,\n                },\n              }\n            : undefined,\n        cellClass: 'leading-column-cell',\n      });\n    }\n\n    groupByColumns.forEach((col, index) => {\n      const isLastGroupByColumns = index === groupByColumns.length - 1;\n      cols.push({\n        resizable: true,\n        initialWidth: initialWidthGroupBy,\n        minWidth,\n        maxWidth,\n        headerName: col,\n        valueGetter: ({ data }) => data.groupByCellValues[col],\n        suppressMovable: true,\n        cellRenderer: 'TextRendererCellRenderer',\n        headerClass: isLastGroupByColumns ? 'last-group-by-header-cell' : undefined,\n        cellRendererParams: {\n          isGroupByColumn: true,\n        },\n        headerComponent: 'GroupHeaderCellRenderer',\n        headerComponentParams: {\n          displayAddNewInputsButton,\n          onAddNewInputs,\n        },\n        colId: col,\n        onCellClicked: handleCellClicked,\n      });\n    });\n\n    visibleRuns.forEach((run, index) => {\n      const isFirstColumn = index === 0;\n      cols.push({\n        resizable: true,\n        initialWidth: initialWidthOutput,\n        minWidth,\n        maxWidth,\n        headerName: run.runName,\n        colId: run.runUuid,\n        valueGetter: ({ data }) => data.cellValues[run.runUuid],\n        suppressMovable: true,\n        cellRenderer: isImageColumn ? 'ImageRendererCellRenderer' : 'TextRendererCellRenderer',\n        cellRendererParams: {\n          run,\n        },\n        headerComponent: 'RunHeaderCellRenderer',\n        headerComponentParams: {\n          run,\n          onDuplicateRun: handleDuplicateRun,\n          onHideRun: handleHideRun,\n          onDatasetSelected,\n          groupHeaderContent: isFirstColumn ? outputColumnIndicator : null,\n        },\n        onCellClicked: handleCellClicked,\n      });\n    });\n\n    setColumns(cols);\n  }, [\n    visibleRuns,\n    groupByColumns,\n    handleHideRun,\n    handleDuplicateRun,\n    onDatasetSelected,\n    onAddNewInputs,\n    displayAddNewInputsButton,\n    handleCellClicked,\n    outputColumnIndicator,\n    isImageColumn,\n  ]);\n\n  useEffect(() => {\n    if (!gridApi) {\n      return;\n    }\n\n    // Check if we need to have a tall header, i.e. if we have any runs\n    // with datasets or with evaluation metadata\n    const runsContainHeaderMetadata = visibleRuns.some((run) => canEvaluateOnRun(run) || run.datasets?.length > 0);\n\n    // Set header height dynamically\n    gridApi.setHeaderHeight(getEvaluationArtifactsTableHeaderHeight(isHeaderExpanded, runsContainHeaderMetadata));\n  }, [gridApi, isHeaderExpanded, visibleRuns]);\n\n  return (\n    <div css={{ height: '100%', overflow: 'hidden' }} ref={gridWrapperRef}>\n      <MLFlowAgGridLoader\n        css={createTableStyles(theme)}\n        context={{ highlightedText }}\n        rowHeight={EVALUATION_ARTIFACTS_TABLE_ROW_HEIGHT}\n        onGridReady={({ api }) => setGridApi(api)}\n        getRowId={({ data }) => data.key}\n        suppressHorizontalScroll={false}\n        columnDefs={columns}\n        rowData={resultList}\n        components={{\n          TextRendererCellRenderer: EvaluationTextCellRenderer,\n          GroupHeaderCellRenderer: EvaluationGroupByHeaderCellRenderer,\n          RunHeaderCellRenderer: EvaluationRunHeaderCellRenderer,\n          ActionsColumnRenderer: EvaluationTableActionsColumnRenderer,\n          ActionsCellRenderer: EvaluationTableActionsCellRenderer,\n          ImageRendererCellRenderer: EvaluationImageCellRenderer,\n        }}\n      />\n      {AddNewInputsModal}\n    </div>\n  );\n};\n\nconst createTableStyles = (theme: Theme) => ({\n  '.ag-row:not(.ag-row-first), .ag-body-viewport': {\n    borderTop: `1px solid ${theme.colors.borderDecorative}`,\n  },\n  '.ag-row-last': {\n    borderBottom: `1px solid ${theme.colors.borderDecorative}`,\n  },\n  '.ag-cell, .last-group-by-header-cell .header-group-cell': {\n    borderRight: `1px solid ${theme.colors.borderDecorative}`,\n  },\n  '.ag-cell-focus:not(.leading-column-cell)::after': {\n    content: '\"\"',\n    position: 'absolute' as const,\n    inset: 0,\n    boxShadow: `inset 0 0 0px 2px ${theme.colors.blue300}`,\n    pointerEvents: 'none' as const,\n  },\n});\n","import { fromPairs, isNil, isObject, isString, sortBy } from 'lodash';\nimport { useMemo } from 'react';\n\nimport {\n  ArtifactLogTableImageObject,\n  EvaluateCellImage,\n  EvaluationArtifactTableEntry,\n  PendingEvaluationArtifactTableEntry,\n} from '../../../types';\nimport type { EvaluationDataReduxState } from '../../../reducers/EvaluationDataReducer';\nimport { shouldEnablePromptLab } from '../../../../common/utils/FeatureUtils';\nimport {\n  PROMPTLAB_METADATA_COLUMN_LATENCY,\n  PROMPTLAB_METADATA_COLUMN_TOTAL_TOKENS,\n} from '../../prompt-engineering/PromptEngineering.utils';\nimport { LOG_TABLE_IMAGE_COLUMN_TYPE } from '@mlflow/mlflow/src/experiment-tracking/constants';\nimport { getArtifactLocationUrl } from '@mlflow/mlflow/src/common/utils/ArtifactUtils';\n\ntype ArtifactsByRun = EvaluationDataReduxState['evaluationArtifactsByRunUuid'];\ntype PendingDataByRun = EvaluationDataReduxState['evaluationPendingDataByRunUuid'];\ntype DraftInputValues = EvaluationDataReduxState['evaluationDraftInputValues'];\n\nexport type UseEvaluationArtifactTableDataResult = {\n  // Unique key for every result row\n  key: string;\n\n  // Values of \"group by\" columns. The column name is the key.\n  groupByCellValues: Record<string, string>;\n\n  // Values of output columns. The run uuid is the key.\n  cellValues: Record<string, string | EvaluateCellImage>;\n\n  // Contains data describing additional metadata for output: evaluation time, total tokens and a flag\n  // indicating if the run was evaluated in this session and is unsynced\n  outputMetadataByRunUuid?: Record<string, { isPending: boolean; evaluationTime: number; totalTokens?: number }>;\n\n  isPendingInputRow?: boolean;\n}[];\n\nconst extractGroupByValuesFromEntry = (entry: EvaluationArtifactTableEntry, groupByCols: string[]) => {\n  const groupByMappings = groupByCols.map<[string, string]>((groupBy) => {\n    const value = entry[groupBy];\n    return [groupBy, isString(value) ? value : JSON.stringify(value)];\n  });\n\n  // Next, let's calculate a unique hash for values of those columns - it will serve as\n  // an identifier of each result row.\n  const groupByHashKey = groupByMappings.map(([, keyValue]) => String(keyValue)).join('.');\n\n  return { key: groupByHashKey, groupByValues: fromPairs(groupByMappings) };\n};\n\n/**\n * Consumes table artifact data and based on provided dimensions,\n * generates the data ready to be displayed in the comparison data grid.\n *\n * @param artifactsByRun artifacts-by-run data (extracted from the redux store)\n * @param comparedRunsUuids UUIDs of runs we want to compare\n * @param tableNames table names we want to include in the comparison\n * @param groupByCols list of columns that will be used to group the results by\n * @param outputColumn selects the column to be displayed in the run\n */\nexport const useEvaluationArtifactTableData = (\n  artifactsByRun: ArtifactsByRun,\n  pendingDataByRun: PendingDataByRun,\n  draftInputValues: DraftInputValues,\n  comparedRunsUuids: string[],\n  tableNames: string[],\n  groupByCols: string[],\n  outputColumn: string,\n): UseEvaluationArtifactTableDataResult =>\n  // eslint-disable-next-line complexity\n  useMemo(() => {\n    /**\n     * End results, i.e. table rows\n     */\n    const results: UseEvaluationArtifactTableDataResult = [];\n\n    /**\n     * An aggregate object containing all output column values.\n     * The first level key is the combined hash of all group by values,\n     * the second level key is the run UUID. A leaf of this tree corresponds to the output cell value.\n     */\n    const outputCellsValueMap: Record<string, Record<string, any>> = {};\n\n    /**\n     * An aggregate object containing values of the \"group by\" columns.\n     * The first level key is the combined hash of all group by values,\n     * the second level key is the \"group by\" column name. A leaf of this tree corresponds to the cell value.\n     */\n    const groupByCellsValueMap: Record<string, Record<string, any>> = {};\n\n    /**\n     * This array contains all \"group by\" keys that were freshly added or evaluated, i.e. they are not found\n     * in the original evaluation data. This helps to identify them, place them on the top and indicate\n     * they're yet to be synchronized.\n     */\n    const pendingRowKeys: string[] = [];\n\n    /**\n     * Start with populating the table with the draft rows created from the draft input sets\n     */\n    for (const draftInputValueSet of draftInputValues) {\n      const visibleGroupByValues = groupByCols.map((colName) => [colName, draftInputValueSet[colName]]);\n\n      const draftInputRowKey = visibleGroupByValues.map(([, value]) => value).join('.');\n\n      // Register new \"group by\" values combination and mark it as an artificial row\n      groupByCellsValueMap[draftInputRowKey] = fromPairs(visibleGroupByValues);\n      pendingRowKeys.push(draftInputRowKey);\n    }\n\n    const outputMetadataByCellsValueMap: Record<\n      string,\n      Record<string, { isPending: boolean; evaluationTime: number; totalTokens?: number }>\n    > = {};\n\n    // Search through artifact tables and get all entries corresponding to a particular run\n    const runsWithEntries = comparedRunsUuids.map<[string, EvaluationArtifactTableEntry[]]>((runUuid) => {\n      const baseEntries = Object.values(artifactsByRun[runUuid] || {})\n        .filter(({ path }) => tableNames.includes(path))\n        .map(({ entries }) => entries)\n        .flat();\n      return [runUuid, baseEntries];\n    });\n\n    // Iterate through all entries and assign them to the corresponding groups.\n    for (const [runUuid, entries] of runsWithEntries) {\n      for (const entry of entries) {\n        const { key, groupByValues } = extractGroupByValuesFromEntry(entry, groupByCols);\n\n        // Do not process the entry that have empty values for all active \"group by\" columns\n        if (Object.values(groupByValues).every((value) => !value)) {\n          continue;\n        }\n\n        // Assign \"group by\" column cell values\n        if (!groupByCellsValueMap[key]) {\n          groupByCellsValueMap[key] = groupByValues;\n        }\n\n        // Check if there are values in promptlab metadata columns\n        if (entry[PROMPTLAB_METADATA_COLUMN_LATENCY] || entry[PROMPTLAB_METADATA_COLUMN_TOTAL_TOKENS]) {\n          if (!outputMetadataByCellsValueMap[key]) {\n            outputMetadataByCellsValueMap[key] = {};\n          }\n\n          // If true, save it to the record containing output metadata at the index\n          // corresponding to a current \"group by\" key (row) and the run uuid (column)\n          // Show the metadata of the most recent value\n          if (!outputMetadataByCellsValueMap[key][runUuid]) {\n            outputMetadataByCellsValueMap[key][runUuid] = {\n              isPending: false,\n              evaluationTime: parseFloat(entry[PROMPTLAB_METADATA_COLUMN_LATENCY]),\n              totalTokens: entry[PROMPTLAB_METADATA_COLUMN_TOTAL_TOKENS]\n                ? parseInt(entry[PROMPTLAB_METADATA_COLUMN_TOTAL_TOKENS], 10)\n                : undefined,\n            };\n          }\n        }\n\n        // Assign output column cell values\n        if (!outputCellsValueMap[key]) {\n          outputCellsValueMap[key] = {};\n        }\n\n        const cellsEntry = outputCellsValueMap[key];\n\n        // Use the data from the other set if present, but only if there\n        // is no value assigned already. This way we will proritize prepended values.\n        cellsEntry[runUuid] = cellsEntry[runUuid] || entry[outputColumn];\n      }\n    }\n\n    for (const [runUuid, pendingEntries] of Object.entries(pendingDataByRun)) {\n      for (const pendingEntry of pendingEntries) {\n        const { entryData, ...metadata } = pendingEntry;\n        const { key, groupByValues } = extractGroupByValuesFromEntry(entryData, groupByCols);\n\n        // Do not process the entry that have empty values for all active \"group by\" columns\n        if (Object.values(groupByValues).every((value) => !value)) {\n          continue;\n        }\n\n        // Assign \"group by\" column cell values\n        if (!groupByCellsValueMap[key]) {\n          groupByCellsValueMap[key] = groupByValues;\n\n          // If the key was not found in the original set, mark entire row as pending\n          pendingRowKeys.push(key);\n        }\n\n        if (!outputMetadataByCellsValueMap[key]) {\n          outputMetadataByCellsValueMap[key] = {};\n        }\n\n        // code pointer for where the metadat is stored\n        outputMetadataByCellsValueMap[key][runUuid] = metadata;\n\n        // Assign output column cell values\n        if (!outputCellsValueMap[key]) {\n          outputCellsValueMap[key] = {};\n        }\n\n        const cellsEntry = outputCellsValueMap[key];\n        // Use pending data to overwrite already existing result\n        cellsEntry[runUuid] = entryData[outputColumn] || cellsEntry[runUuid];\n      }\n    }\n\n    /**\n     * Extract all \"group by\" keys, i.e. effectively row keys.\n     * Hoist all rows that were created during the pending evaluation to the top.\n     */\n    const allRowKeys = sortBy(Object.entries(groupByCellsValueMap), ([key]) => !pendingRowKeys.includes(key));\n\n    // In the final step, iterate through all found combinations of \"group by\" values and\n    // assign the cells\n    for (const [key, groupByCellValues] of allRowKeys) {\n      const existingTableRow = results.find(({ key: existingKey }) => key === existingKey);\n      if (existingTableRow && outputCellsValueMap[key]) {\n        existingTableRow.cellValues = outputCellsValueMap[key];\n        existingTableRow.outputMetadataByRunUuid = outputMetadataByCellsValueMap[key];\n      } else {\n        const cellsEntry = outputCellsValueMap[key];\n        Object.keys(cellsEntry || {}).forEach((runUuid: string) => {\n          if (cellsEntry[runUuid] !== null && typeof cellsEntry[runUuid] === 'object') {\n            try {\n              const { type, filepath, compressed_filepath } = cellsEntry[runUuid] as ArtifactLogTableImageObject;\n              if (type === LOG_TABLE_IMAGE_COLUMN_TYPE) {\n                cellsEntry[runUuid] = {\n                  url: getArtifactLocationUrl(filepath, runUuid),\n                  compressed_url: getArtifactLocationUrl(compressed_filepath, runUuid),\n                };\n              } else {\n                cellsEntry[runUuid] = JSON.stringify(cellsEntry[runUuid]);\n              }\n            } catch {\n              cellsEntry[runUuid] = '';\n            }\n          } else if (!isNil(cellsEntry[runUuid]) && !isString(cellsEntry[runUuid])) {\n            // stringify non-empty values so that the value\n            // doesn't appear as (empty) in the output cell\n            // also don't stringify strings, since they'll have\n            // an extra quote around them\n            cellsEntry[runUuid] = JSON.stringify(cellsEntry[runUuid]);\n          }\n        });\n\n        results.push({\n          key,\n          groupByCellValues,\n          cellValues: outputCellsValueMap[key] || {},\n          outputMetadataByRunUuid: outputMetadataByCellsValueMap[key],\n          isPendingInputRow: pendingRowKeys.includes(key),\n        });\n      }\n    }\n\n    return results;\n  }, [comparedRunsUuids, artifactsByRun, groupByCols, draftInputValues, tableNames, outputColumn, pendingDataByRun]);\n","import { fromPairs } from 'lodash';\nimport { useMemo } from 'react';\nimport { RunRowType } from '../../experiment-page/utils/experimentPage.row-types';\nimport { extractLoggedTablesFromRunTags } from '../../../utils/ArtifactUtils';\n\n/**\n * Consumes an array of experiment run entities and extracts names of\n * all table artifacts defined by their tags.\n */\nexport const useEvaluationArtifactTables = (comparedRunRows: RunRowType[]) =>\n  useMemo(() => {\n    const tablesByRun = fromPairs(\n      comparedRunRows\n        .map<[string, string[]]>((run) => {\n          const tablesInRun = run.tags ? extractLoggedTablesFromRunTags(run.tags) : [];\n          return [run.runUuid, tablesInRun];\n        })\n        // Filter entries with no tables reported\n        .filter(([, tables]) => tables.length > 0),\n    );\n\n    const allUniqueTables = Array.from(new Set(Object.values(tablesByRun).flat()));\n\n    const tablesIntersection = allUniqueTables.filter((tableName) =>\n      comparedRunRows.every(({ runUuid }) => tablesByRun[runUuid]?.includes(tableName)),\n    );\n\n    const noEvalTablesLogged = allUniqueTables.length === 0;\n\n    return {\n      tables: allUniqueTables,\n      tablesByRun,\n      tablesIntersection,\n      noEvalTablesLogged,\n    };\n  }, [comparedRunRows]);\n","import userEvent from '@testing-library/user-event';\nimport { useEffect } from 'react';\n\ndeclare interface NavigatorWithUserData extends Navigator {\n  userAgentData: any;\n}\n\nconst isMacKeyboard = () =>\n  // userAgentData should be supported in modern Chromium based browsers\n  /mac/i.test((window.navigator as NavigatorWithUserData).userAgentData?.platform) ||\n  // if not, falls back to navigator.platform\n  /mac/i.test(window.navigator.platform);\n\nconst systemModifierKey: keyof KeyboardEvent = isMacKeyboard() ? 'metaKey' : 'ctrlKey';\n\n/**\n * Triggers certain action when a keyboard combination is pressed\n *\n * @example\n *\n * // Listens to CMD+S action\n * useBrowserKeyShortcutListener('s', { ctrlOrCmdKey: true }, () => { ... })\n */\nexport const useBrowserKeyShortcutListener = (\n  /**\n   * A single key (e.g. \"s\") that will be listened for pressing\n   */\n  key: string,\n  /**\n   * Determines which modifier keys are necessary to trigger the action\n   */\n  modifierKeys: { shiftKey?: boolean; ctrlOrCmdKey?: boolean; altOrOptKey?: boolean } = {},\n  /**\n   * A callback function. If returns true, the default action for the key combination will be prevented.\n   */\n  fn: () => boolean | void,\n) => {\n  const { altOrOptKey = false, ctrlOrCmdKey = false, shiftKey = false } = modifierKeys;\n  useEffect(() => {\n    const handler = (e: KeyboardEvent) => {\n      if (\n        (!ctrlOrCmdKey || e[systemModifierKey]) &&\n        (!altOrOptKey || e.altKey) &&\n        (!shiftKey || e.shiftKey) &&\n        e.key === key\n      ) {\n        const shouldPreventDefault = fn();\n        if (shouldPreventDefault) {\n          e.preventDefault();\n        }\n      }\n    };\n\n    window.addEventListener('keydown', handler);\n    return () => window.removeEventListener('keydown', handler);\n  }, [key, fn, ctrlOrCmdKey, altOrOptKey, shiftKey]);\n\n  return { isMacKeyboard };\n};\n","import React from 'react';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ReduxState, ThunkDispatch } from '../../../../redux-types';\nimport { Button, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport {\n  discardPendingEvaluationData,\n  writeBackEvaluationArtifactsAction,\n} from '../../../actions/PromptEngineeringActions';\nimport { FormattedMessage } from 'react-intl';\nimport Utils from '../../../../common/utils/Utils';\nimport { useBrowserKeyShortcutListener } from '../../../../common/hooks/useBrowserKeyShortcutListener';\n\nexport const useEvaluationArtifactWriteBack = () => {\n  const { evaluationPendingDataByRunUuid, evaluationArtifactsBeingUploaded, evaluationDraftInputValues } = useSelector(\n    ({ evaluationData }: ReduxState) => evaluationData,\n  );\n\n  const [isSyncingArtifacts, setSyncingArtifacts] = useState(false);\n\n  const dispatch = useDispatch<ThunkDispatch>();\n\n  const discard = useCallback(() => {\n    dispatch(discardPendingEvaluationData());\n  }, [dispatch]);\n\n  const unsyncedDataEntriesCount = Object.values(evaluationPendingDataByRunUuid).flat().length;\n  const draftInputValuesCount = evaluationDraftInputValues.length;\n  const runsBeingSynchronizedCount = Object.values(evaluationArtifactsBeingUploaded).filter((runArtifacts) =>\n    Object.values(runArtifacts).some((isSynced) => isSynced),\n  ).length;\n\n  useEffect(() => {\n    if (unsyncedDataEntriesCount === 0) {\n      setSyncingArtifacts(false);\n    }\n  }, [unsyncedDataEntriesCount]);\n\n  const synchronizeArtifactData = useCallback(() => {\n    if (unsyncedDataEntriesCount === 0 || isSyncingArtifacts) {\n      return true;\n    }\n    setSyncingArtifacts(true);\n    dispatch(writeBackEvaluationArtifactsAction()).catch((e) => {\n      Utils.logErrorAndNotifyUser(e);\n    });\n    return true;\n  }, [dispatch, unsyncedDataEntriesCount, isSyncingArtifacts]);\n\n  const { isMacKeyboard } = useBrowserKeyShortcutListener('s', { ctrlOrCmdKey: true }, synchronizeArtifactData);\n\n  const { theme } = useDesignSystemTheme();\n\n  // Following flag is true when there are draft input values (draft rows), but\n  // no evaluated values yet\n  const pendingUnevaluatedDraftInputValues = draftInputValuesCount > 0 && unsyncedDataEntriesCount === 0;\n\n  // Display write-back UI only if there are draft rows or unsynced evaluation values\n  const shouldStatusElementBeDisplayed = unsyncedDataEntriesCount > 0 || pendingUnevaluatedDraftInputValues;\n\n  const EvaluationSyncStatusElement = shouldStatusElementBeDisplayed ? (\n    <div\n      css={{\n        backgroundColor: theme.colors.backgroundPrimary,\n        border: `1px solid ${theme.colors.border}`,\n        padding: theme.spacing.md,\n        marginBottom: theme.spacing.sm,\n        display: 'flex',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n      }}\n    >\n      {pendingUnevaluatedDraftInputValues ? (\n        <FormattedMessage\n          defaultMessage=\"You have added rows with new input values, but you still need to evaluate the new data in order to save it.\"\n          description=\"Experiment page > artifact compare view > prompt lab artifact synchronization > unevaluated rows indicator\"\n        />\n      ) : isSyncingArtifacts ? (\n        <Typography.Text>\n          <FormattedMessage\n            defaultMessage=\"Synchronizing artifacts for {runsBeingSynchronizedCount} runs...\"\n            description=\"Experiment page > artifact compare view > prompt lab artifact synchronization > loading state\"\n            values={{\n              runsBeingSynchronizedCount: <strong>{runsBeingSynchronizedCount}</strong>,\n            }}\n          />\n        </Typography.Text>\n      ) : (\n        <Typography.Text>\n          <FormattedMessage\n            defaultMessage={`You have <strong>{unsyncedDataEntriesCount}</strong> unsaved evaluated {unsyncedDataEntriesCount, plural, =1 {value} other {values}}. Click \"Save\" button or press {keyCombination} keys to synchronize the artifact data.`}\n            description=\"Experiment page > artifact compare view > prompt lab artifact synchronization > pending changes indicator\"\n            values={{\n              strong: (value) => <strong>{value}</strong>,\n              unsyncedDataEntriesCount,\n              keyCombination: isMacKeyboard() ? '⌘CMD+S' : 'CTRL+S',\n            }}\n          />\n        </Typography.Text>\n      )}\n      <div css={{ display: 'flex', gap: theme.spacing.sm }}>\n        <Button\n          componentId=\"codegen_mlflow_app_src_experiment-tracking_components_evaluation-artifacts-compare_hooks_useevaluationartifactwriteback.tsx_102\"\n          disabled={isSyncingArtifacts}\n          onClick={discard}\n        >\n          <FormattedMessage\n            defaultMessage=\"Discard\"\n            description=\"Experiment page > artifact compare view > prompt lab artifact synchronization > submit button label\"\n          />\n        </Button>{' '}\n        {/* Display \"Save\" button only if there are actual evaluated data to sync (don't allow to sync empty draft rows) */}\n        {unsyncedDataEntriesCount > 0 && (\n          <Button\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_evaluation-artifacts-compare_hooks_useevaluationartifactwriteback.tsx_110\"\n            loading={isSyncingArtifacts}\n            type=\"primary\"\n            onClick={synchronizeArtifactData}\n          >\n            <FormattedMessage\n              defaultMessage=\"Save\"\n              description=\"Experiment page > artifact compare view > prompt lab artifact synchronization > cancel button label\"\n            />\n          </Button>\n        )}\n      </div>\n    </div>\n  ) : null;\n\n  return { isSyncingArtifacts, EvaluationSyncStatusElement };\n};\n","import { Empty, Typography } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\n\nexport const shouldDisplayEvaluationArtifactEmptyState = ({\n  noEvalTablesLogged,\n  userDeselectedAllColumns,\n  areRunsSelected,\n  areTablesSelected,\n}: EvaluationArtifactViewEmptyStateProps) =>\n  !areTablesSelected || !areRunsSelected || userDeselectedAllColumns || noEvalTablesLogged;\n\ninterface EvaluationArtifactViewEmptyStateProps {\n  noEvalTablesLogged: boolean;\n  userDeselectedAllColumns: boolean;\n  areRunsSelected: boolean;\n  areTablesSelected: boolean;\n}\n\nexport const EvaluationArtifactViewEmptyState = ({\n  noEvalTablesLogged,\n  userDeselectedAllColumns,\n  areRunsSelected,\n}: EvaluationArtifactViewEmptyStateProps) => {\n  const getEmptyContent = () => {\n    if (!areRunsSelected) {\n      return [\n        <FormattedMessage\n          defaultMessage=\"No runs selected\"\n          description=\"Experiment page > artifact compare view > empty state for no runs selected > title\"\n        />,\n        <FormattedMessage\n          defaultMessage=\"Make sure that at least one experiment run is visible and available to compare\"\n          description=\"Experiment page > artifact compare view > empty state for no runs selected > subtitle with the hint\"\n        />,\n      ];\n    }\n    if (noEvalTablesLogged) {\n      return [\n        <FormattedMessage\n          defaultMessage=\"No evaluation tables logged\"\n          description=\"Experiment page > artifact compare view > empty state for no evaluation tables logged > title\"\n        />,\n        <FormattedMessage\n          defaultMessage=\"Please log at least one table artifact containing evaluation data. <link>Learn more</link>.\"\n          description=\"Experiment page > artifact compare view > empty state for no evaluation tables logged > subtitle\"\n          values={{\n            link: (chunks) => (\n              <Typography.Link\n                openInNewTab\n                href=\"https://mlflow.org/docs/latest/python_api/mlflow.html?highlight=log_table#mlflow.log_table\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                {chunks}\n              </Typography.Link>\n            ),\n          }}\n        />,\n      ];\n    }\n    if (userDeselectedAllColumns) {\n      return [\n        <FormattedMessage\n          defaultMessage=\"No group by columns selected\"\n          description=\"Experiment page > artifact compare view > empty state for no group by columns selected > title\"\n        />,\n        <FormattedMessage\n          defaultMessage='Using controls above, select at least one \"group by\" column.'\n          description=\"Experiment page > artifact compare view > empty state for no group by columns selected > title\"\n        />,\n      ];\n    }\n    return [\n      <FormattedMessage\n        defaultMessage=\"No tables selected\"\n        description=\"Experiment page > artifact compare view > empty state for no tables selected > title\"\n      />,\n      <FormattedMessage\n        defaultMessage=\"Using controls above, select at least one artifact containing table.\"\n        description=\"Experiment page > artifact compare view > empty state for no tables selected > subtitle with the hint\"\n      />,\n    ];\n  };\n  const [title, description] = getEmptyContent();\n  return <Empty title={title} description={description} />;\n};\n","import {\n  CopyIcon,\n  DialogCombobox,\n  DialogComboboxContent,\n  DialogComboboxOptionList,\n  DialogComboboxOptionListCheckboxItem,\n  DialogComboboxOptionListSelectItem,\n  DialogComboboxTrigger,\n  Empty,\n  InfoIcon,\n  Input,\n  SearchIcon,\n  LegacySkeleton,\n  Spinner,\n  ToggleButton,\n  LegacyTooltip,\n  Typography,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport type { EvaluationDataReduxState } from '../../reducers/EvaluationDataReducer';\nimport { ExperimentPageViewState } from '../experiment-page/models/ExperimentPageViewState';\nimport { RunRowType } from '../experiment-page/utils/experimentPage.row-types';\nimport { EvaluationArtifactCompareTable } from './components/EvaluationArtifactCompareTable';\nimport { useEvaluationArtifactColumns } from './hooks/useEvaluationArtifactColumns';\nimport { useEvaluationArtifactTableData } from './hooks/useEvaluationArtifactTableData';\nimport { useEvaluationArtifactTables } from './hooks/useEvaluationArtifactTables';\nimport type { RunDatasetWithTags, UpdateExperimentViewStateFn } from '../../types';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { PreviewSidebar } from '../../../common/components/PreviewSidebar';\nimport { useEvaluationArtifactViewState } from './hooks/useEvaluationArtifactViewState';\nimport { useEvaluationArtifactWriteBack } from './hooks/useEvaluationArtifactWriteBack';\nimport { PromptEngineeringContextProvider } from './contexts/PromptEngineeringContext';\nimport { ReduxState, ThunkDispatch } from '../../../redux-types';\nimport { getEvaluationTableArtifact } from '../../actions';\nimport Utils from '../../../common/utils/Utils';\nimport {\n  DEFAULT_PROMPTLAB_OUTPUT_COLUMN,\n  canEvaluateOnRun,\n  extractRequiredInputParamsForRun,\n} from '../prompt-engineering/PromptEngineering.utils';\nimport { searchAllPromptLabAvailableEndpoints } from '../../actions/PromptEngineeringActions';\nimport { shouldEnablePromptLab } from '@mlflow/mlflow/src/common/utils/FeatureUtils';\nimport {\n  EvaluationArtifactViewEmptyState,\n  shouldDisplayEvaluationArtifactEmptyState,\n} from './EvaluationArtifactViewEmptyState';\nimport { useUpdateExperimentViewUIState } from '../experiment-page/contexts/ExperimentPageUIStateContext';\nimport { useToggleRowVisibilityCallback } from '../experiment-page/hooks/useToggleRowVisibilityCallback';\nimport { RUNS_VISIBILITY_MODE } from '../experiment-page/models/ExperimentPageUIState';\nimport { FormattedJsonDisplay } from '@mlflow/mlflow/src/common/components/JsonFormatting';\n\nconst MAX_RUNS_TO_COMPARE = 10;\n\ninterface EvaluationArtifactCompareViewProps {\n  comparedRuns: RunRowType[];\n  viewState: ExperimentPageViewState;\n  updateViewState: UpdateExperimentViewStateFn;\n  onDatasetSelected: (dataset: RunDatasetWithTags, run: RunRowType) => void;\n}\n\n/**\n * Compares the table data contained in experiment run artifacts.\n */\nexport const EvaluationArtifactCompareViewImpl = ({\n  comparedRuns,\n  onDatasetSelected,\n  viewState,\n  updateViewState,\n}: EvaluationArtifactCompareViewProps) => {\n  const intl = useIntl();\n  const { theme } = useDesignSystemTheme();\n  const updateUIState = useUpdateExperimentViewUIState();\n\n  const visibleRuns = useMemo(\n    () => comparedRuns.filter(({ hidden }) => !hidden).slice(0, MAX_RUNS_TO_COMPARE),\n    [comparedRuns],\n  );\n\n  const { selectedTables, groupByCols, outputColumn, setSelectedTables, setGroupByCols, setOutputColumn } =\n    useEvaluationArtifactViewState(viewState, updateViewState);\n\n  const [showSearchSpinner, setShowSearchSpinner] = useState(false);\n  const [filter, setFilter] = useState('');\n  const [debouncedFilter, setDebouncedFilter] = useState('');\n  const [userDeselectedAllColumns, setUserDeselectedAllColumns] = useState(false);\n\n  const { isSyncingArtifacts, EvaluationSyncStatusElement } = useEvaluationArtifactWriteBack();\n\n  const dispatch = useDispatch<ThunkDispatch>();\n\n  useEffect(() => {\n    if (shouldEnablePromptLab()) {\n      dispatch(searchAllPromptLabAvailableEndpoints()).catch((e) => {\n        Utils.logErrorAndNotifyUser(e?.message || e);\n      });\n    }\n  }, [dispatch]);\n\n  const handleTableToggle = useCallback(\n    (value: string) =>\n      setSelectedTables((currentValue) => {\n        if (currentValue.includes(value)) {\n          return currentValue.filter((item) => item !== value);\n        } else {\n          return [...currentValue, value];\n        }\n      }),\n    [setSelectedTables],\n  );\n\n  const handleGroupByToggle = useCallback(\n    (value: string) =>\n      setGroupByCols((currentValue) => {\n        const newValues = currentValue.includes(value)\n          ? currentValue.filter((item) => item !== value)\n          : [...currentValue, value];\n        setUserDeselectedAllColumns(newValues.length === 0);\n        return newValues;\n      }),\n    [setGroupByCols],\n  );\n\n  const visibleRunsUuids = useMemo(() => visibleRuns.map(({ runUuid }) => runUuid), [visibleRuns]);\n\n  const { evaluationArtifactsByRunUuid, evaluationPendingDataByRunUuid, evaluationDraftInputValues } = useSelector(\n    ({ evaluationData }: ReduxState) => evaluationData,\n  );\n\n  const { tables, tablesByRun, noEvalTablesLogged } = useEvaluationArtifactTables(visibleRuns);\n\n  // Select the first table by default\n  useEffect(() => {\n    if (tables.length > 0 && selectedTables.length === 0) {\n      setSelectedTables([tables[0]]);\n    }\n  }, [tables, setSelectedTables, selectedTables.length]);\n\n  const isLoading = useSelector(({ evaluationData, modelGateway }: ReduxState) => {\n    const gatewayRoutesLoading = modelGateway.modelGatewayRoutesLoading.loading;\n    return (\n      gatewayRoutesLoading ||\n      visibleRunsUuids.some((uuid) =>\n        selectedTables.some((table) => evaluationData.evaluationArtifactsLoadingByRunUuid[uuid]?.[table]),\n      )\n    );\n  });\n\n  const { columns, imageColumns } = useEvaluationArtifactColumns(\n    evaluationArtifactsByRunUuid,\n    visibleRunsUuids,\n    selectedTables,\n  );\n\n  const isImageColumn = imageColumns.includes(outputColumn);\n\n  const tableRows = useEvaluationArtifactTableData(\n    evaluationArtifactsByRunUuid,\n    evaluationPendingDataByRunUuid,\n    evaluationDraftInputValues,\n    visibleRunsUuids,\n    selectedTables,\n    groupByCols,\n    outputColumn,\n  );\n\n  // Try to extract all existing prompt input fields from prompt engineering runs, if there are any.\n  // Return \"null\" otherwise.\n  const promptLabInputVariableNames = useMemo(() => {\n    const promptEngineeringRuns = visibleRuns.filter(canEvaluateOnRun);\n    const allInputNames = promptEngineeringRuns.map(extractRequiredInputParamsForRun).flat();\n    if (!allInputNames.length) {\n      return null;\n    }\n\n    // Remove duplicates\n    const distinctInputNames = Array.from(new Set(allInputNames));\n\n    // Ensure that detected input names are included in the available columns\n    return distinctInputNames.filter((inputName) => columns.includes(inputName));\n  }, [visibleRuns, columns]);\n\n  // If we've changed the visible run set and all of them originate from prompt engineering,\n  // reset the columns so they will be recalculated again\n  useEffect(() => {\n    if (visibleRuns.every(canEvaluateOnRun)) {\n      setGroupByCols([]);\n    }\n  }, [setGroupByCols, visibleRuns]);\n\n  // For every run, load its selected tables\n  useEffect(() => {\n    if (!selectedTables.length) {\n      return;\n    }\n    for (const run of visibleRuns) {\n      if (!run) {\n        continue;\n      }\n      const tablesToFetch = (tablesByRun[run.runUuid] || []).filter((table) => selectedTables.includes(table));\n      for (const table of tablesToFetch) {\n        dispatch(getEvaluationTableArtifact(run.runUuid, table, false)).catch((e) => {\n          Utils.logErrorAndNotifyUser(e.message || e);\n        });\n      }\n    }\n  }, [visibleRuns, dispatch, selectedTables, tablesByRun]);\n\n  // Table is ready to use if it's loaded, at least one table and at least one run is selected\n  const areTablesSelected = selectedTables.length > 0;\n  const areRunsSelected = visibleRuns.length > 0;\n  const isViewConfigured = !isLoading && areTablesSelected && areRunsSelected;\n\n  const filteredRows = useMemo(() => {\n    if (!debouncedFilter.trim()) {\n      return tableRows;\n    }\n    const regexp = new RegExp(debouncedFilter, 'i');\n    return tableRows.filter(({ groupByCellValues }) =>\n      Object.values(groupByCellValues).some((groupByValue) => groupByValue?.match(regexp)),\n    );\n  }, [tableRows, debouncedFilter]);\n\n  const toggleRowVisibility = useToggleRowVisibilityCallback(comparedRuns);\n\n  const handleHideRun = useCallback(\n    (runUuid: string) => {\n      toggleRowVisibility(RUNS_VISIBILITY_MODE.CUSTOM, runUuid);\n    },\n    [toggleRowVisibility],\n  );\n\n  // Make sure that there's at least one \"group by\" column selected\n  useEffect(() => {\n    if (isLoading || userDeselectedAllColumns) {\n      return;\n    }\n    const noColumnsSelected = groupByCols.length < 1;\n    const columnNotAvailableAnymore = groupByCols.some((column) => !columns.includes(column));\n    const firstColumn = columns[0];\n\n    // If prompt engineering prompt inputs are detected, take them as a candidate for initial \"group by\" columns.\n    // If not, use the first valid column found.\n    const groupByColumnCandidates = promptLabInputVariableNames || (firstColumn ? [firstColumn] : null);\n\n    if ((noColumnsSelected || columnNotAvailableAnymore) && groupByColumnCandidates) {\n      setGroupByCols(groupByColumnCandidates);\n    }\n  }, [\n    isLoading,\n    userDeselectedAllColumns,\n    groupByCols,\n    outputColumn,\n    columns,\n    setGroupByCols,\n    promptLabInputVariableNames,\n  ]);\n\n  // Remove MLFLOW_ columns from the list of groupby columns since they are for metadata only\n  const availableGroupByColumns = useMemo(() => columns.filter((col) => !col.startsWith('MLFLOW_')), [columns]);\n\n  // All columns that are not used for grouping can be used as output (compare) column\n  // Remove MLFLOW_ columns from the list of output columns\n  const availableOutputColumns = useMemo(\n    () => [...columns, ...imageColumns].filter((col) => !groupByCols.includes(col) && !col.startsWith('MLFLOW_')),\n    [columns, imageColumns, groupByCols],\n  );\n\n  // If the current output column have been selected as \"group by\", change it to the other available one\n  useEffect(() => {\n    if (groupByCols.includes(outputColumn) || !outputColumn) {\n      const nextColumnCandidate = availableOutputColumns.includes(DEFAULT_PROMPTLAB_OUTPUT_COLUMN)\n        ? DEFAULT_PROMPTLAB_OUTPUT_COLUMN\n        : availableOutputColumns[0];\n      setOutputColumn(nextColumnCandidate || '');\n    }\n  }, [groupByCols, outputColumn, availableOutputColumns, setOutputColumn]);\n\n  // On every change of \"filter\" input, debounce the value and show the spinner\n  useEffect(() => {\n    setShowSearchSpinner(true);\n    const handler = setTimeout(() => setDebouncedFilter(filter), 250);\n    return () => clearTimeout(handler);\n  }, [filter]);\n\n  // After debounced filter value settles in, remove the search spinner\n  useEffect(() => {\n    setShowSearchSpinner(false);\n  }, [debouncedFilter]);\n\n  // If the current output column is not available anymore, change it to the other available one\n  useEffect(() => {\n    if (!availableOutputColumns.includes(outputColumn)) {\n      const nextColumnCandidate = availableOutputColumns.includes(DEFAULT_PROMPTLAB_OUTPUT_COLUMN)\n        ? DEFAULT_PROMPTLAB_OUTPUT_COLUMN\n        : availableOutputColumns[0];\n      setOutputColumn(nextColumnCandidate || '');\n    }\n  }, [outputColumn, availableOutputColumns, setOutputColumn]);\n\n  // If any currently selected table is not available anymore, deselect it\n  useEffect(() => {\n    if (selectedTables.some((table) => !tables.includes(table))) {\n      setSelectedTables([]);\n    }\n  }, [selectedTables, tables, setSelectedTables]);\n\n  const [sidebarPreviewData, setSidebarPreviewData] = useState<{\n    value: string;\n    header: string;\n  } | null>(null);\n\n  const handleCellClicked = useCallback(\n    (value: string, header: string) => {\n      setSidebarPreviewData({ value, header });\n      updateViewState({ previewPaneVisible: true });\n    },\n    [updateViewState],\n  );\n\n  return (\n    <div\n      css={{\n        flex: 1,\n        borderTop: `1px solid ${theme.colors.border}`,\n        borderLeft: `1px solid ${theme.colors.border}`,\n        // Let's cover 1 pixel of the grid's border for the sleek look\n        marginLeft: -1,\n        zIndex: 1,\n        height: '100%',\n        display: 'grid',\n        gridTemplateColumns: viewState.previewPaneVisible ? '1fr auto' : '1fr',\n        overflow: 'hidden',\n      }}\n    >\n      <div\n        css={{\n          paddingLeft: theme.spacing.sm,\n          paddingTop: theme.spacing.sm,\n          height: '100%',\n          display: 'grid',\n          gridTemplateRows: 'auto auto 1fr',\n          overflow: 'hidden',\n          rowGap: theme.spacing.sm,\n          backgroundColor: theme.colors.backgroundSecondary,\n        }}\n      >\n        <div\n          css={{\n            display: 'flex',\n            alignItems: 'center',\n            gap: theme.spacing.sm,\n            overflow: 'hidden',\n            height: theme.general.heightSm,\n          }}\n        >\n          <DialogCombobox\n            label={\n              <FormattedMessage\n                defaultMessage=\"Table\"\n                description=\"Experiment page > artifact compare view > table select dropdown label\"\n              />\n            }\n            multiSelect\n            value={selectedTables}\n          >\n            <DialogComboboxTrigger\n              css={{ maxWidth: 300, backgroundColor: theme.colors.backgroundPrimary }}\n              data-testid=\"dropdown-tables\"\n              onClear={() => setSelectedTables([])}\n              disabled={isSyncingArtifacts || !areRunsSelected || noEvalTablesLogged}\n            />\n            <DialogComboboxContent css={{ maxWidth: 300 }}>\n              <DialogComboboxOptionList>\n                {tables.map((artifactPath) => (\n                  <DialogComboboxOptionListCheckboxItem\n                    value={artifactPath}\n                    key={artifactPath}\n                    onChange={handleTableToggle}\n                    checked={selectedTables.includes(artifactPath)}\n                    data-testid=\"dropdown-tables-option\"\n                  >\n                    {artifactPath}\n                  </DialogComboboxOptionListCheckboxItem>\n                ))}\n              </DialogComboboxOptionList>\n            </DialogComboboxContent>\n          </DialogCombobox>\n          <LegacyTooltip\n            title={\n              <FormattedMessage\n                defaultMessage=\"Using the list of logged table artifacts, select at least one to start comparing results.\"\n                description=\"Experiment page > artifact compare view > table select dropdown tooltip\"\n              />\n            }\n          >\n            <InfoIcon />\n          </LegacyTooltip>\n        </div>\n        {isLoading ? (\n          <LegacySkeleton />\n        ) : (\n          <>\n            <div\n              css={{\n                display: 'flex',\n                columnGap: theme.spacing.sm,\n                alignItems: 'center',\n                overflow: 'hidden',\n                height: theme.general.heightSm,\n              }}\n            >\n              <Input\n                prefix={<SearchIcon />}\n                suffix={showSearchSpinner && <Spinner size=\"small\" />}\n                css={{ width: 300, minWidth: 300 }}\n                onChange={(e) => setFilter(e.target.value)}\n                value={filter}\n                placeholder={intl.formatMessage(\n                  {\n                    defaultMessage: 'Filter by {columnNames}',\n                    description: 'Experiment page > artifact compare view > search input placeholder',\n                  },\n                  {\n                    columnNames: groupByCols.join(', '),\n                  },\n                )}\n                allowClear\n                disabled={!isViewConfigured || isSyncingArtifacts}\n              />\n              <DialogCombobox\n                value={groupByCols}\n                multiSelect\n                label={\n                  <FormattedMessage\n                    defaultMessage=\"Group by\"\n                    description='Experiment page > artifact compare view > \"group by column\" select dropdown label'\n                  />\n                }\n              >\n                <DialogComboboxTrigger\n                  disabled={!isViewConfigured || isSyncingArtifacts}\n                  allowClear={false}\n                  showTagAfterValueCount={1}\n                  css={{ maxWidth: 300, backgroundColor: theme.colors.backgroundPrimary }}\n                  aria-label='Select \"group by\" columns'\n                />\n                <DialogComboboxContent css={{ maxWidth: 300 }}>\n                  <DialogComboboxOptionList>\n                    {availableGroupByColumns.map((columnName) => (\n                      <DialogComboboxOptionListCheckboxItem\n                        value={columnName}\n                        key={columnName}\n                        onChange={handleGroupByToggle}\n                        checked={groupByCols.includes(columnName)}\n                      >\n                        {columnName}\n                      </DialogComboboxOptionListCheckboxItem>\n                    ))}\n                  </DialogComboboxOptionList>\n                </DialogComboboxContent>\n              </DialogCombobox>\n              <DialogCombobox\n                value={[outputColumn]}\n                label={\n                  <FormattedMessage\n                    defaultMessage=\"Compare\"\n                    description='Experiment page > artifact compare view > \"compare\" select dropdown label'\n                  />\n                }\n              >\n                <DialogComboboxTrigger\n                  disabled={!isViewConfigured || isSyncingArtifacts}\n                  allowClear={false}\n                  css={{ maxWidth: 300, backgroundColor: theme.colors.backgroundPrimary }}\n                />\n                <DialogComboboxContent css={{ maxWidth: 300 }}>\n                  <DialogComboboxOptionList>\n                    {availableOutputColumns.map((columnName) => (\n                      <DialogComboboxOptionListSelectItem\n                        value={columnName}\n                        key={columnName}\n                        onChange={() => setOutputColumn(columnName)}\n                        checked={outputColumn === columnName}\n                      >\n                        {columnName}\n                      </DialogComboboxOptionListSelectItem>\n                    ))}\n                  </DialogComboboxOptionList>\n                </DialogComboboxContent>\n              </DialogCombobox>\n            </div>\n\n            {shouldDisplayEvaluationArtifactEmptyState({\n              areRunsSelected,\n              areTablesSelected,\n              noEvalTablesLogged,\n              userDeselectedAllColumns,\n            }) ? (\n              <div\n                css={{\n                  height: '100%',\n                  display: 'flex',\n                  justifyContent: 'center',\n                  alignItems: 'center',\n                }}\n              >\n                <EvaluationArtifactViewEmptyState\n                  areRunsSelected={areRunsSelected}\n                  areTablesSelected={areTablesSelected}\n                  noEvalTablesLogged={noEvalTablesLogged}\n                  userDeselectedAllColumns={userDeselectedAllColumns}\n                />\n              </div>\n            ) : (\n              <div\n                css={{\n                  position: 'relative' as const,\n                  zIndex: 1,\n                  overflowY: 'hidden' as const,\n                  height: '100%',\n                  backgroundColor: theme.colors.backgroundPrimary,\n                }}\n              >\n                <PromptEngineeringContextProvider tableData={tableRows} outputColumn={outputColumn}>\n                  <EvaluationArtifactCompareTable\n                    visibleRuns={visibleRuns}\n                    groupByColumns={groupByCols}\n                    resultList={filteredRows}\n                    onCellClick={isImageColumn ? undefined : handleCellClicked}\n                    onHideRun={handleHideRun}\n                    onDatasetSelected={onDatasetSelected}\n                    highlightedText={debouncedFilter.trim()}\n                    isPreviewPaneVisible={viewState.previewPaneVisible}\n                    outputColumnName={outputColumn}\n                    isImageColumn={isImageColumn}\n                  />\n                </PromptEngineeringContextProvider>\n              </div>\n            )}\n            {EvaluationSyncStatusElement}\n          </>\n        )}\n      </div>\n      {viewState.previewPaneVisible && (\n        <PreviewSidebar\n          content={sidebarPreviewData?.value ? <FormattedJsonDisplay json={sidebarPreviewData.value} /> : null}\n          copyText={sidebarPreviewData?.value || ''}\n          headerText={sidebarPreviewData?.header}\n          onClose={() => updateViewState({ previewPaneVisible: false })}\n          empty={\n            <Empty\n              description={\n                <FormattedMessage\n                  defaultMessage=\"Select a cell to display preview\"\n                  description=\"Experiment page > artifact compare view > preview sidebar > nothing selected\"\n                />\n              }\n            />\n          }\n        />\n      )}\n    </div>\n  );\n};\n\nexport const EvaluationArtifactCompareView = (props: EvaluationArtifactCompareViewProps & { disabled?: boolean }) => {\n  const { theme } = useDesignSystemTheme();\n  if (props.disabled) {\n    return (\n      <div\n        css={{\n          flex: 1,\n          backgroundColor: theme.colors.backgroundSecondary,\n          height: '100%',\n          borderTop: `1px solid ${theme.colors.border}`,\n          borderLeft: `1px solid ${theme.colors.border}`,\n          paddingTop: theme.spacing.lg,\n          marginLeft: -1,\n          zIndex: 1,\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n        }}\n      >\n        <Empty\n          title={\n            <FormattedMessage\n              defaultMessage=\"Evaluation not available when grouping is enabled\"\n              description=\"Experiment page > artifact compare view > disabled due to run grouping > title\"\n            />\n          }\n          description={\n            <FormattedMessage\n              defaultMessage=\"Disable run grouping in order to access the evaluation view\"\n              description=\"Experiment page > artifact compare view > disabled due to run grouping > description\"\n            />\n          }\n          image={<div />}\n        />\n      </div>\n    );\n  }\n  return <EvaluationArtifactCompareViewImpl {...props} />;\n};\n","import { useEffect, useState } from 'react';\nimport { ExperimentPageViewState } from '../../experiment-page/models/ExperimentPageViewState';\nimport { UpdateExperimentViewStateFn } from '../../../types';\n\nexport const useEvaluationArtifactViewState = (\n  viewState: ExperimentPageViewState,\n  updateViewState: UpdateExperimentViewStateFn,\n) => {\n  const { artifactViewState = {} } = viewState;\n  const [selectedTables, setSelectedTables] = useState<string[]>(artifactViewState.selectedTables || []);\n  const [groupByCols, setGroupByCols] = useState<string[]>(artifactViewState.groupByCols || []);\n  const [outputColumn, setOutputColumn] = useState(artifactViewState.outputColumn || '');\n\n  useEffect(\n    () =>\n      updateViewState({\n        artifactViewState: {\n          selectedTables,\n          groupByCols,\n          outputColumn,\n        },\n      }),\n    [updateViewState, selectedTables, groupByCols, outputColumn],\n  );\n\n  return {\n    selectedTables,\n    groupByCols,\n    outputColumn,\n    setSelectedTables,\n    setGroupByCols,\n    setOutputColumn,\n  };\n};\n","import { useMemo } from 'react';\nimport type { EvaluationDataReduxState } from '../../../reducers/EvaluationDataReducer';\nimport { ArtifactLogTableImageObject } from '@mlflow/mlflow/src/experiment-tracking/types';\n\ntype ArtifactsByRun = EvaluationDataReduxState['evaluationArtifactsByRunUuid'];\n\n/**\n * Consumes artifacts data (extracted from the redux store) and based on the\n * provided list of tables and run UUIDs, returns:\n * - list of all columns found in the tables data\n * - list of columns that are present in every matching table\n */\nexport const useEvaluationArtifactColumns = (\n  artifactsByRun: ArtifactsByRun,\n  comparedRunUuids: string[],\n  tableNames: string[],\n) =>\n  useMemo(() => {\n    // Do not proceed if there are no tables or runs selected\n    if (tableNames.length === 0 || comparedRunUuids.length === 0) {\n      return { columns: [], columnsIntersection: [], imageColumns: [] };\n    }\n\n    // Extract all matching table objects from the store data\n    const allTableEntries = comparedRunUuids\n      .map((runUuid) => Object.values(artifactsByRun[runUuid] || {}).filter(({ path }) => tableNames.includes(path)))\n      .flat();\n\n    // Extract all valid column names\n    const allColumnsForAllTables = allTableEntries\n      .filter(({ path }) => tableNames.includes(path))\n      .map(({ columns, entries }) => {\n        return columns.map((column) => {\n          const column_string = String(column);\n          if (entries.length > 0) {\n            const entry = entries[0][column];\n            if (typeof entry === 'object' && (entry as ArtifactLogTableImageObject)?.type === 'image') {\n              return { name: column_string, type: 'image' };\n            } else {\n              return { name: column_string, type: 'text' };\n            }\n          } else {\n            return { name: column_string, type: 'text' };\n          }\n        });\n      })\n      .flat();\n\n    // Remove duplicates\n    const columns = Array.from(\n      new Set(allColumnsForAllTables.filter((col) => col.type === 'text').map((col) => col.name)),\n    );\n    const imageColumns = Array.from(\n      new Set(allColumnsForAllTables.filter((col) => col.type === 'image').map((col) => col.name)),\n    );\n    // Find the intersection\n    const columnsIntersection = columns.filter((column) =>\n      allTableEntries.every(({ columns: tableColumns }) => tableColumns.includes(column)),\n    );\n\n    return {\n      columns,\n      columnsIntersection,\n      imageColumns,\n    };\n  }, [comparedRunUuids, artifactsByRun, tableNames]);\n","import { LegacySkeleton, useDesignSystemTheme } from '@databricks/design-system';\nimport { ReactNode, useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport type { KeyValueEntity, MetricEntitiesByName, ChartSectionConfig, ImageEntity } from '../../types';\nimport { RunsChartsCardConfig } from '../runs-charts/runs-charts.types';\nimport type { RunsChartType, SerializedRunsChartsCardConfigCard } from '../runs-charts/runs-charts.types';\nimport { RunsChartsConfigureModal } from '../runs-charts/components/RunsChartsConfigureModal';\nimport { getUUID } from '../../../common/utils/ActionUtils';\nimport type { RunsChartsRunData } from '../runs-charts/components/RunsCharts.common';\nimport {\n  AUTOML_EVALUATION_METRIC_TAG,\n  LOG_IMAGE_TAG_INDICATOR,\n  MLFLOW_EXPERIMENT_PRIMARY_METRIC_NAME,\n  MLFLOW_LOGGED_IMAGE_ARTIFACTS_PATH,\n} from '../../constants';\nimport { RunsChartsTooltipBody } from '../runs-charts/components/RunsChartsTooltipBody';\nimport { RunsChartsTooltipWrapper } from '../runs-charts/hooks/useRunsChartsTooltip';\nimport { useUpdateExperimentViewUIState } from '../experiment-page/contexts/ExperimentPageUIStateContext';\nimport { ExperimentPageUIState, RUNS_VISIBILITY_MODE } from '../experiment-page/models/ExperimentPageUIState';\nimport { RunRowType } from '../experiment-page/utils/experimentPage.row-types';\nimport { RunsChartsSectionAccordion } from '../runs-charts/components/sections/RunsChartsSectionAccordion';\nimport { ReduxState, ThunkDispatch } from '@mlflow/mlflow/src/redux-types';\nimport { SearchIcon } from '@databricks/design-system';\nimport { Input } from '@databricks/design-system';\nimport { useIntl } from 'react-intl';\nimport { shouldEnableImageGridCharts, shouldUseNewRunRowsVisibilityModel } from '../../../common/utils/FeatureUtils';\nimport {\n  type RunsGroupByConfig,\n  getRunGroupDisplayName,\n  isRemainingRunsGroup,\n  normalizeRunsGroupByKey,\n} from '../experiment-page/utils/experimentPage.group-row-utils';\nimport { filter, isString, keyBy, values } from 'lodash';\nimport {\n  type RunsChartsUIConfigurationSetter,\n  RunsChartsUIConfigurationContextProvider,\n  useUpdateRunsChartsUIConfiguration,\n  useReorderRunsChartsFn,\n  useInsertRunsChartsFn,\n  useRemoveRunsChartFn,\n  useConfirmChartCardConfigurationFn,\n} from '../runs-charts/hooks/useRunsChartsUIConfiguration';\nimport { useToggleRowVisibilityCallback } from '../experiment-page/hooks/useToggleRowVisibilityCallback';\nimport { RunsChartsFullScreenModal } from '../runs-charts/components/RunsChartsFullScreenModal';\nimport { usePopulateImagesByRunUuid } from '../experiment-page/hooks/usePopulateImagesByRunUuid';\nimport { useGetExperimentRunColor } from '../experiment-page/hooks/useExperimentRunColor';\nimport { DragAndDropProvider } from '../../../common/hooks/useDragAndDropElement';\n\nexport interface RunsCompareProps {\n  comparedRuns: RunRowType[];\n  isLoading: boolean;\n  metricKeyList: string[];\n  paramKeyList: string[];\n  experimentTags: Record<string, KeyValueEntity>;\n  compareRunCharts?: SerializedRunsChartsCardConfigCard[];\n  compareRunSections?: ChartSectionConfig[];\n  groupBy: null | string | RunsGroupByConfig;\n  autoRefreshEnabled?: boolean;\n  hideEmptyCharts?: boolean;\n}\n\n/**\n * Utility function: based on a run row coming from runs table, creates run data trace to be used in charts\n */\nconst createRunDataTrace = (\n  run: RunRowType,\n  latestMetricsByRunUuid: Record<string, MetricEntitiesByName>,\n  paramsByRunUuid: Record<string, Record<string, KeyValueEntity>>,\n  tagsByRunUuid: Record<string, Record<string, KeyValueEntity>>,\n  imagesByRunUuid: Record<string, Record<string, Record<string, ImageEntity>>>,\n  color: string,\n) => ({\n  uuid: run.runUuid,\n  displayName: run.runInfo?.runName || run.runUuid,\n  runInfo: run.runInfo,\n  metrics: latestMetricsByRunUuid[run.runUuid] || {},\n  params: paramsByRunUuid[run.runUuid] || {},\n  tags: tagsByRunUuid[run.runUuid] || {},\n  images: imagesByRunUuid[run.runUuid] || {},\n  color,\n  pinned: run.pinned,\n  pinnable: run.pinnable,\n  metricsHistory: {},\n  belongsToGroup: run.runDateAndNestInfo?.belongsToGroup,\n  hidden: run.hidden,\n});\n\n/**\n * Utility function: based on a group row coming from runs table, creates run group data trace to be used in charts\n */\nconst createGroupDataTrace = (run: RunRowType, color: string) => {\n  // Latest aggregated metrics in groups does not contain step or timestamps.\n  // For step, we're using maxStep which will help determine the chart type.\n  // For timestamp, we use 0 as a placeholder.\n  const metricsData = run.groupParentInfo?.aggregatedMetricData\n    ? keyBy(\n        values(run.groupParentInfo?.aggregatedMetricData).map(({ key, value, maxStep }) => ({\n          key,\n          value,\n          step: maxStep,\n          timestamp: 0,\n        })),\n        'key',\n      )\n    : {};\n  return {\n    uuid: run.rowUuid,\n    displayName: getRunGroupDisplayName(run.groupParentInfo),\n    groupParentInfo: run.groupParentInfo,\n    metrics: metricsData,\n    params: run.groupParentInfo?.aggregatedParamData || {},\n    // TODO: add tags for groups\n    tags: {},\n    images: {},\n    color,\n    pinned: run.pinned,\n    pinnable: run.pinnable,\n    metricsHistory: {},\n    hidden: run.hidden,\n  };\n};\n\n/**\n * Component displaying comparison charts and differences (and in future artifacts) between experiment runs.\n * Intended to be mounted next to runs table.\n *\n * This component extracts params/metrics from redux store by itself for quicker access. However,\n * it needs a provided list of compared run entries using same model as runs table.\n */\nexport const RunsCompareImpl = ({\n  isLoading,\n  comparedRuns,\n  metricKeyList,\n  paramKeyList,\n  experimentTags,\n  compareRunCharts,\n  compareRunSections,\n  groupBy,\n  autoRefreshEnabled,\n  hideEmptyCharts,\n}: RunsCompareProps) => {\n  // Updater function for the general experiment view UI state\n  const updateUIState = useUpdateExperimentViewUIState();\n  const getRunColor = useGetExperimentRunColor();\n\n  // Updater function for charts UI state\n  const updateChartsUIState = useUpdateRunsChartsUIConfiguration();\n\n  const { paramsByRunUuid, latestMetricsByRunUuid, tagsByRunUuid, imagesByRunUuid } = useSelector(\n    (state: ReduxState) => ({\n      paramsByRunUuid: state.entities.paramsByRunUuid,\n      latestMetricsByRunUuid: state.entities.latestMetricsByRunUuid,\n      tagsByRunUuid: state.entities.tagsByRunUuid,\n      imagesByRunUuid: state.entities.imagesByRunUuid,\n    }),\n  );\n\n  const { theme } = useDesignSystemTheme();\n  const [initiallyLoaded, setInitiallyLoaded] = useState(false);\n  const [configuredCardConfig, setConfiguredCardConfig] = useState<RunsChartsCardConfig | null>(null);\n  const [search, setSearch] = useState('');\n  const { formatMessage } = useIntl();\n\n  const groupByNormalized = useMemo(\n    () =>\n      // In case we encounter deprecated string-based group by descriptor\n      normalizeRunsGroupByKey(groupBy),\n    [groupBy],\n  );\n\n  const [fullScreenChart, setFullScreenChart] = useState<\n    { config: RunsChartsCardConfig; title: string; subtitle: ReactNode } | undefined\n  >(undefined);\n\n  const addNewChartCard = (metricSectionId: string) => {\n    return (type: RunsChartType) => {\n      // TODO: pass existing runs data and get pre-configured initial setup for every chart type\n      setConfiguredCardConfig(RunsChartsCardConfig.getEmptyChartCardByType(type, false, undefined, metricSectionId));\n    };\n  };\n\n  const startEditChart = useCallback((chartCard: RunsChartsCardConfig) => {\n    setConfiguredCardConfig(chartCard);\n  }, []);\n\n  useEffect(() => {\n    if (!initiallyLoaded && !isLoading) {\n      setInitiallyLoaded(true);\n    }\n  }, [initiallyLoaded, isLoading]);\n\n  const primaryMetricKey = useMemo(() => {\n    const automlEntry = experimentTags[AUTOML_EVALUATION_METRIC_TAG];\n    const mlflowPrimaryEntry = experimentTags[MLFLOW_EXPERIMENT_PRIMARY_METRIC_NAME];\n    return automlEntry?.value || mlflowPrimaryEntry?.value || metricKeyList[0] || '';\n  }, [experimentTags, metricKeyList]);\n\n  /**\n   * Dataset generated for all charts in a single place\n   */\n  const chartData: RunsChartsRunData[] = useMemo(() => {\n    if (!groupBy) {\n      return comparedRuns\n        .filter((run) => run.runInfo)\n        .filter((run) => shouldUseNewRunRowsVisibilityModel() || !run.hidden)\n        .map<RunsChartsRunData>((run) =>\n          createRunDataTrace(\n            run,\n            latestMetricsByRunUuid,\n            paramsByRunUuid,\n            tagsByRunUuid,\n            imagesByRunUuid,\n            getRunColor(run.runUuid),\n          ),\n        );\n    }\n\n    const groupChartDataEntries = comparedRuns\n      .filter((run) => shouldUseNewRunRowsVisibilityModel() || !run.hidden)\n      .filter((run) => run.groupParentInfo && !isRemainingRunsGroup(run.groupParentInfo))\n      .map<RunsChartsRunData>((group) => createGroupDataTrace(group, getRunColor(group.groupParentInfo?.groupId)));\n\n    const remainingRuns = comparedRuns\n      .filter((run) => shouldUseNewRunRowsVisibilityModel() || !run.hidden)\n      .filter((run) => !run.groupParentInfo && !run.runDateAndNestInfo?.belongsToGroup)\n      .map((run) =>\n        createRunDataTrace(\n          run,\n          latestMetricsByRunUuid,\n          paramsByRunUuid,\n          tagsByRunUuid,\n          imagesByRunUuid,\n          getRunColor(run.runUuid),\n        ),\n      );\n\n    return [...groupChartDataEntries, ...remainingRuns];\n  }, [groupBy, comparedRuns, latestMetricsByRunUuid, paramsByRunUuid, tagsByRunUuid, imagesByRunUuid, getRunColor]);\n\n  const filteredImageData = chartData.filter((run) => !run.hidden && run.tags[LOG_IMAGE_TAG_INDICATOR]);\n  usePopulateImagesByRunUuid({\n    runUuids: filteredImageData.map((run) => run.uuid),\n    runUuidsIsActive: filteredImageData.map((run) => run.runInfo?.status === 'RUNNING'),\n    enabled: shouldEnableImageGridCharts(),\n    autoRefreshEnabled,\n  });\n\n  // Set chart cards to the user-facing base config if there is no other information.\n  useEffect(() => {\n    if ((!compareRunSections || !compareRunCharts) && chartData.length > 0) {\n      const { resultChartSet, resultSectionSet } = RunsChartsCardConfig.getBaseChartAndSectionConfigs({\n        primaryMetricKey,\n        runsData: chartData,\n        useParallelCoordinatesChart: true,\n      });\n      updateChartsUIState((current) => ({\n        ...current,\n        compareRunCharts: resultChartSet,\n        compareRunSections: resultSectionSet,\n      }));\n    }\n  }, [compareRunCharts, compareRunSections, primaryMetricKey, chartData, updateChartsUIState]);\n\n  /**\n   * When chartData changes, we need to update the RunCharts with the latest charts\n   */\n  useEffect(() => {\n    updateChartsUIState((current) => {\n      if (!current.compareRunCharts || !current.compareRunSections) {\n        return current;\n      }\n\n      const { resultChartSet, resultSectionSet, isResultUpdated } = RunsChartsCardConfig.updateChartAndSectionConfigs({\n        compareRunCharts: current.compareRunCharts,\n        compareRunSections: current.compareRunSections,\n        runsData: chartData,\n        isAccordionReordered: current.isAccordionReordered,\n      });\n\n      if (!isResultUpdated) {\n        return current;\n      }\n      return {\n        ...current,\n        compareRunCharts: resultChartSet,\n        compareRunSections: resultSectionSet,\n      };\n    });\n  }, [chartData, updateChartsUIState]);\n\n  const onTogglePin = useCallback(\n    (runUuid: string) => {\n      updateUIState((existingFacets: ExperimentPageUIState) => ({\n        ...existingFacets,\n        runsPinned: !existingFacets.runsPinned.includes(runUuid)\n          ? [...existingFacets.runsPinned, runUuid]\n          : existingFacets.runsPinned.filter((r) => r !== runUuid),\n      }));\n    },\n    [updateUIState],\n  );\n\n  const toggleRunVisibility = useToggleRowVisibilityCallback(comparedRuns);\n\n  const onHideRun = useCallback(\n    (runUuid: string) => {\n      if (shouldUseNewRunRowsVisibilityModel()) {\n        toggleRunVisibility(RUNS_VISIBILITY_MODE.CUSTOM, runUuid);\n        return;\n      }\n      updateUIState((existingFacets: ExperimentPageUIState) => ({\n        ...existingFacets,\n        runsHidden: [...existingFacets.runsHidden, runUuid],\n      }));\n    },\n    [updateUIState, toggleRunVisibility],\n  );\n\n  const confirmChartCardConfiguration = useConfirmChartCardConfigurationFn();\n\n  const submitForm = (configuredCard: Partial<RunsChartsCardConfig>) => {\n    confirmChartCardConfiguration(configuredCard);\n\n    // Hide the modal\n    setConfiguredCardConfig(null);\n  };\n\n  /**\n   * Removes the chart from the compare run view.\n   */\n  const removeChart = useRemoveRunsChartFn();\n\n  /**\n   * Reorders the charts in the compare run view.\n   */\n  const reorderCharts = useReorderRunsChartsFn();\n\n  /*\n   * Inserts the source chart into the target group\n   */\n  const insertCharts = useInsertRunsChartsFn();\n\n  /**\n   * Data utilized by the tooltip system:\n   * runs data and toggle pin callback\n   */\n  const tooltipContextValue = useMemo(\n    () => ({ runs: chartData, onTogglePin, onHideRun }),\n    [chartData, onHideRun, onTogglePin],\n  );\n\n  if (!initiallyLoaded) {\n    return (\n      <div\n        css={{\n          flex: 1,\n          borderTop: `1px solid ${theme.colors.border}`,\n          borderLeft: `1px solid ${theme.colors.border}`,\n\n          // Let's cover 1 pixel of the grid's border for the sleek look\n          marginLeft: -1,\n\n          position: 'relative' as const,\n          backgroundColor: theme.colors.backgroundSecondary,\n          paddingLeft: theme.spacing.md,\n          paddingRight: theme.spacing.md,\n          paddingBottom: theme.spacing.md,\n          zIndex: 1,\n          overflowY: 'auto' as const,\n        }}\n      >\n        <LegacySkeleton />\n      </div>\n    );\n  }\n\n  return (\n    <div\n      css={{\n        flex: 1,\n        borderTop: `1px solid ${theme.colors.border}`,\n        borderLeft: `1px solid ${theme.colors.border}`,\n\n        // Let's cover 1 pixel of the grid's border for the sleek look\n        marginLeft: -1,\n\n        position: 'relative' as const,\n        backgroundColor: theme.colors.backgroundSecondary,\n        paddingLeft: theme.spacing.md,\n        paddingRight: theme.spacing.md,\n        paddingBottom: theme.spacing.md,\n        zIndex: 1,\n        overflowY: 'auto' as const,\n\n        // Make sure charts are visible even on small screens\n        minWidth: 320,\n      }}\n      data-testid=\"experiment-view-compare-runs-chart-area\"\n    >\n      <div\n        css={{\n          paddingTop: theme.spacing.sm,\n          paddingBottom: theme.spacing.sm,\n        }}\n      >\n        <Input\n          role=\"searchbox\"\n          prefix={<SearchIcon />}\n          value={search}\n          allowClear\n          onChange={(e) => setSearch(e.target.value)}\n          placeholder={formatMessage({\n            defaultMessage: 'Search metric charts',\n            description: 'Run page > Charts tab > Filter metric charts input > placeholder',\n          })}\n        />\n      </div>\n      <RunsChartsTooltipWrapper contextData={tooltipContextValue} component={RunsChartsTooltipBody}>\n        <DragAndDropProvider>\n          <RunsChartsSectionAccordion\n            compareRunSections={compareRunSections}\n            compareRunCharts={compareRunCharts}\n            reorderCharts={reorderCharts}\n            insertCharts={insertCharts}\n            chartData={chartData}\n            startEditChart={startEditChart}\n            removeChart={removeChart}\n            addNewChartCard={addNewChartCard}\n            search={search}\n            groupBy={groupByNormalized}\n            setFullScreenChart={setFullScreenChart}\n            autoRefreshEnabled={autoRefreshEnabled}\n            hideEmptyCharts={hideEmptyCharts}\n          />\n        </DragAndDropProvider>\n      </RunsChartsTooltipWrapper>\n      {configuredCardConfig && (\n        <RunsChartsConfigureModal\n          chartRunData={chartData}\n          metricKeyList={metricKeyList}\n          paramKeyList={paramKeyList}\n          config={configuredCardConfig}\n          onSubmit={submitForm}\n          onCancel={() => setConfiguredCardConfig(null)}\n          groupBy={groupByNormalized}\n        />\n      )}\n      <RunsChartsFullScreenModal\n        fullScreenChart={fullScreenChart}\n        onCancel={() => setFullScreenChart(undefined)}\n        chartData={chartData}\n        groupBy={groupByNormalized}\n        tooltipContextValue={tooltipContextValue}\n        tooltipComponent={RunsChartsTooltipBody}\n        autoRefreshEnabled={autoRefreshEnabled}\n      />\n    </div>\n  );\n};\n\nexport const RunsCompare = (props: RunsCompareProps) => {\n  // Updater function for the general experiment view UI state\n  const updateUIState = useUpdateExperimentViewUIState();\n\n  // An extracted partial updater function, responsible for setting charts UI state\n  const updateChartsUIState = useCallback<(stateSetter: RunsChartsUIConfigurationSetter) => void>(\n    (setter) => {\n      updateUIState((state) => ({\n        ...state,\n        ...setter(state),\n      }));\n    },\n    [updateUIState],\n  );\n\n  return (\n    <RunsChartsUIConfigurationContextProvider updateChartsUIState={updateChartsUIState}>\n      <RunsCompareImpl {...props} />\n    </RunsChartsUIConfigurationContextProvider>\n  );\n};\n","import { Button, ChevronLeftIcon, ChevronRightIcon, useDesignSystemTheme } from '@databricks/design-system';\nimport React, { useState } from 'react';\nimport { ResizableBox } from 'react-resizable';\nimport { useUpdateExperimentViewUIState } from '../../contexts/ExperimentPageUIStateContext';\nimport { Global } from '@emotion/react';\n\nconst RESIZE_BAR_WIDTH = 3;\n\n/**\n * A component wrapping experiment runs table and providing a resizer\n * to adjust its width when displayed in a split view.\n */\nexport const ExperimentViewRunsTableResizer = ({\n  runListHidden,\n  width,\n  onResize,\n  children,\n}: React.PropsWithChildren<{\n  runListHidden: boolean;\n  width: number;\n  onResize: React.Dispatch<React.SetStateAction<number>>;\n}>) => {\n  const updateUIState = useUpdateExperimentViewUIState();\n  const [dragging, setDragging] = useState(false);\n\n  return (\n    <>\n      <ResizableBox\n        css={{ display: 'flex', position: 'relative' }}\n        style={{ flex: `0 0 ${runListHidden ? 0 : width}px` }}\n        width={width}\n        axis=\"x\"\n        resizeHandles={['e']}\n        minConstraints={[250, 0]}\n        handle={\n          <ExperimentViewRunsTableResizerHandle\n            runListHidden={runListHidden}\n            updateRunListHidden={(value) => {\n              updateUIState((state) => ({ ...state, runListHidden: value }));\n            }}\n          />\n        }\n        onResize={(event, { size }) => {\n          if (runListHidden) {\n            return;\n          }\n          onResize(size.width);\n        }}\n        onResizeStart={() => !runListHidden && setDragging(true)}\n        onResizeStop={() => setDragging(false)}\n      >\n        {children}\n      </ResizableBox>\n      {dragging && (\n        <Global\n          styles={{\n            'body, :host': {\n              userSelect: 'none',\n            },\n          }}\n        />\n      )}\n    </>\n  );\n};\n\n/**\n * Internal use component: resizer handle for the runs table resizer\n */\nconst ExperimentViewRunsTableResizerHandle = React.forwardRef<\n  HTMLDivElement,\n  {\n    updateRunListHidden: (newValue: boolean) => void;\n    runListHidden: boolean;\n  }\n>(({ updateRunListHidden, runListHidden, ...props }, ref) => {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <div\n      ref={ref}\n      {...props}\n      css={{\n        transition: 'opacity 0.2s',\n        width: 0,\n        overflow: 'visible',\n        height: '100%',\n        position: 'relative',\n        zIndex: 10,\n        display: 'flex',\n        opacity: runListHidden ? 1 : 0,\n        '&:hover': {\n          opacity: 1,\n          '.bar': { opacity: 1 },\n          '.button': {\n            border: `2px solid ${theme.colors.actionDefaultBorderHover}`,\n          },\n        },\n      }}\n    >\n      <div\n        css={{\n          position: 'absolute',\n          // For the resizing area, use the icon size which is\n          // the same as \"collapse\" button\n          left: -theme.general.iconSize / 2,\n          width: theme.general.iconSize,\n          cursor: runListHidden ? undefined : 'ew-resize',\n          height: '100%',\n          top: 0,\n          bottom: 0,\n        }}\n      >\n        <div\n          className=\"button\"\n          css={{\n            top: '50%',\n            transition: 'border-color 0.2s',\n            position: 'absolute',\n            width: theme.general.iconSize,\n            height: theme.general.iconSize,\n            backgroundColor: theme.colors.backgroundPrimary,\n            borderRadius: theme.general.iconSize,\n            overflow: 'hidden',\n            border: `1px solid ${theme.colors.border}`,\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            zIndex: 11,\n          }}\n        >\n          <Button\n            componentId=\"mlflow.experiment_page.table_resizer.collapse\"\n            onClick={() => updateRunListHidden(!runListHidden)}\n            icon={runListHidden ? <ChevronRightIcon /> : <ChevronLeftIcon />}\n            size=\"small\"\n          />\n        </div>\n      </div>\n      <div\n        className=\"bar\"\n        css={{\n          position: 'absolute',\n          opacity: 0,\n          left: -RESIZE_BAR_WIDTH / 2,\n          width: RESIZE_BAR_WIDTH,\n          height: '100%',\n          top: 0,\n          bottom: 0,\n          backgroundColor: theme.colors.actionPrimaryBackgroundDefault,\n        }}\n      ></div>\n    </div>\n  );\n});\n","import React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useLegacyNotification } from '@databricks/design-system';\nimport {\n  DatasetSummary,\n  ExperimentEntity,\n  LIFECYCLE_FILTER,\n  MODEL_VERSION_FILTER,\n  RunDatasetWithTags,\n  UpdateExperimentViewStateFn,\n} from '../../../../types';\nimport { ExperimentRunsSelectorResult } from '../../utils/experimentRuns.selector';\nimport { ExperimentViewRunsControls } from './ExperimentViewRunsControls';\nimport { ExperimentViewRunsTable } from './ExperimentViewRunsTable';\nimport { ExperimentPageViewState } from '../../models/ExperimentPageViewState';\nimport Utils from '../../../../../common/utils/Utils';\nimport { ATTRIBUTE_COLUMN_SORT_KEY, MLFLOW_LOGGED_IMAGE_ARTIFACTS_PATH } from '../../../../constants';\nimport { RunRowType } from '../../utils/experimentPage.row-types';\nimport { useExperimentRunRows } from '../../utils/experimentPage.row-utils';\nimport { useFetchedRunsNotification } from '../../hooks/useFetchedRunsNotification';\nimport { DatasetWithRunType, ExperimentViewDatasetDrawer } from './ExperimentViewDatasetDrawer';\nimport { useExperimentViewLocalStore } from '../../hooks/useExperimentViewLocalStore';\nimport { EvaluationArtifactCompareView } from '../../../evaluation-artifacts-compare/EvaluationArtifactCompareView';\nimport { shouldEnableExperimentPageAutoRefresh } from '../../../../../common/utils/FeatureUtils';\nimport { CreateNewRunContextProvider } from '../../hooks/useCreateNewRun';\nimport { useExperimentPageViewMode } from '../../hooks/useExperimentPageViewMode';\nimport { ExperimentPageUIState } from '../../models/ExperimentPageUIState';\nimport { RunsCompare } from '../../../runs-compare/RunsCompare';\nimport { ErrorWrapper } from '../../../../../common/utils/ErrorWrapper';\nimport { ReduxState, ThunkDispatch } from '../../../../../redux-types';\nimport { ExperimentPageSearchFacetsState } from '../../models/ExperimentPageSearchFacetsState';\nimport { useIsTabActive } from '../../../../../common/hooks/useIsTabActive';\nimport { ExperimentViewRunsTableResizer } from './ExperimentViewRunsTableResizer';\nimport { RunsChartsSetHighlightContextProvider } from '../../../runs-charts/hooks/useRunsChartTraceHighlight';\n\nexport interface ExperimentViewRunsOwnProps {\n  isLoading: boolean;\n  experiments: ExperimentEntity[];\n  modelVersionFilter?: MODEL_VERSION_FILTER;\n  lifecycleFilter?: LIFECYCLE_FILTER;\n  datasetsFilter?: DatasetSummary[];\n  onMaximizedChange?: (newIsMaximized: boolean) => void;\n\n  searchFacetsState: ExperimentPageSearchFacetsState;\n  uiState: ExperimentPageUIState;\n}\n\nexport interface ExperimentViewRunsProps extends ExperimentViewRunsOwnProps {\n  runsData: ExperimentRunsSelectorResult;\n  isLoadingRuns: boolean;\n  loadMoreRuns: () => Promise<any>;\n  moreRunsAvailable: boolean;\n  requestError: ErrorWrapper | null;\n  refreshRuns: () => void;\n}\n\n/**\n * Creates time with milliseconds set to zero, usable in calculating\n * relative time\n */\nconst createCurrentTime = () => {\n  const mountTime = new Date();\n  mountTime.setMilliseconds(0);\n  return mountTime;\n};\n\nexport const INITIAL_RUN_COLUMN_SIZE = 295;\n\nexport const ExperimentViewRuns = React.memo((props: ExperimentViewRunsProps) => {\n  const [compareRunsMode] = useExperimentPageViewMode();\n  const {\n    experiments,\n    runsData,\n    uiState,\n    searchFacetsState,\n    isLoadingRuns,\n    loadMoreRuns,\n    moreRunsAvailable,\n    requestError,\n    refreshRuns,\n  } = props;\n\n  // Non-persistable view model state is being created locally\n  const [viewState, setViewState] = useState(new ExperimentPageViewState());\n\n  const { experimentId } = experiments[0];\n  const expandRowsStore = useExperimentViewLocalStore(experimentId);\n  const [expandRows, updateExpandRows] = useState<boolean>(expandRowsStore.getItem('expandRows') === 'true');\n\n  useEffect(() => {\n    expandRowsStore.setItem('expandRows', expandRows);\n  }, [expandRows, expandRowsStore]);\n\n  const {\n    paramKeyList,\n    metricKeyList,\n    tagsList,\n    paramsList,\n    metricsList,\n    runInfos,\n    runUuidsMatchingFilter,\n    datasetsList,\n  } = runsData;\n\n  const modelVersionsByRunUuid = useSelector(({ entities }: ReduxState) => entities.modelVersionsByRunUuid);\n\n  /**\n   * Create a list of run infos with assigned metrics, params and tags\n   */\n  const runData = useMemo(\n    () =>\n      runInfos.map((runInfo, index) => ({\n        runInfo,\n        params: paramsList[index],\n        metrics: metricsList[index],\n        tags: tagsList[index],\n        datasets: datasetsList[index],\n      })),\n    [datasetsList, metricsList, paramsList, runInfos, tagsList],\n  );\n\n  const { orderByKey, searchFilter } = searchFacetsState;\n  // In new view state model, runs state is in the uiState instead of the searchFacetsState.\n  const { runsPinned, runsExpanded, runsHidden, runListHidden } = uiState;\n\n  const isComparingRuns = compareRunsMode !== 'TABLE';\n\n  const updateViewState = useCallback<UpdateExperimentViewStateFn>(\n    (newPartialViewState) => setViewState((currentViewState) => ({ ...currentViewState, ...newPartialViewState })),\n    [],\n  );\n\n  const addColumnClicked = useCallback(() => {\n    updateViewState({ columnSelectorVisible: true });\n  }, [updateViewState]);\n\n  const shouldNestChildrenAndFetchParents = useMemo(\n    () => (!orderByKey && !searchFilter) || orderByKey === ATTRIBUTE_COLUMN_SORT_KEY.DATE,\n    [orderByKey, searchFilter],\n  );\n\n  // Value used a reference for the \"date\" column\n  const [referenceTime, setReferenceTime] = useState(createCurrentTime);\n\n  // We're setting new reference date only when new runs data package has arrived\n  useEffect(() => {\n    setReferenceTime(createCurrentTime);\n  }, [runInfos]);\n\n  const filteredTagKeys = useMemo(() => Utils.getVisibleTagKeyList(tagsList), [tagsList]);\n\n  const [isDrawerOpen, setIsDrawerOpen] = useState<boolean>(false);\n  const [selectedDatasetWithRun, setSelectedDatasetWithRun] = useState<DatasetWithRunType>();\n\n  // Use new, memoized version of the row creation function.\n  // Internally disabled if the flag is not set.\n  const visibleRuns = useExperimentRunRows({\n    experiments,\n    paramKeyList,\n    metricKeyList,\n    modelVersionsByRunUuid,\n    runsExpanded,\n    tagKeyList: filteredTagKeys,\n    nestChildren: shouldNestChildrenAndFetchParents,\n    referenceTime,\n    runData,\n    runUuidsMatchingFilter,\n    runsPinned,\n    runsHidden,\n    groupBy: uiState.groupBy,\n    groupsExpanded: uiState.groupsExpanded,\n    runsHiddenMode: uiState.runsHiddenMode,\n    useGroupedValuesInCharts: uiState.useGroupedValuesInCharts,\n  });\n\n  const [notificationsFn, notificationContainer] = useLegacyNotification();\n  const showFetchedRunsNotifications = useFetchedRunsNotification(notificationsFn);\n\n  const [tableAreaWidth, setTableAreaWidth] = useState(INITIAL_RUN_COLUMN_SIZE);\n\n  const loadMoreRunsCallback = useCallback(() => {\n    if (moreRunsAvailable && !isLoadingRuns) {\n      // Don't do this if we're loading runs\n      // to prevent too many requests from being\n      // sent out\n      loadMoreRuns().then((runs) => {\n        // Display notification about freshly loaded runs\n        showFetchedRunsNotifications(runs, runInfos);\n      });\n    }\n  }, [moreRunsAvailable, isLoadingRuns, loadMoreRuns, runInfos, showFetchedRunsNotifications]);\n\n  const datasetSelected = useCallback((dataset: RunDatasetWithTags, run: RunRowType) => {\n    setSelectedDatasetWithRun({ datasetWithTags: dataset, runData: run });\n    setIsDrawerOpen(true);\n  }, []);\n\n  const isTabActive = useIsTabActive();\n  const autoRefreshEnabled = uiState.autoRefreshEnabled && shouldEnableExperimentPageAutoRefresh() && isTabActive;\n  const usingGroupedValuesInCharts = uiState.useGroupedValuesInCharts ?? true;\n\n  const tableElement = (\n    <ExperimentViewRunsTable\n      experiments={experiments}\n      runsData={runsData}\n      searchFacetsState={searchFacetsState}\n      viewState={viewState}\n      isLoading={isLoadingRuns}\n      updateViewState={updateViewState}\n      onAddColumnClicked={addColumnClicked}\n      rowsData={visibleRuns}\n      loadMoreRunsFunc={loadMoreRunsCallback}\n      moreRunsAvailable={moreRunsAvailable}\n      onDatasetSelected={datasetSelected}\n      expandRows={expandRows}\n      uiState={uiState}\n      compareRunsMode={compareRunsMode}\n    />\n  );\n\n  return (\n    <CreateNewRunContextProvider visibleRuns={visibleRuns} refreshRuns={refreshRuns}>\n      <RunsChartsSetHighlightContextProvider>\n        <ExperimentViewRunsControls\n          viewState={viewState}\n          updateViewState={updateViewState}\n          runsData={runsData}\n          searchFacetsState={searchFacetsState}\n          experimentId={experimentId}\n          requestError={requestError}\n          expandRows={expandRows}\n          updateExpandRows={updateExpandRows}\n          refreshRuns={refreshRuns}\n          uiState={uiState}\n          isLoading={isLoadingRuns}\n        />\n        <div\n          css={{\n            minHeight: 225, // This is the exact height for displaying a minimum five rows and table header\n            height: '100%',\n            position: 'relative',\n            display: 'flex',\n          }}\n        >\n          {isComparingRuns ? (\n            <ExperimentViewRunsTableResizer\n              onResize={setTableAreaWidth}\n              runListHidden={runListHidden}\n              width={tableAreaWidth}\n            >\n              {tableElement}\n            </ExperimentViewRunsTableResizer>\n          ) : (\n            tableElement\n          )}\n          {compareRunsMode === 'CHART' && (\n            <RunsCompare\n              isLoading={isLoadingRuns}\n              comparedRuns={visibleRuns}\n              metricKeyList={runsData.metricKeyList}\n              paramKeyList={runsData.paramKeyList}\n              experimentTags={runsData.experimentTags}\n              compareRunCharts={uiState.compareRunCharts}\n              compareRunSections={uiState.compareRunSections}\n              groupBy={usingGroupedValuesInCharts ? uiState.groupBy : null}\n              autoRefreshEnabled={autoRefreshEnabled}\n              hideEmptyCharts={uiState.hideEmptyCharts}\n            />\n          )}\n          {compareRunsMode === 'ARTIFACT' && (\n            <EvaluationArtifactCompareView\n              comparedRuns={visibleRuns}\n              viewState={viewState}\n              updateViewState={updateViewState}\n              onDatasetSelected={datasetSelected}\n              disabled={Boolean(uiState.groupBy)}\n            />\n          )}\n          {notificationContainer}\n          {selectedDatasetWithRun && (\n            <ExperimentViewDatasetDrawer\n              isOpen={isDrawerOpen}\n              setIsOpen={setIsDrawerOpen}\n              selectedDatasetWithRun={selectedDatasetWithRun}\n              setSelectedDatasetWithRun={setSelectedDatasetWithRun}\n            />\n          )}\n        </div>\n      </RunsChartsSetHighlightContextProvider>\n    </CreateNewRunContextProvider>\n  );\n});\n","import { useContext } from 'react';\n\nimport { GetExperimentsContext } from '../contexts/GetExperimentsContext';\n\nexport const useFetchExperiments = () => {\n  const getExperimentsContext = useContext(GetExperimentsContext);\n\n  if (!getExperimentsContext) {\n    throw new Error('Trying to use GetExperimentsContext actions outside of the context!');\n  }\n\n  return getExperimentsContext;\n};\n","import LocalStorageUtils from '../../../../common/utils/LocalStorageUtils';\nimport Utils from '../../../../common/utils/Utils';\n\nimport { ExperimentPageUIState, createExperimentPageUIState } from '../models/ExperimentPageUIState';\nimport {\n  ExperimentPageSearchFacetsState,\n  createExperimentPageSearchFacetsState,\n} from '../models/ExperimentPageSearchFacetsState';\n\n/**\n * Loads current view state (UI state, view state) in the local storage.\n */\nexport function loadExperimentViewState(idKey: string) {\n  try {\n    const localStorageInstance = LocalStorageUtils.getStoreForComponent('ExperimentPage', idKey);\n    return localStorageInstance.loadComponentState();\n  } catch {\n    Utils.logErrorAndNotifyUser(`Error: malformed persisted search state for experiment(s) ${idKey}`);\n\n    return {\n      ...createExperimentPageUIState(),\n      ...createExperimentPageSearchFacetsState(),\n    };\n  }\n}\n\n/**\n * Persists view state (UI state, view state) in the local storage.\n */\nexport function saveExperimentViewState(data: ExperimentPageUIState & ExperimentPageSearchFacetsState, idKey: string) {\n  const localStorageInstance = LocalStorageUtils.getStoreForComponent('ExperimentPage', idKey);\n  localStorageInstance.saveComponentState(data);\n}\n","import { useEffect, useMemo } from 'react';\n\nimport { pick } from 'lodash';\nimport { createExperimentPageSearchFacetsState } from '../models/ExperimentPageSearchFacetsState';\nimport { ExperimentPageUIState } from '../models/ExperimentPageUIState';\nimport { loadExperimentViewState, saveExperimentViewState } from '../utils/persistSearchFacets';\nimport {\n  EXPERIMENT_PAGE_QUERY_PARAM_KEYS,\n  ExperimentQueryParamsSearchFacets,\n  useUpdateExperimentPageSearchFacets,\n} from './useExperimentPageSearchFacets';\n\n/**\n * Takes care of initializing the search facets from persisted view state and persisting them.\n * Partially replaces GetExperimentRunsContext.\n */\nexport const usePersistExperimentPageViewState = (\n  uiState: ExperimentPageUIState,\n  searchFacets: ExperimentQueryParamsSearchFacets | null,\n  experimentIds: string[],\n  disabled = false,\n) => {\n  const setSearchFacets = useUpdateExperimentPageSearchFacets();\n\n  const persistKey = useMemo(() => (experimentIds ? JSON.stringify(experimentIds.sort()) : null), [experimentIds]);\n\n  // If there are no query params visible in the address bar, either reinstantiate\n  // them from persisted view state or use default values.\n  useEffect(() => {\n    if (disabled) {\n      return;\n    }\n    if (!searchFacets) {\n      const persistedViewState = persistKey ? loadExperimentViewState(persistKey) : null;\n      const rebuiltViewState = pick(\n        { ...createExperimentPageSearchFacetsState(), ...persistedViewState },\n        EXPERIMENT_PAGE_QUERY_PARAM_KEYS,\n      );\n      setSearchFacets(rebuiltViewState, { replace: true });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [searchFacets, persistKey, disabled]);\n\n  // Persist complete view state in local storage when either search facets or UI state change\n  useEffect(() => {\n    if (!searchFacets || !persistKey || disabled) {\n      return;\n    }\n    saveExperimentViewState({ ...searchFacets, ...uiState }, persistKey);\n  }, [searchFacets, uiState, persistKey, disabled]);\n};\n","import {\n  ExperimentEntity,\n  ExperimentStoreEntities,\n  KeyValueEntity,\n  LIFECYCLE_FILTER,\n  ModelVersionInfoEntity,\n  MODEL_VERSION_FILTER,\n  DatasetSummary,\n  RunInfoEntity,\n  RunDatasetWithTags,\n  MetricEntity,\n} from '../../../types';\nimport { getLatestMetrics } from '../../../reducers/MetricReducer';\nimport { getExperimentTags, getParams, getRunDatasets, getRunInfo, getRunTags } from '../../../reducers/Reducers';\n\nexport type ExperimentRunsSelectorResult = {\n  /**\n   * Array of run infos\n   */\n  runInfos: RunInfoEntity[];\n\n  /**\n   * List of unique metric keys\n   */\n  runUuidsMatchingFilter: string[];\n\n  /**\n   * List of unique metric keys\n   */\n  metricKeyList: string[];\n\n  /**\n   * List of unique param keys\n   */\n  paramKeyList: string[];\n\n  /**\n   * List of metrics indexed by the respective runs.\n   * Example: metricsList[2] contains list of all\n   * metrics corresponding to the 3rd run in the run list\n   */\n  metricsList: MetricEntity[][];\n\n  /**\n   * List of metrics indexed by the respective runs.\n   * Example: paramsList[2] contains list of all\n   * params corresponding to the 3rd run in the run list\n   */\n  paramsList: KeyValueEntity[][];\n\n  /**\n   * List of tags indexed by the respective runs.\n   * Example: tagsList[2] contains dictionary of all\n   * tags corresponding to the 3rd run in the run list\n   */\n  tagsList: Record<string, KeyValueEntity>[];\n\n  /**\n   * Dictionary containing model information objects indexed by run uuid\n   */\n  modelVersionsByRunUuid: Record<string, ModelVersionInfoEntity[]>;\n\n  /**\n   * Dictionary containing all tags assigned to a experiment\n   * (single experiment only)\n   */\n  experimentTags: Record<string, KeyValueEntity>;\n\n  /**\n   * List of dataset arrays indexed by the respective runs.\n   * E.g. datasetsList[2] yields an array of all\n   * datasets corresponding to the 3rd run in the run list\n   */\n  datasetsList: RunDatasetWithTags[][];\n};\n\nexport type ExperimentRunsSelectorParams = {\n  experiments: ExperimentEntity[];\n  experimentIds?: string[];\n  lifecycleFilter?: LIFECYCLE_FILTER;\n  modelVersionFilter?: MODEL_VERSION_FILTER;\n  datasetsFilter?: DatasetSummary[];\n};\n\n/**\n * Extracts run infos filtered by lifecycle filter and model version filter\n */\nconst extractRunInfos = (\n  runUuids: string[],\n  state: { entities: ExperimentStoreEntities },\n  {\n    lifecycleFilter = LIFECYCLE_FILTER.ACTIVE,\n    modelVersionFilter = MODEL_VERSION_FILTER.ALL_RUNS,\n    datasetsFilter = [],\n  }: ExperimentRunsSelectorParams,\n): RunInfoEntity[] => {\n  const { modelVersionsByRunUuid } = state.entities;\n\n  return (\n    runUuids\n      // Get the basic run info\n      .map((run_id) => [getRunInfo(run_id, state), getRunDatasets(run_id, state)])\n      // Filter out runs by given lifecycle filter\n      .filter(([rInfo, _]) => {\n        if (lifecycleFilter === LIFECYCLE_FILTER.ACTIVE) {\n          return rInfo.lifecycleStage === 'active';\n        } else {\n          return rInfo.lifecycleStage === 'deleted';\n        }\n      })\n      // Filter out runs by given model version filter\n      .filter(([rInfo, _]) => {\n        if (modelVersionFilter === MODEL_VERSION_FILTER.ALL_RUNS) {\n          return true;\n        } else if (modelVersionFilter === MODEL_VERSION_FILTER.WITH_MODEL_VERSIONS) {\n          return rInfo.runUuid in modelVersionsByRunUuid;\n        } else if (modelVersionFilter === MODEL_VERSION_FILTER.WTIHOUT_MODEL_VERSIONS) {\n          return !(rInfo.runUuid in modelVersionsByRunUuid);\n        } else {\n          console.warn('Invalid input to model version filter - defaulting to showing all runs.');\n          return true;\n        }\n      })\n      .filter(([_, datasets]) => {\n        if (!datasetsFilter || datasetsFilter.length === 0) return true;\n        if (!datasets) return false;\n\n        // Returns true if there exists a dataset that is in datasetsFilter\n        return datasets.some((datasetWithTags: RunDatasetWithTags) => {\n          const datasetName = datasetWithTags.dataset.name;\n          const datasetDigest = datasetWithTags.dataset.digest;\n          const datasetTag = datasetWithTags.tags\n            ? datasetWithTags.tags.find((tag) => tag.key === 'mlflow.data.context')\n            : undefined;\n          return datasetsFilter.some(\n            ({ name, digest, context }) =>\n              name === datasetName &&\n              digest === datasetDigest &&\n              (datasetTag ? context === datasetTag.value : context === undefined),\n          );\n        });\n      })\n      .map(([rInfo, _]) => rInfo)\n  );\n};\n\nexport const experimentRunsSelector = (\n  state: { entities: ExperimentStoreEntities },\n  params: ExperimentRunsSelectorParams,\n): ExperimentRunsSelectorResult => {\n  const { experiments } = params;\n  const experimentIds = params.experimentIds || experiments.map((e) => e.experimentId);\n  const comparingExperiments = experimentIds.length > 1;\n\n  /**\n   * Extract run UUIDs relevant to selected experiments\n   */\n  const runUuids = Object.values(state.entities.runInfosByUuid)\n    .filter(({ experimentId }) => experimentIds.includes(experimentId))\n    .map(({ runUuid }) => runUuid);\n\n  /**\n   * Extract model version and runs matching filter directly from the store\n   */\n  const { modelVersionsByRunUuid, runUuidsMatchingFilter } = state.entities;\n\n  /**\n   * Extract run infos\n   */\n  const runInfos = extractRunInfos(runUuids, state, params);\n\n  /**\n   * Set of unique metric keys\n   */\n  const metricKeysSet = new Set<string>();\n\n  /**\n   * Set of unique param keys\n   */\n  const paramKeysSet = new Set<string>();\n\n  const datasetsList = runInfos.map((runInfo) => {\n    return state.entities.runDatasetsByUuid[runInfo.runUuid];\n  });\n\n  /**\n   * Extracting lists of metrics by run index\n   */\n  const metricsList = runInfos.map((runInfo) => {\n    const metricsByRunUuid = getLatestMetrics(runInfo.runUuid, state);\n    const metrics = Object.values(metricsByRunUuid || {}) as any[];\n    metrics.forEach((metric) => {\n      metricKeysSet.add(metric.key);\n    });\n    return metrics;\n  }) as MetricEntity[][];\n\n  /**\n   * Extracting lists of params by run index\n   */\n  const paramsList = runInfos.map((runInfo) => {\n    const paramValues = Object.values(getParams(runInfo.runUuid, state)) as any[];\n    paramValues.forEach((param) => {\n      paramKeysSet.add(param.key);\n    });\n    return paramValues;\n  }) as KeyValueEntity[][];\n\n  /**\n   * Extracting dictionaries of tags by run index\n   */\n  const tagsList = runInfos.map((runInfo) => getRunTags(runInfo.runUuid, state)) as Record<string, KeyValueEntity>[];\n\n  const firstExperimentId = experimentIds[0];\n\n  /**\n   * If there is only one experiment, extract experiment tags as well\n   */\n  const experimentTags = (comparingExperiments ? {} : getExperimentTags(firstExperimentId, state)) as Record<\n    string,\n    KeyValueEntity\n  >;\n\n  return {\n    modelVersionsByRunUuid,\n    experimentTags,\n    runInfos,\n    paramsList,\n    tagsList,\n    metricsList,\n    runUuidsMatchingFilter,\n    datasetsList,\n    metricKeyList: Array.from(metricKeysSet.values()).sort(),\n    paramKeyList: Array.from(paramKeysSet.values()).sort(),\n  };\n};\n","import { useEffect, useRef } from 'react';\nimport { RUNS_SEARCH_MAX_RESULTS } from '../../../actions';\nimport { isArray, isEqual } from 'lodash';\nimport type { ExperimentQueryParamsSearchFacets } from './useExperimentPageSearchFacets';\nimport type { ExperimentRunsSelectorResult } from '../utils/experimentRuns.selector';\nimport { RUNS_AUTO_REFRESH_INTERVAL, createSearchRunsParams } from '../utils/experimentPage.fetch-utils';\nimport type { FetchRunsHookFunction } from './useExperimentRuns';\n\n/**\n * Enables auto-refreshing runs on the experiment page.\n * The hook will schedule a new runs fetch every `RUNS_AUTO_REFRESH_INTERVAL` milliseconds and will be postponed\n * if user is currently loading runs or changes the search facets.\n */\nexport const useExperimentRunsAutoRefresh = ({\n  experimentIds,\n  lastFetchedTime,\n  fetchRuns,\n  searchFacets,\n  enabled,\n  cachedPinnedRuns,\n  runsData,\n  isLoadingRuns,\n}: {\n  cachedPinnedRuns: React.MutableRefObject<string[]>;\n  lastFetchedTime: React.MutableRefObject<number | null>;\n  enabled: boolean;\n  experimentIds: string[];\n  fetchRuns: FetchRunsHookFunction;\n  searchFacets: ExperimentQueryParamsSearchFacets | null;\n  runsData: ExperimentRunsSelectorResult;\n  isLoadingRuns: boolean;\n}) => {\n  const refreshTimeoutRef = useRef<number | undefined>(undefined);\n\n  const isLoadingImmediate = useRef(isLoadingRuns);\n  const autoRefreshEnabledRef = useRef(enabled);\n  const currentResults = useRef(runsData.runInfos);\n\n  currentResults.current = runsData.runInfos;\n  isLoadingImmediate.current = isLoadingRuns;\n  autoRefreshEnabledRef.current = enabled;\n\n  useEffect(() => {\n    // Each time the parameters change, clear the timeout and try to schedule a new one\n    window.clearTimeout(refreshTimeoutRef.current);\n\n    // If auto refresh has been disabled or user is currently loading runs, do not schedule a new refresh\n    if (!enabled || isLoadingRuns) {\n      return;\n    }\n\n    const scheduleRefresh = async () => {\n      const hasBeenInitialized = Boolean(lastFetchedTime.current);\n      const timePassed = lastFetchedTime.current ? Date.now() - lastFetchedTime.current : 0;\n      if (searchFacets && hasBeenInitialized && timePassed >= RUNS_AUTO_REFRESH_INTERVAL) {\n        const requestedPageCount = Math.ceil(currentResults.current.length / RUNS_SEARCH_MAX_RESULTS);\n\n        const requestParams = {\n          ...createSearchRunsParams(\n            experimentIds,\n            { ...searchFacets, runsPinned: cachedPinnedRuns.current },\n            Date.now(),\n          ),\n          requestedFacets: searchFacets,\n          maxResults: requestedPageCount * RUNS_SEARCH_MAX_RESULTS,\n        };\n\n        await fetchRuns(requestParams, {\n          isAutoRefreshing: true,\n          discardResultsFn: (lastRequestedParams) => {\n            const existingPageCount = Math.ceil(currentResults.current.length / RUNS_SEARCH_MAX_RESULTS);\n\n            // At this moment, check if the results from auto-refresh should be considered. If the following\n            // conditions are met, the results from auto-refresh will be discarded.\n            if (\n              // Skip if auto-refresh has been disabled before the results response came back\n              !autoRefreshEnabledRef.current ||\n              // Skip if user has loaded more runs since the last request\n              existingPageCount !== requestedPageCount ||\n              // Skip if the requested facets have changed since the last request\n              !isEqual(lastRequestedParams.requestedFacets, requestParams.requestedFacets)\n            ) {\n              return true;\n            }\n\n            // Otherwise, return \"false\" and consider the results from auto-refresh as valid\n            return false;\n          },\n        });\n      }\n\n      // Clear the timeout before scheduling a new one\n      window.clearTimeout(refreshTimeoutRef.current);\n\n      // If auto refresh has been disabled during last fetch, do not schedule a new one\n      if (!autoRefreshEnabledRef.current) {\n        return;\n      }\n      refreshTimeoutRef.current = window.setTimeout(scheduleRefresh, RUNS_AUTO_REFRESH_INTERVAL);\n    };\n    scheduleRefresh();\n    return () => {\n      clearTimeout(refreshTimeoutRef.current);\n    };\n  }, [experimentIds, fetchRuns, searchFacets, enabled, cachedPinnedRuns, lastFetchedTime, isLoadingRuns]);\n};\n","import { useCallback, useEffect, useMemo, useRef, useState } from 'react';\n\nimport { useDispatch } from 'react-redux';\nimport { ReduxState, ThunkDispatch } from '../../../../redux-types';\nimport { loadMoreRunsApi, searchRunsApi } from '../../../actions';\nimport { ExperimentPageUIState } from '../models/ExperimentPageUIState';\nimport { createSearchRunsParams, fetchModelVersionsForRuns } from '../utils/experimentPage.fetch-utils';\nimport { ExperimentRunsSelectorResult, experimentRunsSelector } from '../utils/experimentRuns.selector';\nimport { ExperimentQueryParamsSearchFacets } from './useExperimentPageSearchFacets';\nimport { ExperimentPageSearchFacetsState } from '../models/ExperimentPageSearchFacetsState';\nimport { ErrorWrapper } from '../../../../common/utils/ErrorWrapper';\nimport { searchModelVersionsApi } from '../../../../model-registry/actions';\nimport { shouldEnableExperimentPageAutoRefresh } from '../../../../common/utils/FeatureUtils';\nimport Utils from '../../../../common/utils/Utils';\nimport { useExperimentRunsAutoRefresh } from './useExperimentRunsAutoRefresh';\nimport { RunEntity } from '../../../types';\n\nexport type FetchRunsHookParams = ReturnType<typeof createSearchRunsParams> & {\n  requestedFacets: ExperimentPageSearchFacetsState;\n};\n\nexport type FetchRunsHookFunction = (\n  params: FetchRunsHookParams,\n  options?: {\n    isAutoRefreshing?: boolean;\n    discardResultsFn?: (lastRequestedParams: FetchRunsHookParams) => boolean;\n  },\n) => Promise<RunEntity[]>;\n\n// Calculate actual params to use for fetching runs\nconst createFetchRunsRequestParams = (\n  searchFacets: ExperimentQueryParamsSearchFacets | null,\n  experimentIds: string[],\n  runsPinned: string[],\n): FetchRunsHookParams | null => {\n  if (!searchFacets || !experimentIds.length) {\n    return null;\n  }\n  const searchParams = createSearchRunsParams(experimentIds, { ...searchFacets, runsPinned }, Date.now());\n  return { ...searchParams, requestedFacets: searchFacets };\n};\n\n/**\n * This hook will request for new runs data based on the current experiment page search facets and UI state.\n * Replaces GetExperimentRunsContext and a substantial portion of <ExperimentRuns> component stack.\n */\nexport const useExperimentRuns = (\n  uiState: ExperimentPageUIState,\n  searchFacets: ExperimentQueryParamsSearchFacets | null,\n  experimentIds: string[],\n  disabled = false,\n) => {\n  const dispatch = useDispatch<ThunkDispatch>();\n\n  const [runsData, setRunsData] = useState<ExperimentRunsSelectorResult>(() => createEmptyRunsResult());\n\n  const persistKey = useMemo(() => (experimentIds ? JSON.stringify(experimentIds.sort()) : null), [experimentIds]);\n  const [isLoadingRuns, setIsLoadingRuns] = useState(true);\n  const [isInitialLoadingRuns, setIsInitialLoadingRuns] = useState(true);\n  const [nextPageToken, setNextPageToken] = useState<string | null>(null);\n  const [requestError, setRequestError] = useState<ErrorWrapper | null>(null);\n  const cachedPinnedRuns = useRef<string[]>([]);\n\n  const lastFetchedTime = useRef<number | null>(null);\n  const lastRequestedParams = useRef<FetchRunsHookParams | null>(null);\n\n  // Reset initial loading state when experiment IDs change\n  useEffect(() => {\n    if (disabled) {\n      return;\n    }\n    setIsInitialLoadingRuns(true);\n    setRunsData(createEmptyRunsResult());\n  }, [persistKey, disabled]);\n\n  const setResultRunsData = useCallback(\n    (store: ReduxState, experimentIds: string[], requestedFacets: ExperimentPageSearchFacetsState) => {\n      setRunsData(\n        experimentRunsSelector(store, {\n          datasetsFilter: requestedFacets.datasetsFilter,\n          lifecycleFilter: requestedFacets.lifecycleFilter,\n          modelVersionFilter: requestedFacets.modelVersionFilter,\n          // In the new version of the view state, experiment IDs are used instead of full experiment entities:\n          experiments: [],\n          experimentIds,\n        }),\n      );\n    },\n    [],\n  );\n\n  useEffect(() => {\n    cachedPinnedRuns.current = uiState.runsPinned;\n  }, [uiState.runsPinned]);\n\n  const loadModelVersions = useCallback(\n    (runs: Parameters<typeof fetchModelVersionsForRuns>[0]) => {\n      fetchModelVersionsForRuns(runs || [], searchModelVersionsApi, dispatch);\n    },\n    [dispatch],\n  );\n\n  // Main function for fetching runs\n  const fetchRuns: FetchRunsHookFunction = useCallback(\n    (fetchParams, options = {}) =>\n      dispatch((thunkDispatch: ThunkDispatch, getStore: () => ReduxState) => {\n        // If we're auto-refreshing, we don't want to show the loading spinner and\n        // we don't want to update the last requested params - they're used to determine\n        // whether to discard results when the automatically fetched data changes.\n        if (!options.isAutoRefreshing) {\n          setIsLoadingRuns(true);\n          lastRequestedParams.current = fetchParams;\n        }\n        return thunkDispatch((fetchParams.pageToken ? loadMoreRunsApi : searchRunsApi)(fetchParams))\n          .then(async ({ value }) => {\n            setNextPageToken(value.next_page_token || null);\n            lastFetchedTime.current = Date.now();\n\n            setIsLoadingRuns(false);\n            setIsInitialLoadingRuns(false);\n\n            if (lastRequestedParams.current && options.discardResultsFn?.(lastRequestedParams.current)) {\n              return value;\n            }\n\n            // We rely on redux reducer to update the state with new runs data,\n            // then we pick it up from the store. This benefits other pages that use same data\n            // from the same store slice (e.g. run details page). Will be changed when moving to graphQL.\n            setResultRunsData(getStore(), fetchParams.experimentIds, fetchParams.requestedFacets);\n\n            // In the end, load model versions for the fetched runs\n            loadModelVersions(value.runs || []);\n            return value;\n          })\n          .catch((e) => {\n            setIsLoadingRuns(false);\n            setIsInitialLoadingRuns(false);\n            setRequestError(e);\n            Utils.logErrorAndNotifyUser(e);\n          });\n      }),\n    [dispatch, setResultRunsData, loadModelVersions],\n  );\n\n  // Fetch runs when new request params are available\n  // (e.g. after search facets change)\n  useEffect(() => {\n    if (disabled) {\n      return;\n    }\n    const requestParams = createFetchRunsRequestParams(searchFacets, experimentIds, cachedPinnedRuns.current);\n    if (requestParams) {\n      fetchRuns(requestParams);\n    }\n  }, [fetchRuns, dispatch, disabled, searchFacets, experimentIds]);\n\n  const loadMoreRuns = async () => {\n    const requestParams = createFetchRunsRequestParams(searchFacets, experimentIds, cachedPinnedRuns.current);\n    if (!nextPageToken || !requestParams) {\n      return [];\n    }\n    return fetchRuns({ ...requestParams, pageToken: nextPageToken });\n  };\n\n  const refreshRuns = () => {\n    const requestParams = createFetchRunsRequestParams(searchFacets, experimentIds, cachedPinnedRuns.current);\n    if (requestParams) {\n      fetchRuns(requestParams);\n    }\n  };\n\n  useExperimentRunsAutoRefresh({\n    experimentIds,\n    fetchRuns,\n    searchFacets,\n    enabled: uiState.autoRefreshEnabled && shouldEnableExperimentPageAutoRefresh(),\n    cachedPinnedRuns,\n    runsData,\n    isLoadingRuns: isLoadingRuns,\n    lastFetchedTime,\n  });\n\n  return {\n    isLoadingRuns,\n    moreRunsAvailable: Boolean(nextPageToken),\n    refreshRuns,\n    loadMoreRuns,\n    isInitialLoadingRuns,\n    runsData,\n    requestError,\n  };\n};\n\nconst createEmptyRunsResult = () => ({\n  datasetsList: [],\n  experimentTags: {},\n  metricKeyList: [],\n  metricsList: [],\n  modelVersionsByRunUuid: {},\n  paramKeyList: [],\n  paramsList: [],\n  runInfos: [],\n  runUuidsMatchingFilter: [],\n  tagsList: [],\n});\n","import { useEffect, useMemo, useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { EXPERIMENT_PAGE_QUERY_PARAM_KEYS, useUpdateExperimentPageSearchFacets } from './useExperimentPageSearchFacets';\nimport { pick } from 'lodash';\nimport { EXPERIMENT_PAGE_UI_STATE_FIELDS, ExperimentPageUIState } from '../models/ExperimentPageUIState';\nimport { ExperimentPageSearchFacetsState } from '../models/ExperimentPageSearchFacetsState';\nimport { ExperimentEntity, KeyValueEntity } from '../../../types';\nimport { useNavigate, useSearchParams } from '../../../../common/utils/RoutingUtils';\nimport Utils from '../../../../common/utils/Utils';\nimport {\n  EXPERIMENT_PAGE_VIEW_STATE_SHARE_TAG_PREFIX,\n  EXPERIMENT_PAGE_VIEW_STATE_SHARE_URL_PARAM_KEY,\n} from '../../../constants';\nimport Routes from '../../../routes';\nimport { isTextCompressedDeflate, textDecompressDeflate } from '../../../../common/utils/StringUtils';\n\nconst deserializePersistedState = async (state: string) => {\n  if (isTextCompressedDeflate(state)) {\n    return JSON.parse(await textDecompressDeflate(state));\n  }\n  return JSON.parse(state);\n};\n\n/**\n * Hook that handles loading shared view state from URL and updating the search facets/UI state accordingly\n */\nexport const useSharedExperimentViewState = (\n  uiStateSetter: React.Dispatch<React.SetStateAction<ExperimentPageUIState>>,\n  experiment?: ExperimentEntity,\n  disabled = false,\n) => {\n  const [searchParams] = useSearchParams();\n  const intl = useIntl();\n  const viewStateShareKey = searchParams.get(EXPERIMENT_PAGE_VIEW_STATE_SHARE_URL_PARAM_KEY);\n\n  const isViewStateShared = Boolean(viewStateShareKey);\n\n  const updateSearchFacets = useUpdateExperimentPageSearchFacets();\n\n  const [sharedSearchFacetsState, setSharedSearchFacetsState] = useState<ExperimentPageSearchFacetsState | null>(null);\n  const [sharedUiState, setSharedUiState] = useState<ExperimentPageUIState | null>(null);\n  const [sharedStateError, setSharedStateError] = useState<string | null>(null);\n  const [sharedStateErrorMessage, setSharedStateErrorMessage] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (!viewStateShareKey || !experiment) {\n      return;\n    }\n\n    // Find the tag with the given share key\n    const shareViewTag = experiment.tags.find(\n      ({ key }) => key === `${EXPERIMENT_PAGE_VIEW_STATE_SHARE_TAG_PREFIX}${viewStateShareKey}`,\n    );\n\n    const tryParseSharedStateFromTag = async (shareViewTag: KeyValueEntity) => {\n      try {\n        const parsedSharedViewState = await deserializePersistedState(shareViewTag.value);\n\n        // First, extract search facets part of the shared view state\n        const sharedSearchFacetsState = pick(\n          parsedSharedViewState,\n          EXPERIMENT_PAGE_QUERY_PARAM_KEYS,\n        ) as ExperimentPageSearchFacetsState;\n\n        // Then, extract UI state part of the shared view state\n        const sharedUiState = pick(parsedSharedViewState, EXPERIMENT_PAGE_UI_STATE_FIELDS) as ExperimentPageUIState;\n\n        setSharedSearchFacetsState(sharedSearchFacetsState);\n        setSharedUiState(sharedUiState);\n        setSharedStateError(null);\n        setSharedStateErrorMessage(null);\n      } catch (e) {\n        setSharedSearchFacetsState(null);\n        setSharedUiState(null);\n        setSharedStateError(`Error loading shared view state: share key is invalid`);\n        setSharedStateErrorMessage(\n          intl.formatMessage({\n            defaultMessage: `Error loading shared view state: share key is invalid`,\n            description: 'Experiment page > share viewstate > error > share key is invalid',\n          }),\n        );\n      }\n    };\n\n    // If the tag exists, parse the view state from the tag value\n    if (!shareViewTag) {\n      setSharedSearchFacetsState(null);\n      setSharedUiState(null);\n      setSharedStateError(`Error loading shared view state: share key ${viewStateShareKey} does not exist`);\n      setSharedStateErrorMessage(\n        intl.formatMessage(\n          {\n            defaultMessage: `Error loading shared view state: share key \"{viewStateShareKey}\" does not exist`,\n            description: 'Experiment page > share viewstate > error > share key does not exist',\n          },\n          {\n            viewStateShareKey,\n          },\n        ),\n      );\n      return;\n    }\n\n    tryParseSharedStateFromTag(shareViewTag);\n  }, [experiment, viewStateShareKey, intl]);\n\n  useEffect(() => {\n    if (!sharedSearchFacetsState || disabled) {\n      return;\n    }\n    updateSearchFacets(sharedSearchFacetsState, { replace: true });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [sharedSearchFacetsState, disabled]);\n\n  useEffect(() => {\n    if (!sharedUiState || disabled) {\n      return;\n    }\n    uiStateSetter(sharedUiState);\n  }, [uiStateSetter, sharedUiState, disabled]);\n\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (disabled) {\n      return;\n    }\n    if (sharedStateError && experiment) {\n      // If there's an error with share key, remove it from the URL and notify user\n      Utils.logErrorAndNotifyUser(new Error(sharedStateError));\n      Utils.displayGlobalErrorNotification(sharedStateErrorMessage, 3);\n      navigate(Routes.getExperimentPageRoute(experiment.experimentId), { replace: true });\n    }\n  }, [sharedStateError, sharedStateErrorMessage, experiment, navigate, disabled]);\n\n  return {\n    isViewStateShared,\n    sharedStateError,\n  };\n};\n","import { useCallback, useEffect, useMemo, useReducer, useState } from 'react';\nimport {\n  EXPERIMENT_PAGE_UI_STATE_FIELDS,\n  ExperimentPageUIState,\n  createExperimentPageUIState,\n} from '../models/ExperimentPageUIState';\nimport { loadExperimentViewState } from '../utils/persistSearchFacets';\nimport { keys, pick } from 'lodash';\nimport { ExperimentRunsSelectorResult } from '../utils/experimentRuns.selector';\nimport { UseExperimentsResult } from './useExperiments';\nimport { useUpdateExperimentPageSearchFacets } from './useExperimentPageSearchFacets';\nimport { expandedEvaluationRunRowsUIStateInitializer } from '../utils/expandedRunsViewStateInitializer';\n\n// prettier-ignore\nconst uiStateInitializers = [\n  expandedEvaluationRunRowsUIStateInitializer,\n];\n\ntype UpdateUIStateAction = {\n  type: 'UPDATE_UI_STATE';\n  payload: ExperimentPageUIState | ((current: ExperimentPageUIState) => ExperimentPageUIState);\n};\n\ntype SetupInitUIStateAction = {\n  type: 'INITIAL_UI_STATE_SEEDED';\n};\n\ntype LoadNewExperimentAction = {\n  type: 'LOAD_NEW_EXPERIMENT';\n  payload: { uiState: ExperimentPageUIState; isFirstVisit: boolean; newPersistKey: string };\n};\n\ntype UIStateContainer = {\n  uiState: ExperimentPageUIState;\n  currentPersistKey: string;\n  isFirstVisit: boolean;\n};\n\nconst baseState = createExperimentPageUIState();\n\nexport const useInitializeUIState = (\n  experimentIds: string[],\n): [\n  ExperimentPageUIState,\n  React.Dispatch<React.SetStateAction<ExperimentPageUIState>>,\n  (experiments: UseExperimentsResult, runs: ExperimentRunsSelectorResult) => void,\n] => {\n  const persistKey = useMemo(() => JSON.stringify(experimentIds.sort()), [experimentIds]);\n\n  const updateSearchFacets = useUpdateExperimentPageSearchFacets();\n\n  const [{ uiState, isFirstVisit }, dispatchAction] = useReducer(\n    (state: UIStateContainer, action: UpdateUIStateAction | SetupInitUIStateAction | LoadNewExperimentAction) => {\n      if (action.type === 'UPDATE_UI_STATE') {\n        const newState = typeof action.payload === 'function' ? action.payload(state.uiState) : action.payload;\n        return {\n          ...state,\n          uiState: newState,\n        };\n      }\n      if (action.type === 'INITIAL_UI_STATE_SEEDED') {\n        if (!state.isFirstVisit) {\n          return state;\n        }\n        return {\n          ...state,\n          isFirstVisit: false,\n        };\n      }\n      if (action.type === 'LOAD_NEW_EXPERIMENT') {\n        return {\n          uiState: action.payload.uiState,\n          isFirstVisit: action.payload.isFirstVisit,\n          currentPersistKey: action.payload.newPersistKey,\n        };\n      }\n      return state;\n    },\n    undefined,\n    () => {\n      const persistedViewState = loadExperimentViewState(persistKey);\n      const persistedStateFound = keys(persistedViewState || {}).length;\n      const persistedUIState = persistedStateFound ? pick(persistedViewState, EXPERIMENT_PAGE_UI_STATE_FIELDS) : {};\n      return {\n        uiState: { ...baseState, ...persistedUIState },\n        isFirstVisit: !persistedStateFound,\n        currentPersistKey: persistKey,\n      };\n    },\n  );\n\n  const setUIState = useCallback(\n    (newStateOrSelector: ExperimentPageUIState | ((current: ExperimentPageUIState) => ExperimentPageUIState)) => {\n      dispatchAction({ type: 'UPDATE_UI_STATE', payload: newStateOrSelector });\n    },\n    [],\n  );\n\n  const seedInitialUIState = useCallback(\n    (experiments: UseExperimentsResult, runs: ExperimentRunsSelectorResult) => {\n      // Disable if it's not the first visit or there are no experiments/runs\n      if (!isFirstVisit || experiments.length === 0 || runs.runInfos.length === 0) {\n        return;\n      }\n\n      // Mark the initial state as seeded (effectively set isFirstVisit to false)\n      dispatchAction({ type: 'INITIAL_UI_STATE_SEEDED' });\n\n      // Then, update the UI state using all known UI state initializers\n      setUIState((uiState) => {\n        const newUIState = uiStateInitializers.reduce((state, initializer) => initializer(experiments, state, runs), {\n          ...uiState,\n        });\n\n        return newUIState;\n      });\n    },\n    // prettier-ignore\n    [\n      isFirstVisit,\n      setUIState,\n    ],\n  );\n\n  // Each time persist key (experiment IDs) change, load persisted view state\n  useEffect(() => {\n    const persistedViewState = loadExperimentViewState(persistKey);\n    const persistedUIState = pick(persistedViewState, EXPERIMENT_PAGE_UI_STATE_FIELDS);\n    const isFirstVisit = !keys(persistedViewState || {}).length;\n    dispatchAction({\n      type: 'LOAD_NEW_EXPERIMENT',\n      payload: { uiState: { ...baseState, ...persistedUIState }, isFirstVisit, newPersistKey: persistKey },\n    });\n  }, [persistKey]);\n\n  return [uiState, setUIState, seedInitialUIState];\n};\n","import { compact } from 'lodash';\nimport { MLFLOW_RUN_TYPE_TAG, MLFLOW_RUN_TYPE_VALUE_EVALUATION } from '../../../constants';\nimport { ExperimentEntity } from '../../../types';\nimport { ExperimentPageUIState } from '../models/ExperimentPageUIState';\nimport { EXPERIMENT_PARENT_ID_TAG } from './experimentPage.common-utils';\nimport { ExperimentRunsSelectorResult } from './experimentRuns.selector';\n\nexport const expandedEvaluationRunRowsUIStateInitializer = (\n  experiments: ExperimentEntity[],\n  uiState: ExperimentPageUIState,\n  runsData: ExperimentRunsSelectorResult,\n) => {\n  const evaluationRunIds = runsData.runInfos\n    .filter((run, index) => runsData.tagsList[index]?.[MLFLOW_RUN_TYPE_TAG]?.value === MLFLOW_RUN_TYPE_VALUE_EVALUATION)\n    .map(({ runUuid }) => runUuid);\n\n  const parentIdsOfEvaluationRunIds = compact(\n    runsData.runInfos.map(\n      ({ runUuid }, index) =>\n        evaluationRunIds.includes(runUuid) && runsData.tagsList[index]?.[EXPERIMENT_PARENT_ID_TAG].value,\n    ),\n  );\n\n  if (parentIdsOfEvaluationRunIds.length) {\n    return {\n      ...uiState,\n      runsExpanded: parentIdsOfEvaluationRunIds.reduce(\n        (aggregate, runUuid) => ({ ...aggregate, [runUuid]: true }),\n        uiState.runsExpanded,\n      ),\n    };\n  }\n  return uiState;\n};\n","import { ExperimentEntity, KeyValueEntity } from '../../../types';\nimport {\n  Button,\n  ChevronDownIcon,\n  ChevronUpIcon,\n  Modal,\n  PencilIcon,\n  LegacyTooltip,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { useCallback, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getExperimentTags } from '../../../reducers/Reducers';\nimport { NOTE_CONTENT_TAG } from '../../../utils/NoteUtils';\nimport { useFetchExperiments } from '../hooks/useFetchExperiments';\nimport { ThunkDispatch } from '../../../../redux-types';\nimport React from 'react';\nimport ReactMde, { SvgIcon } from 'react-mde';\nimport {\n  forceAnchorTagNewTab,\n  getMarkdownConverter,\n  sanitizeConvertedHtml,\n} from '../../../../common/utils/MarkdownUtils';\nimport { FormattedMessage } from 'react-intl';\n\nconst extractNoteFromTags = (tags: Record<string, KeyValueEntity>) =>\n  Object.values(tags).find((t) => t.key === NOTE_CONTENT_TAG)?.value || undefined;\n\nconst toolbarCommands = [\n  ['header', 'bold', 'italic', 'strikethrough'],\n  ['link', 'code', 'image'],\n  ['unordered-list', 'ordered-list'],\n];\n\nconst converter = getMarkdownConverter();\n\nconst getSanitizedHtmlContent = (markdown: string | undefined) => {\n  if (markdown) {\n    const sanitized = sanitizeConvertedHtml(converter.makeHtml(markdown));\n    return forceAnchorTagNewTab(sanitized);\n  }\n  return null;\n};\n\nexport const ExperimentViewDescriptionNotes = ({\n  experiment,\n  editing,\n  setEditing,\n  setShowAddDescriptionButton,\n}: {\n  experiment: ExperimentEntity;\n  editing: boolean;\n  setEditing: (editing: boolean) => void;\n  setShowAddDescriptionButton: (show: boolean) => void;\n}) => {\n  const storedNote = useSelector((state) => {\n    const tags = getExperimentTags(experiment.experimentId, state);\n    return tags ? extractNoteFromTags(tags) : '';\n  });\n  setShowAddDescriptionButton(!storedNote);\n\n  const [tmpNote, setTmpNote] = useState(storedNote);\n  const [selectedTab, setSelectedTab] = useState<'write' | 'preview' | undefined>('write');\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  const { theme } = useDesignSystemTheme();\n  const PADDING_HORIZONTAL = 12;\n  const DISPLAY_LINE_HEIGHT = 16;\n  const COLLAPSE_MAX_HEIGHT = DISPLAY_LINE_HEIGHT + 2 * theme.spacing.sm;\n  const MIN_EDITOR_HEIGHT = 200;\n  const MAX_EDITOR_HEIGHT = 500;\n  const MIN_PREVIEW_HEIGHT = 20;\n\n  const {\n    actions: { setExperimentTagApi },\n  } = useFetchExperiments();\n\n  const dispatch = useDispatch<ThunkDispatch>();\n\n  const handleSubmitEditNote = useCallback(\n    (updatedNote: any) => {\n      setEditing(false);\n      setShowAddDescriptionButton(!updatedNote);\n      const action = setExperimentTagApi(experiment.experimentId, NOTE_CONTENT_TAG, updatedNote);\n      dispatch(action);\n    },\n    [experiment.experimentId, setExperimentTagApi, dispatch, setEditing, setShowAddDescriptionButton],\n  );\n\n  return (\n    <div>\n      {tmpNote && (\n        <div\n          style={{\n            whiteSpace: isExpanded ? 'normal' : 'pre',\n            lineHeight: theme.typography.lineHeightSm,\n            background: theme.colors.backgroundSecondary,\n            display: 'flex',\n            alignItems: 'flex-start',\n            padding: theme.spacing.xs,\n          }}\n        >\n          <div\n            style={{\n              flexGrow: 1,\n              marginRight: PADDING_HORIZONTAL,\n              overflow: 'hidden',\n              overflowWrap: isExpanded ? 'break-word' : undefined,\n              padding: `${theme.spacing.sm}px ${PADDING_HORIZONTAL}px`,\n              maxHeight: isExpanded ? 'none' : COLLAPSE_MAX_HEIGHT + 'px',\n            }}\n          >\n            <div\n              // eslint-disable-next-line react/no-danger\n              dangerouslySetInnerHTML={{ __html: getSanitizedHtmlContent(tmpNote) }}\n            />\n          </div>\n          <Button\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_experimentviewdescriptionnotes.tsx_114\"\n            icon={<PencilIcon />}\n            onClick={() => setEditing(true)}\n            style={{ padding: `0px ${theme.spacing.sm}px` }}\n          />\n          {isExpanded ? (\n            <Button\n              componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_experimentviewdescriptionnotes.tsx_120\"\n              icon={<ChevronUpIcon />}\n              onClick={() => setIsExpanded(false)}\n              style={{ padding: `0px ${theme.spacing.sm}px` }}\n            />\n          ) : (\n            <Button\n              componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_experimentviewdescriptionnotes.tsx_126\"\n              icon={<ChevronDownIcon />}\n              onClick={() => setIsExpanded(true)}\n              style={{ padding: `0px ${theme.spacing.sm}px` }}\n            />\n          )}\n        </div>\n      )}\n      <Modal\n        title={\n          <FormattedMessage\n            defaultMessage=\"Add description\"\n            description=\"experiment page > description modal > title\"\n          />\n        }\n        visible={editing}\n        okText={\n          <FormattedMessage defaultMessage=\"Save\" description=\"experiment page > description modal > save button\" />\n        }\n        cancelText={\n          <FormattedMessage defaultMessage=\"Cancel\" description=\"experiment page > description modal > cancel button\" />\n        }\n        onOk={() => {\n          handleSubmitEditNote(tmpNote);\n          setEditing(false);\n        }}\n        onCancel={() => {\n          setTmpNote(storedNote);\n          setEditing(false);\n        }}\n      >\n        <React.Fragment>\n          <ReactMde\n            value={tmpNote}\n            minEditorHeight={MIN_EDITOR_HEIGHT}\n            maxEditorHeight={MAX_EDITOR_HEIGHT}\n            minPreviewHeight={MIN_PREVIEW_HEIGHT}\n            toolbarCommands={toolbarCommands}\n            onChange={(value) => setTmpNote(value)}\n            selectedTab={selectedTab}\n            onTabChange={(newTab) => setSelectedTab(newTab)}\n            generateMarkdownPreview={() => Promise.resolve(getSanitizedHtmlContent(tmpNote))}\n            getIcon={(name) => (\n              <LegacyTooltip title={name}>\n                <span css={{ color: theme.colors.textPrimary }}>\n                  <SvgIcon icon={name} />\n                </span>\n              </LegacyTooltip>\n            )}\n          />\n        </React.Fragment>\n      </Modal>\n    </div>\n  );\n};\n","import { CopyIcon, Typography } from '@databricks/design-system';\nimport { useIntl } from 'react-intl';\nimport { ExperimentEntity } from '../../../../types';\n\n/**\n * Experiment page header part responsible for copying\n * the title after clicking on the icon\n */\nexport const ExperimentViewCopyTitle = ({\n  experiment,\n  size,\n}: {\n  experiment: ExperimentEntity;\n  size: 'sm' | 'md' | 'lg' | 'xl';\n}) => {\n  const intl = useIntl();\n\n  return (\n    <Typography.Text\n      size={size}\n      dangerouslySetAntdProps={{\n        copyable: {\n          text: experiment.name,\n          icon: <CopyIcon />,\n          tooltips: [\n            intl.formatMessage({\n              defaultMessage: 'Copy path',\n              description: 'Copy tooltip to copy experiment path from experiment runs table header',\n            }),\n            intl.formatMessage({\n              defaultMessage: 'Path copied',\n              description: 'Tooltip displayed after experiment path was successfully copied to clipboard',\n            }),\n          ],\n        },\n      }}\n    />\n  );\n};\n","import React from 'react';\n\nexport interface ExperimentViewArtifactLocationProps {\n  artifactLocation: string;\n}\n\nexport const ExperimentViewArtifactLocation = ({ artifactLocation }: ExperimentViewArtifactLocationProps) => {\n  return <>{artifactLocation}</>;\n};\n","import { CopyIcon, Typography } from '@databricks/design-system';\nimport { useIntl } from 'react-intl';\nimport { ExperimentEntity } from '../../../../types';\n\n/**\n * Experiment page header part responsible for copying\n * the experimentId after clicking on the icon\n */\nexport const ExperimentViewCopyExperimentId = ({ experiment }: { experiment: ExperimentEntity }) => {\n  const intl = useIntl();\n\n  return (\n    <Typography.Text\n      size=\"md\"\n      dangerouslySetAntdProps={{\n        copyable: {\n          text: experiment.experimentId,\n          icon: <CopyIcon />,\n          tooltips: [\n            intl.formatMessage({\n              defaultMessage: 'Copy experiment id',\n              description: 'Copy tooltip to copy experiment id from experiment runs table header',\n            }),\n            intl.formatMessage({\n              defaultMessage: 'Experiment id copied',\n              description: 'Tooltip displayed after experiment id was successfully copied to clipboard',\n            }),\n          ],\n        },\n      }}\n    />\n  );\n};\n","import { CopyIcon, Typography } from '@databricks/design-system';\nimport { useIntl } from 'react-intl';\nimport { ExperimentEntity } from '../../../../types';\n\n/**\n * Experiment page header part responsible for copying\n * the artifact location after clicking on the icon\n */\nexport const ExperimentViewCopyArtifactLocation = ({ experiment }: { experiment: ExperimentEntity }) => {\n  const intl = useIntl();\n\n  return (\n    <Typography.Text\n      size=\"md\"\n      dangerouslySetAntdProps={{\n        copyable: {\n          text: experiment.artifactLocation,\n          icon: <CopyIcon />,\n          tooltips: [\n            intl.formatMessage({\n              defaultMessage: 'Copy artifact location',\n              description: 'Copy tooltip to copy experiment artifact location from experiment runs table header',\n            }),\n            intl.formatMessage({\n              defaultMessage: 'Artifact location copied',\n              description: 'Tooltip displayed after experiment artifact location was successfully copied to clipboard',\n            }),\n          ],\n        },\n      }}\n    />\n  );\n};\n","import React, { useMemo } from 'react';\nimport { Button, NewWindowIcon, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport { PageHeader } from '../../../../../shared/building_blocks/PageHeader';\nimport { ExperimentViewCopyTitle } from './ExperimentViewCopyTitle';\nimport { ExperimentViewHeaderShareButton } from './ExperimentViewHeaderShareButton';\nimport { ExperimentEntity } from '../../../../types';\nimport { useExperimentPageFeedbackUrl } from '../../hooks/useExperimentPageFeedbackUrl';\nimport { ExperimentPageSearchFacetsState } from '../../models/ExperimentPageSearchFacetsState';\nimport { ExperimentPageUIState } from '../../models/ExperimentPageUIState';\nimport { ExperimentViewArtifactLocation } from '../ExperimentViewArtifactLocation';\nimport { ExperimentViewCopyExperimentId } from './ExperimentViewCopyExperimentId';\nimport { ExperimentViewCopyArtifactLocation } from './ExperimentViewCopyArtifactLocation';\nimport { LegacyTooltip } from '@databricks/design-system';\nimport { InfoIcon } from '@databricks/design-system';\nimport { Popover } from '@databricks/design-system';\n\n/**\n * Header for a single experiment page. Displays title, breadcrumbs and provides\n * controls for renaming, deleting and editing permissions.\n */\nexport const ExperimentViewHeader = React.memo(\n  ({\n    experiment,\n    searchFacetsState,\n    uiState,\n    showAddDescriptionButton,\n    setEditing,\n  }: {\n    experiment: ExperimentEntity;\n    searchFacetsState?: ExperimentPageSearchFacetsState;\n    uiState?: ExperimentPageUIState;\n    showAddDescriptionButton: boolean;\n    setEditing: (editing: boolean) => void;\n  }) => {\n    // eslint-disable-next-line prefer-const\n    let breadcrumbs: React.ReactNode[] = [];\n    const experimentIds = useMemo(() => (experiment ? [experiment?.experimentId] : []), [experiment]);\n\n    const { theme } = useDesignSystemTheme();\n\n    /**\n     * Extract the last part of the experiment name\n     */\n    const normalizedExperimentName = useMemo(() => experiment.name.split('/').pop(), [experiment.name]);\n\n    const feedbackFormUrl = useExperimentPageFeedbackUrl();\n\n    const renderFeedbackForm = () => {\n      const feedbackLink = (\n        <Button\n          href={feedbackFormUrl}\n          target=\"_blank\"\n          rel=\"noreferrer\"\n          componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_header_experimentviewheaderv2.tsx_100\"\n          css={{ marginLeft: theme.spacing.sm }}\n          type=\"link\"\n          size=\"small\"\n          endIcon={<NewWindowIcon />}\n        >\n          <FormattedMessage\n            defaultMessage=\"Provide Feedback\"\n            description=\"Link to a survey for users to give feedback\"\n          />\n        </Button>\n      );\n      return feedbackLink;\n    };\n\n    const getShareButton = () => {\n      const shareButtonElement = (\n        <ExperimentViewHeaderShareButton\n          experimentIds={experimentIds}\n          searchFacetsState={searchFacetsState}\n          uiState={uiState}\n        />\n      );\n      return shareButtonElement;\n    };\n\n    const getInfoTooltip = () => {\n      return (\n        <div style={{ display: 'flex' }}>\n          <LegacyTooltip\n            placement=\"bottomLeft\"\n            dangerouslySetAntdProps={{ overlayStyle: { maxWidth: 'none' } }}\n            arrowPointAtCenter\n            title={\n              <div\n                css={{\n                  display: 'flex',\n                  flexDirection: 'column',\n                  flexWrap: 'nowrap',\n                }}\n                data-testid=\"experiment-view-header-info-tooltip-content\"\n              >\n                <div style={{ whiteSpace: 'nowrap' }}>\n                  <FormattedMessage\n                    defaultMessage=\"Path\"\n                    description=\"Label for displaying the current experiment path\"\n                  />\n                  : {experiment.name + ' '}\n                  <ExperimentViewCopyTitle experiment={experiment} size=\"md\" />\n                </div>\n                <div style={{ whiteSpace: 'nowrap' }}>\n                  <FormattedMessage\n                    defaultMessage=\"Experiment ID\"\n                    description=\"Label for displaying the current experiment in view\"\n                  />\n                  : {experiment.experimentId + ' '}\n                  <ExperimentViewCopyExperimentId experiment={experiment} />\n                </div>\n                <div style={{ whiteSpace: 'nowrap' }}>\n                  <FormattedMessage\n                    defaultMessage=\"Artifact Location\"\n                    description=\"Label for displaying the experiment artifact location\"\n                  />\n                  : <ExperimentViewArtifactLocation artifactLocation={experiment.artifactLocation} />{' '}\n                  <ExperimentViewCopyArtifactLocation experiment={experiment} />\n                </div>\n              </div>\n            }\n          >\n            <Button\n              size=\"small\"\n              type=\"link\"\n              componentId=\"mlflow.experiment_page.header.info_tooltip\"\n              icon={<InfoIcon css={{ color: theme.colors.textSecondary }} />}\n              data-testid=\"experiment-view-header-info-tooltip\"\n              aria-label=\"Info\"\n            />\n          </LegacyTooltip>\n        </div>\n      );\n    };\n    const getAddDescriptionButton = () => {\n      return (\n        <Button\n          componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_header_experimentviewheaderv2.tsx_271\"\n          size=\"small\"\n          onClick={() => {\n            setEditing(true);\n          }}\n          css={{\n            marginLeft: theme.spacing.sm,\n            background: `${theme.colors.backgroundSecondary} !important`,\n            border: 'none',\n          }}\n        >\n          <Typography.Text size=\"md\">Add Description</Typography.Text>\n        </Button>\n      );\n    };\n\n    const HEADER_MAX_WIDTH = '70%';\n\n    return (\n      <PageHeader\n        title={\n          <div\n            css={{\n              [theme.responsive.mediaQueries.xs]: {\n                display: 'inline',\n                wordBreak: 'break-all',\n              },\n              [theme.responsive.mediaQueries.sm]: {\n                display: 'inline-block',\n                whiteSpace: 'nowrap',\n                overflow: 'hidden',\n                maxWidth: HEADER_MAX_WIDTH,\n                textOverflow: 'ellipsis',\n                verticalAlign: 'middle',\n              },\n            }}\n          >\n            {normalizedExperimentName}\n          </div>\n        }\n        titleAddOns={\n          <>\n            {getInfoTooltip()}\n            {feedbackFormUrl && renderFeedbackForm()}\n            {showAddDescriptionButton && getAddDescriptionButton()}\n          </>\n        }\n        breadcrumbs={breadcrumbs}\n        spacerSize=\"sm\"\n      >\n        {getShareButton()}\n      </PageHeader>\n    );\n  },\n);\n","import { EXPERIMENT_PAGE_FEEDBACK_URL } from '../../../constants';\n\n// Returns link to the experiment page feedback form.\nexport const useExperimentPageFeedbackUrl = () => {\n  const url = EXPERIMENT_PAGE_FEEDBACK_URL;\n  return url;\n};\n","import { useDesignSystemTheme } from '@databricks/design-system';\nimport { TracesView } from '../../traces/TracesView';\nimport { ExperimentViewRunsModeSwitch } from './runs/ExperimentViewRunsModeSwitch';\n\nexport const ExperimentViewTraces = ({ experimentIds }: { experimentIds: string[] }) => {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <div\n      css={{\n        marginTop: theme.spacing.md,\n        display: 'flex',\n        flexDirection: 'column',\n        gap: theme.spacing.sm,\n        flex: 1,\n        overflow: 'hidden',\n      }}\n    >\n      <ExperimentViewRunsModeSwitch hideBorder={false} />\n      <TracesView experimentIds={experimentIds} />\n    </div>\n  );\n};\n","import { LegacySkeleton } from '@databricks/design-system';\n\nimport { useEffect, useState } from 'react';\nimport { ErrorCodes } from '../../../common/constants';\nimport NotFoundPage from '../NotFoundPage';\nimport { PermissionDeniedView } from '../PermissionDeniedView';\nimport { TracesView } from '../traces/TracesView';\nimport { ExperimentViewHeaderCompare } from './components/header/ExperimentViewHeaderCompare';\nimport { ExperimentViewRuns } from './components/runs/ExperimentViewRuns';\nimport { useExperiments } from './hooks/useExperiments';\nimport { useFetchExperiments } from './hooks/useFetchExperiments';\nimport { useElementHeight } from '../../../common/utils/useElementHeight';\nimport { searchDatasetsApi } from '../../actions';\nimport Utils from '../../../common/utils/Utils';\nimport { ExperimentPageUIStateContextProvider } from './contexts/ExperimentPageUIStateContext';\nimport { first } from 'lodash';\nimport { shouldEnableTracingUI } from '../../../common/utils/FeatureUtils';\nimport { useExperimentPageSearchFacets } from './hooks/useExperimentPageSearchFacets';\nimport { usePersistExperimentPageViewState } from './hooks/usePersistExperimentPageViewState';\nimport { useDispatch } from 'react-redux';\nimport { ThunkDispatch } from '../../../redux-types';\nimport { useExperimentRuns } from './hooks/useExperimentRuns';\nimport { ExperimentRunsSelectorResult } from './utils/experimentRuns.selector';\nimport { useSharedExperimentViewState } from './hooks/useSharedExperimentViewState';\nimport { useInitializeUIState } from './hooks/useInitializeUIState';\nimport { ExperimentViewDescriptionNotes } from './components/ExperimentViewDescriptionNotes';\nimport { ExperimentViewHeader } from './components/header/ExperimentViewHeader';\nimport invariant from 'invariant';\nimport { useExperimentPageViewMode } from './hooks/useExperimentPageViewMode';\nimport { ExperimentViewTraces } from './components/ExperimentViewTraces';\n\nexport const ExperimentView = () => {\n  const dispatch = useDispatch<ThunkDispatch>();\n\n  const [searchFacets, experimentIds] = useExperimentPageSearchFacets();\n  const [viewMode] = useExperimentPageViewMode();\n\n  const experiments = useExperiments(experimentIds);\n\n  const [firstExperiment] = experiments;\n\n  const { fetchExperiments, isLoadingExperiment, requestError } = useFetchExperiments();\n\n  const { elementHeight: hideableElementHeight, observeHeight } = useElementHeight();\n\n  const [editing, setEditing] = useState(false);\n\n  const [showAddDescriptionButton, setShowAddDescriptionButton] = useState(true);\n\n  // Create new version of the UI state for the experiment page on this level\n  const [uiState, setUIState, seedInitialUIState] = useInitializeUIState(experimentIds);\n\n  const { isViewStateShared } = useSharedExperimentViewState(setUIState, first(experiments));\n\n  // Get the maximized state from the new view state model if flag is set\n  const isMaximized = uiState.viewMaximized;\n\n  const {\n    isLoadingRuns,\n    loadMoreRuns,\n    runsData,\n    moreRunsAvailable,\n    requestError: runsRequestError,\n    refreshRuns,\n  } = useExperimentRuns(uiState, searchFacets, experimentIds);\n\n  useEffect(() => {\n    fetchExperiments(experimentIds);\n  }, [fetchExperiments, experimentIds]);\n\n  useEffect(() => {\n    // Seed the initial UI state when the experiments and runs are loaded.\n    // Should only run once.\n    seedInitialUIState(experiments, runsData);\n  }, [seedInitialUIState, experiments, runsData]);\n\n  useEffect(() => {\n    const requestAction = searchDatasetsApi(experimentIds);\n    dispatch(requestAction).catch((e) => {\n      Utils.logErrorAndNotifyUser(e);\n    });\n  }, [dispatch, experimentIds]);\n\n  const isComparingExperiments = experimentIds.length > 1;\n\n  usePersistExperimentPageViewState(uiState, searchFacets, experimentIds, isViewStateShared);\n\n  const isViewInitialized = Boolean(!isLoadingExperiment && experiments[0] && runsData && searchFacets);\n\n  if (!isViewInitialized) {\n    // In the new view state model, wait for search facets to initialize\n    return <LegacySkeleton />;\n  }\n\n  if (requestError && requestError.getErrorCode() === ErrorCodes.PERMISSION_DENIED) {\n    return <PermissionDeniedView errorMessage={requestError.getMessageField()} />;\n  }\n\n  if (requestError && requestError.getErrorCode() === ErrorCodes.RESOURCE_DOES_NOT_EXIST) {\n    return <NotFoundPage />;\n  }\n\n  invariant(searchFacets, 'searchFacets should be initialized at this point');\n\n  const isLoading = isLoadingExperiment || !experiments[0];\n\n  const renderExperimentHeader = () => (\n    <>\n      <ExperimentViewHeader\n        experiment={firstExperiment}\n        searchFacetsState={searchFacets || undefined}\n        uiState={uiState}\n        showAddDescriptionButton={showAddDescriptionButton}\n        setEditing={setEditing}\n      />\n      <div\n        style={{\n          maxHeight: isMaximized ? 0 : hideableElementHeight,\n        }}\n        css={{ overflowY: 'hidden', flexShrink: 0, transition: 'max-height .12s' }}\n      >\n        <div ref={observeHeight}>\n          <ExperimentViewDescriptionNotes\n            experiment={firstExperiment}\n            setShowAddDescriptionButton={setShowAddDescriptionButton}\n            editing={editing}\n            setEditing={setEditing}\n          />\n        </div>\n      </div>\n    </>\n  );\n\n  const getRenderedView = () => {\n    if (shouldEnableTracingUI() && viewMode === 'TRACES') {\n      return <ExperimentViewTraces experimentIds={experimentIds} />;\n    }\n\n    return (\n      <ExperimentViewRuns\n        isLoading={false}\n        experiments={experiments}\n        isLoadingRuns={isLoadingRuns}\n        runsData={runsData as ExperimentRunsSelectorResult}\n        searchFacetsState={searchFacets}\n        loadMoreRuns={loadMoreRuns}\n        moreRunsAvailable={moreRunsAvailable}\n        requestError={runsRequestError}\n        refreshRuns={refreshRuns}\n        uiState={uiState}\n      />\n    );\n  };\n\n  return (\n    <ExperimentPageUIStateContextProvider setUIState={setUIState}>\n      <div css={styles.experimentViewWrapper}>\n        {isLoading ? (\n          <LegacySkeleton title paragraph={false} active />\n        ) : (\n          <>\n            {isComparingExperiments ? (\n              <ExperimentViewHeaderCompare experiments={experiments} />\n            ) : (\n              renderExperimentHeader()\n            )}\n          </>\n        )}\n        {getRenderedView()}\n      </div>\n    </ExperimentPageUIStateContextProvider>\n  );\n};\n\nconst styles = {\n  experimentViewWrapper: { height: '100%', display: 'flex', flexDirection: 'column' as const },\n};\n\nexport default ExperimentView;\n","import { isEqual } from 'lodash';\nimport { useSelector } from 'react-redux';\nimport type { ExperimentEntity, ExperimentStoreEntities } from '../../../types';\n\nexport type UseExperimentsResult = ExperimentEntity[];\n\n/**\n * Hook that returns data and functions necessary for rendering\n * experiment(s) details - name, title, tags etc.\n */\nexport const useExperiments = (ids: (number | string)[]): UseExperimentsResult =>\n  useSelector(\n    (state: { entities: ExperimentStoreEntities }) =>\n      ids.map((id) => state.entities.experimentsById[id]).filter(Boolean),\n    (oldExperiments, newExperiments) => isEqual(oldExperiments, newExperiments),\n  );\n","import { useEffect, useState } from 'react';\n\n/**\n * Hook that returns dynamically updated changing element height. Usage example:\n * ```ts\n * const { elementHeight, observeHeight } = useElementHeight();\n * // ...\n * return <div ref={observeHeight}>Element height: {elementHeight}px</div>\n * ```\n */\nexport const useElementHeight = (resizeCallback?: (entry: ResizeObserverEntry) => void) => {\n  const [hideableElementsContainer, setHideableElementsContainer] = useState<HTMLElement | null>(null);\n\n  const [elementHeight, setElementHeight] = useState<number | undefined>(undefined);\n\n  useEffect(() => {\n    if (!hideableElementsContainer || !window.ResizeObserver) {\n      return undefined;\n    }\n    const resizeObserver = new ResizeObserver(([entry]) => {\n      resizeCallback?.(entry);\n      if (entry.target.scrollHeight) {\n        setElementHeight(entry.target.scrollHeight);\n      }\n    });\n    resizeObserver.observe(hideableElementsContainer);\n    return () => resizeObserver.disconnect();\n  }, [hideableElementsContainer, resizeCallback]);\n\n  return { elementHeight, observeHeight: setHideableElementsContainer };\n};\n","var _desc, _g;\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nimport * as React from \"react\";\nfunction SvgNoExperiments(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: \"147px\",\n    height: \"90px\",\n    viewBox: \"0 0 147 90\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title === undefined ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, \"Empty\") : title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _desc || (_desc = /*#__PURE__*/React.createElement(\"desc\", null, \"Created with Sketch.\")), _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    id: \"Symbols\",\n    stroke: \"none\",\n    strokeWidth: 1,\n    fill: \"none\",\n    fillRule: \"evenodd\"\n  }, /*#__PURE__*/React.createElement(\"g\", {\n    id: \"PageComponent/States/NonExistingExperiment\",\n    transform: \"translate(-154.000000, 0.000000)\"\n  }, /*#__PURE__*/React.createElement(\"g\", {\n    id: \"Empty\",\n    transform: \"translate(154.000000, 0.000000)\"\n  }, /*#__PURE__*/React.createElement(\"g\", {\n    id: \"Rectangle-44-Copy-+-Rectangle-44-Copy-Copy\",\n    transform: \"translate(30.000000, 14.000000)\",\n    stroke: \"#43C8EC\",\n    strokeWidth: 4\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M10.741609,7 L15.8351259,-0.756037119 C16.3298711,-1.5093991 17.241332,-2 18.1439612,-2 L43.5873821,-2 C44.4210332,-2 45.2931545,-1.58401333 45.8168185,-0.931597206 L52.183142,7 L85.5155434,7 C87.9917944,7 90,9.01519262 90,11.4890789 L90,69.5109211 C90,71.9913496 87.9907454,74 85.5080838,74 L2.49191622,74 C0.012896518,74 -2,71.9861467 -2,69.5109211 L-2,11.4890789 C-2,9.00837311 0.00896797934,7 2.49246368,7 L10.741609,7 Z\",\n    id: \"Rectangle-44-Copy\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M-2,20.6666667 L90,20.6666667 L90,69.5197435 C90,71.9968892 87.9891593,74 85.5080838,74 L2.49191622,74 C0.0159958538,74 -2,71.9863744 -2,69.5197435 L-2,20.6666667 Z\",\n    id: \"Rectangle-44\"\n  })), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M132.953358,7.79357798 C132.953358,6.25072746 131.698196,5 130.149876,5 C128.601555,5 127.346393,6.25072746 127.346393,7.79357798 C127.346393,9.3364285 128.601555,10.587156 130.149876,10.587156 C131.698196,10.587156 132.953358,9.3364285 132.953358,7.79357798 Z M128.147388,7.79357798 C128.147388,6.6915419 129.043932,5.79816514 130.149876,5.79816514 C131.255819,5.79816514 132.152363,6.6915419 132.152363,7.79357798 C132.152363,8.89561406 131.255819,9.78899083 130.149876,9.78899083 C129.043932,9.78899083 128.147388,8.89561406 128.147388,7.79357798 Z\",\n    id: \"Oval-4-Copy\",\n    fillRule: \"nonzero\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M139.507463,33.7889908 L139.507463,30.7789335 C139.507463,29.9519393 140.17326,29.2815281 141.007463,29.2815281 C141.83589,29.2815281 142.507463,29.9619278 142.507463,30.7789335 L142.507463,33.7889908 L145.51752,33.7889908 C146.344514,33.7889908 147.014925,34.4547881 147.014925,35.2889908 C147.014925,36.117418 146.334526,36.7889908 145.51752,36.7889908 L142.507463,36.7889908 L142.507463,39.7990482 C142.507463,40.6260423 141.841665,41.2964535 141.007463,41.2964535 C140.179036,41.2964535 139.507463,40.6160538 139.507463,39.7990482 L139.507463,36.7889908 L136.497405,36.7889908 C135.670411,36.7889908 135,36.1231936 135,35.2889908 C135,34.4605637 135.6804,33.7889908 136.497405,33.7889908 L139.507463,33.7889908 Z\",\n    id: \"Combined-Shape\",\n    fill: \"#FF8500\"\n  }), /*#__PURE__*/React.createElement(\"g\", {\n    id: \"Fast_computer_chip\",\n    fillRule: \"nonzero\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M25,3.12 C25,4.84312842 26.3968716,6.24 28.12,6.24 C29.8431284,6.24 31.24,4.84312842 31.24,3.12 C31.24,1.39687158 29.8431284,0 28.12,0 C27.2925246,-3.55271368e-15 26.4989403,0.328713342 25.9138268,0.913826843 C25.3287133,1.49894034 25,2.29252455 25,3.12 Z M29.24,3.12 C29.24,3.73855892 28.7385589,4.24 28.12,4.24 C27.5014411,4.24 27,3.73855892 27,3.12 C27,2.50144108 27.5014411,2 28.12,2 C28.7307345,2.0109077 29.2200974,2.50916813 29.22,3.12 L29.24,3.12 Z\",\n    id: \"Shape\",\n    fill: \"#FF8500\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M12.12,20.83 L12.12,18.3 C9.70651564,18.3 7.75,16.3434844 7.75,13.93 L5.32,13.93 C5.32,16.3434844 3.36348436,18.3 0.95,18.3 L0.95,20.83 C3.36348436,20.83 5.32,22.7865156 5.32,25.2 L7.75,25.2 C7.75,22.7865156 9.70651564,20.83 12.12,20.83 Z M6.53,22.14 C5.92469267,21.0411659 5.01024881,20.1441069 3.9,19.56 C5.00744891,18.9812516 5.92159416,18.0914372 6.53,17 C7.13530733,18.0988341 8.04975119,18.9958931 9.16,19.58 C8.05255109,20.1587484 7.13840584,21.0485628 6.53,22.14 Z\",\n    id: \"Shape\",\n    fill: \"#10B36B\"\n  })))))));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgNoExperiments);\nexport default __webpack_public_path__ + \"static/media/no-experiments.0e4f4a114ef73e7d81c09474aba64b6c.svg\";\nexport { ForwardRef as ReactComponent };","import React from 'react';\nimport { useDesignSystemTheme } from '@databricks/design-system';\nimport noExperiments from '../../common/static/no-experiments.svg';\nimport { ExperimentCliDocUrl } from '../../common/constants';\n\nfunction NoExperimentViewImpl() {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <div className=\"center\">\n      <img alt=\"No experiments found.\" style={{ height: '200px', marginTop: '80px' }} src={noExperiments} />\n      <h1 style={{ paddingTop: '10px' }}>No Experiments Exist</h1>\n      <h2 css={{ color: theme.colors.textSecondary }}>\n        To create an experiment use the <a href={ExperimentCliDocUrl}>mlflow experiments</a> CLI.\n      </h2>\n    </div>\n  );\n}\n\nexport const NoExperimentView = NoExperimentViewImpl;\n","/* eslint-disable react-hooks/rules-of-hooks */\nimport { useEffect, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ReduxState, type ThunkDispatch } from '../../redux-types';\nimport { getExperimentApi, searchExperimentsApi, setCompareExperiments, setExperimentTagApi } from '../actions';\nimport { Navigate } from '../../common/utils/RoutingUtils';\nimport { getUUID } from '../../common/utils/ActionUtils';\nimport RequestStateWrapper from '../../common/components/RequestStateWrapper';\nimport ExperimentListView from './ExperimentListView';\nimport { useExperimentIds } from './experiment-page/hooks/useExperimentIds';\nimport { values } from 'lodash';\nimport { Spinner, useDesignSystemTheme } from '@databricks/design-system';\nimport { GetExperimentsContextProvider } from './experiment-page/contexts/GetExperimentsContext';\nimport { ExperimentView } from './experiment-page/ExperimentView';\nimport { NoExperimentView } from './NoExperimentView';\nimport Utils from '../../common/utils/Utils';\nimport { ExperimentEntity } from '../types';\nimport Routes from '../routes';\nimport { ExperimentPage } from './experiment-page/ExperimentPage';\n\nconst getExperimentActions = {\n  setExperimentTagApi,\n  getExperimentApi,\n  setCompareExperiments,\n};\n\nconst getFirstActiveExperiment = (experiments: ExperimentEntity[]) => {\n  const sorted = [...experiments].sort(Utils.compareExperiments);\n  return sorted.find(({ lifecycleStage }) => lifecycleStage === 'active');\n};\n\nconst HomePage = () => {\n  const dispatch = useDispatch<ThunkDispatch>();\n  const { theme } = useDesignSystemTheme();\n  const searchRequestId = useRef(getUUID());\n\n  const experimentIds = useExperimentIds();\n  const experiments = useSelector((state: ReduxState) => values(state.entities.experimentsById));\n\n  const hasExperiments = experiments.length > 0;\n\n  useEffect(() => {\n    dispatch(searchExperimentsApi(searchRequestId.current));\n  }, [dispatch]);\n\n  // If no experiments are currently selected, navigate to the first one\n  if (!experimentIds.length) {\n    const firstExp = getFirstActiveExperiment(experiments);\n    if (firstExp) {\n      return <Navigate to={Routes.getExperimentPageRoute(firstExp.experimentId)} replace />;\n    }\n  }\n\n  const loadingState = (\n    <div css={{ height: '100%', display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n      <Spinner size=\"large\" />\n    </div>\n  );\n\n  return (\n    <RequestStateWrapper requestIds={[searchRequestId.current]} customSpinner={loadingState}>\n      <div css={{ display: 'flex', height: 'calc(100% - 60px)' }}>\n        {/* Left sidebar containing experiment list */}\n        <div css={{ height: '100%', paddingTop: 24, display: 'flex' }}>\n          <ExperimentListView activeExperimentIds={experimentIds || []} experiments={experiments} />\n        </div>\n\n        {/* Main content with the experiment view */}\n        <div\n          css={{\n            height: '100%',\n            flex: 1,\n            padding: theme.spacing.md,\n            paddingTop: theme.spacing.lg,\n            minWidth: 0,\n          }}\n        >\n          <GetExperimentsContextProvider actions={getExperimentActions}>\n            {hasExperiments ? <ExperimentView /> : <NoExperimentView />}\n          </GetExperimentsContextProvider>\n        </div>\n      </div>\n    </RequestStateWrapper>\n  );\n};\n\nexport default HomePage;\n"],"names":["getExperimentNameValidator","getExistingExperimentNames","rule","value","callback","includes","MlflowService","getExperimentByName","experiment_name","then","res","catch","e","undefined","modelNameValidator","name","ModelRegistryService","getRegisteredModel","lazyPako","truncateToFirstLineWithMaxLength","str","maxLength","truncated","_","length","char","join","middleTruncateStr","maxLen","firstPartLen","Math","floor","lastPartLen","substring","_keyStr","btoaUtf8","input","output","i","result","_utf8_encode","chr1","charCodeAt","chr2","chr3","enc1","enc2","enc3","enc4","isNaN","charAt","atobUtf8","replace","indexOf","String","fromCharCode","_utf8_decode","arguments","utftext","n","c","string","c2","c3","getStringSHA256","crypto","subtle","digest","TextEncoder","encode","arrayBuffer","Array","prototype","map","call","Uint8Array","x","toString","slice","COMPRESSED_TEXT_DEFLATE_PREFIX","textCompressDeflate","async","binaryData","deflate","text","Buffer","b64encoded","from","binaryString","byte","fromCodePoint","btoa","textDecompressDeflate","pako","compressedText","startsWith","Error","compressedTextWithoutPrefix","inflate","to","atob","m","_m$codePointAt","codePointAt","isTextCompressedDeflate","EXP_NAME_FIELD","ARTIFACT_LOCATION","CreateExperimentFormComponent","Component","render","_jsxs","Form","ref","this","props","innerRef","layout","children","_jsx","Item","label","intl","formatMessage","id","defaultMessage","rules","required","message","validator","Input","placeholder","autoFocus","CreateExperimentForm","injectIntl","CreateExperimentModalImpl","constructor","handleCreateExperiment","experimentName","values","artifactLocation","response","createExperimentApi","searchExperimentsApi","experiment_id","newExperimentId","navigate","Routes","getExperimentPageRoute","debouncedExperimentNameValidator","debounce","experimentNames","isOpen","GenericInputModal","title","okText","handleSubmit","onClose","mapDispatchToProps","CreateExperimentModal","withRouterNext","connect","state","getExperiments","DeleteExperimentModalImpl","experimentId","activeExperimentIds","deleteExperimentRequestId","getUUID","deleteExperimentApi","rootRoute","experimentIds","filter","eid","route","getCompareExperimentsPageRoute","Utils","logErrorAndNotifyUser","ConfirmModal","helpText","confirmButtonText","DeleteExperimentModal","RenameExperimentModalImpl","handleRenameExperiment","newExperimentName","NEW_NAME_FIELD","updateExperimentApi","getExperimentApi","RenameForm","type","visible","RenameExperimentModal","ExperimentListView","list","checkedKeys","hidden","searchInput","showCreateExperimentModal","showDeleteExperimentModal","showRenameExperimentModal","selectedExperimentId","selectedExperimentName","bindListRef","componentDidUpdate","forceUpdateGrid","filterExperiments","experiments","lowerCasedSearchInput","toLowerCase","_ref","handleSearchInputChange","event","setState","target","updateSelectedExperiment","handleDeleteExperiment","handleCloseCreateExperimentModal","handleCloseDeleteExperimentModal","handleCloseRenameExperimentModal","handleCheck","isChecked","key","prevState","pushExperimentRoute","activeExperimentListItem","classNames","getExperimentListItemContainer","designSystemThemeApi","theme","inactiveExperimentListItem","renderListItem","_ref2","index","style","isScrolling","parent","item","data","isActive","dataTestId","css","List","bordered","prefixCls","experimentListItem","actions","Checkbox","onChange","Link","className","onClick","IconButton","icon","PencilIcon","renameExperiment","deleteExperiment","isRowLoaded","_ref3","unHide","hide","CaretDownSquareIcon","rotate","filteredExperiments","experimentListOuterContainer","experimentTitleContainer","Typography","Title","level","margin","PlusCircleIcon","AutoSizer","_ref4","width","height","VList","rowRenderer","rowHeight","overscanRowCount","rowCount","styles","display","justifyContent","alignItems","marginBottom","experimentTitle","experimentSearchContainer","experimentSearchInput","flex","experimentSearchIcon","fontSize","marginLeft","experimentListContainer","marginTop","marginRight","paddingRight","borderLeft","colors","primary","borderLeftWidth","backgroundColor","actionDefaultBackgroundPress","justifySelf","color","actionDefaultTextDefault","general","iconSize","spacing","xs","WithDesignSystemThemeHoc","GetExperimentsContext","createContext","GetExperimentsContextProvider","fetchExperimentsRequestIds","setFetchExperimentsRequestIds","useState","isLoadingExperiment","setIsLoadingExperiment","requestError","setRequestError","dispatch","useDispatch","fetchExperiments","useCallback","fetchFn","newRequestIds","requestAction","meta","requestIds","isEqual","contextValue","useMemo","Provider","RequestStateWrapper","shouldOptimisticallyRender","renderFn","_isLoading","_renderError","requests","some","r","active","forEach","request","error","PermissionDeniedView","errorMessage","useDesignSystemTheme","src","permissionDeniedLock","alt","paddingTop","_css","textSecondary","CopyBox","copyText","readOnly","CopyButton","GetLinkModal","onCancel","link","Modal","FormattedMessage","ExperimentGetShareLinkModal","searchFacetsState","uiState","sharedStateUrl","setSharedStateUrl","linkInProgress","setLinkInProgress","generatedState","setGeneratedState","stateToSerialize","createSerializedState","window","location","href","shouldUseCompressedExperimentViewSharedState","JSON","stringify","serializePersistedState","hash","tagName","EXPERIMENT_PAGE_VIEW_STATE_SHARE_TAG_PREFIX","setExperimentTagApi","pageRoute","shareURL","origin","pathname","useEffect","GenericSkeleton","loading","ExperimentViewHeaderShareButton","showGetLinkModal","setShowGetLinkModal","_Fragment","Button","componentId","ExperimentViewHeaderCompare","React","pageTitle","numExperiments","PageHeader","breadcrumbs","RestoreRunModalImpl","super","bind","restorePromises","selectedRunIds","runId","push","restoreRunApi","Promise","all","textJson","error_code","openErrorModal","_this$props$onSuccess","_this$props","onSuccess","number","pluralize","ExperimentViewRunModals","showDeleteRunModal","showRestoreRunModal","showRenameRunModal","runsSelected","onCloseDeleteRunModal","onCloseRestoreRunModal","onCloseRenameRunModal","renamedRunName","refreshRuns","Object","entries","selected","DeleteRunModal","RestoreRunModal","RenameRunModal","runUuid","runName","CompareRunsButtonWrapper","ExperimentViewRunsControlsActions","viewState","runsData","runInfos","lifecycleFilter","useNavigate","setShowDeleteRunModal","setShowRestoreRunModal","setShowRenameRunModal","setRenamedRunName","renameButtonClicked","runsSelectedList","keys","selectedRun","find","info","compareButtonClicked","getCompareRunPageRoute","Set","sort","onDeleteRun","onRestoreRun","selectedRunsCount","Boolean","canRestoreRuns","canRenameRuns","canCompareRuns","controlBar","disabled","LIFECYCLE_FILTER","ACTIVE","danger","DELETED","buttonSeparator","border","gap","sm","ExperimentViewRefreshButtonImpl","useExperimentIds","lastFetchTime","setLastFetchTime","newRunsCount","setNewRunsCount","Date","now","interval","setInterval","searchPayloadData","maxResults","MAX_DETECT_NEW_RUNS_RESULTS","searchRunsPayload","_result$runs","newRuns","runs","POLL_INTERVAL","clearInterval","position","top","right","transform","borderRadius","white","lime","fontWeight","userSelect","zIndex","LegacyTooltip","useAsLabel","SyncIcon","ExperimentViewRefreshButton","entities","runInfosByUuid","areStatesEqual","nextState","useExperimentViewLocalStore","storeIdentifier","LocalStorageUtils","getStoreForComponent","RunsSearchTooltipContent","whereBold","chunks","ExperimentSearchSyntaxDocUrl","rel","ATTRIBUTE_OPTIONS","s","boldedText","wholeText","shouldBeBold","textArray","split","RegExp","match","TOOLTIP_COOKIE_KEY","RunsSearchAutoComplete","searchFilter","onSearchFilterChange","onClear","setText","autocompleteEnabled","setAutocompleteEnabled","focused","setFocused","lastSetBySelection","setLastSetBySelection","existingEntityNamesRef","useRef","metricNames","paramNames","tagNames","suggestionLimits","setSuggestionLimits","Metrics","Parameters","Tags","currentEntitiesRef","entityBeingEdited","setEntityBeingEdited","baseOptions","existingEntityNames","current","mergedEntityNames","getEntityNamesFromRunsData","newRunsData","existingNames","mergeDedup","list1","list2","getTagNames","tagsList","flatMap","tagRecord","metricKeyList","paramKeyList","options","entityNames","p","t","previousEntities","newEntities","re","clauses","results","lastIndex","exec","clause","startIndex","getClausesAndStartIndex","clauseObj","entity","endIndex","getEntitiesAndIndices","currentEntitiesNames","previousEntitiesNames","trim","filteredOptions","getFilteredOptionsFromEntityName","group","newOptions","option","limitForGroup","ellipsized","onSelect","groupName","prevSuggestionLimits","prefix","suffix","localStorageInstance","showTooltipOnError","setShowTooltipOnError","currentTimeSecs","storedItem","getItem","parseInt","tooltipIcon","_tooltipIcon$current","setItem","click","noMatches","o","open","triggerSearch","preventDefault","responsive","mediaQueries","AutoComplete","dropdownMatchSelectWidth","defaultOpen","defaultActiveFirstOption","dropdownRender","menu","SearchIcon","svg","onKeyDown","onFocus","onBlur","CloseIcon","placement","dangerouslySetAntdProps","overlayInnerStyle","trigger","size","InfoIcon","CreateNotebookRunModal","closeModal","classical_ml_text","trimStart","llm_text","snippetHeight","min","onOk","footer","Hint","Tabs","TabPane","tab","CodeSnippet","padding","language","md","showLabel","CopyIcon","GatewayErrorWrapper","ErrorWrapper","getGatewayErrorMessage","_this$textJson","_this$textJson$error","_this$textJson2","_this$textJson3","parseEndpointEvaluationResponse","task","ModelGatewayRouteTask","LLM_V1_COMPLETIONS","_completionsResponse$","_completionsResponse$2","completionsResponse","choices","usage","metadata","total_tokens","output_tokens","completion_tokens","input_tokens","prompt_tokens","LLM_V1_CHAT","_chatResponse$choices","_chatResponse$choices2","_chatResponse$choices3","chatResponse","content","ModelGatewayService","createEvaluationTextPayload","inputText","prompt","messages","role","LLM_V1_EMBEDDINGS","_ModelGatewayService","queryMLflowDeploymentEndpointRoute","invariant","mlflowDeployment","processed_data","parameters","gatewayProxyPost","gateway_path","endpoint_url","json_data","queryModelGatewayRoute","payload","parameterDefinitions","defineMessage","helpString","max","step","DEFAULT_PARAMETER_VALUES","temperature","max_tokens","usePromptEvaluationParameters","updateParameters","updateParameter","currentParameters","EvaluationCreateParameterListControl","parameterValue","draftValue","setDraftValue","isArray","stop","Tag","closable","allowClear","uniq","EvaluationCreatePromptParameters","lg","FormUI","Label","parameterDef","_parameters$parameter","htmlFor","verticalAlign","LineSmoothSlider","defaultValue","newVariableEndSegment","newDefaultVariableName","usePromptEvaluationPromptTemplateValue","promptTemplate","updatePromptTemplate","DEFAULT_PROMPTLAB_NEW_TEMPLATE_VALUE","promptTemplateRef","handleAddVariableToTemplate","template","newVariableName","alreadyExistingVariableNames","maximumVariableNameIndex","_name$match","getNewVariableName","extractPromptInputVariables","newValue","requestAnimationFrame","textAreaElement","focus","setSelectionRange","savePromptTemplateInputRef","_ref$resizableTextAre","resizableTextArea","textArea","whitespaceViolationMessage","EvaluationCreateRunPromptTemplateErrors","violations","namesWithSpaces","useIntl","Text","invalidNames","nameWithSpace","PROMPT_TEMPLATE_EXAMPLES","variables","TextArea","EvaluationCreatePromptRunModalExamples","closeExamples","updateInputVariableValue","verticalSizing","ArrowLeftIcon","flexDirection","boxSizing","actionDefaultBorderDefault","borders","borderRadiusMd","background","backgroundPrimary","overflow","float","tryPromptTemplate","line","Paragraph","Divider","Spacer","EvaluationCreatePromptRunOutput","evaluationMetadata","isEvaluating","isOutputDirty","evaluationOutput","evaluationError","evaluateButtonTooltip","onEvaluateClick","onCancelClick","metadataOutput","PROMPTLAB_METADATA_COLUMN_LATENCY","round","Number","PROMPTLAB_METADATA_COLUMN_TOTAL_TOKENS","totalTokens","PlayIcon","StopIcon","WarningIcon","TableSkeleton","lines","rows","Message","EXPERIMENT_PAGE_VIEW_MODE_QUERY_PARAM_KEY","getExperimentPageDefaultViewMode","shouldUseExperimentPageChartViewAsDefault","useExperimentPageViewMode","params","setParams","useSearchParams","get","newCompareRunsMode","currentParams","set","evaluatePromptTableValue","_ref6","routeName","routeType","compiledPrompt","inputValues","outputColumn","rowKey","run","getState","modelGateway","modelGatewayRoutesLoading","modelGatewayRoutes","searchAllPromptLabAvailableEndpoints","gatewayRoute","modelGatewayRequestPayload","startTime","performance","evaluatePromptTableValueUnified","gatewayProxyGet","getPromptEngineeringErrorMessage","getMessageField","_ref7","_ref8","_ref9","EvaluationCreatePromptRunModal","runBeingDuplicated","visibleRuns","setViewMode","selectedModel","updateSelectedModel","newRunName","setNewRunName","isCreatingRun","setIsCreatingRun","setIsEvaluating","lastEvaluationError","setLastEvaluationError","setEvaluationOutput","setEvaluationMetadata","outputDirty","setOutputDirty","isViewExamplesModalOpen","setViewExamplesModalOpen","cancelTokenRef","updateInputVariables","inputVariables","inputVariableValues","inputVariableNameViolations","clearInputVariableValues","usePromptEvaluationInputValues","updateInputVariablesDirect","setInputVariableNameViolations","updateInputVariableValues","DEFAULT_PROMPTLAB_INPUT_VALUES","currentInputVariables","newInputVariables","getPromptInputVariableNameViolations","sanitizedInputVariableValues","fromPairs","generateRandomRunName","duplicatedPromptTemplate","duplicatedRouteName","duplicatedParameters","extractEvaluationPrerequisitesForRun","extractRequiredInputParamsForRun","duplicatedRunName","getDuplicatedRunName","compact","modelRoutesUnified","useSelector","supportedModelRouteListUnified","sortBy","modelRoutesLoading","handleEvaluate","modelRoute","cancelToken","random","compilePromptInputText","latency","metadataWithEvaluationTime","prefixedMetadata","reduce","acc","_ref5","metadata_key","metadata_value","wrappedMessage","handleCancel","selectModelLabel","selectModelPlaceholder","promptTemplateProvided","allInputValuesProvided","every","variable","_inputVariableValues$","runNameProvided","evaluateButtonEnabled","createRunButtonEnabled","createRunButtonTooltip","onHandleSubmit","_modelRoutesUnified$s","_modelRoutesUnified$s2","modelRouteName","modelParameters","route_type","modelInput","createPromptLabRunApi","promptParameters","modelOutput","modelOutputParameters","DialogCombobox","modal","selectedRouteName","DialogComboboxTrigger","withInlineLabel","DialogComboboxContent","maxHeight","matchTriggerWidth","DialogComboboxOptionList","DialogComboboxOptionListSearch","DialogComboboxOptionListSelectItem","checked","DialogComboboxHintRow","model","formItem","autoSize","minRows","inputVariable","PlusIcon","inset","overlayOverlay","Spinner","CreateNewRunContext","createNewRun","CreateNewRunContextProvider","setIsOpen","setRunBeingDuplicated","runToDuplicate","shouldEnablePromptLab","useCreateNewRun","useContext","createExperimentPageSearchFacetsState","orderByKey","DEFAULT_ORDER_BY_KEY","orderByAsc","DEFAULT_ORDER_BY_ASC","DEFAULT_START_TIME","DEFAULT_LIFECYCLE_FILTER","datasetsFilter","modelVersionFilter","DEFAULT_MODEL_VERSION_FILTER","flattenString","persistSearchStateFieldSerializers","deserializeLocalStorage","deserializeQueryString","serializeQueryString","inputs","inputsWithoutExperimentId","context","parsedResult","parse","compareRunCharts","compareRunsMode","serializeLocalStorage","EXPERIMENT_PAGE_QUERY_PARAM_KEYS","useExperimentPageSearchFacets","queryParams","pickedValues","pick","fromEntries","areValuesEmpty","useParams","queryParamsExperimentIds","comparedExperimentIds","getComparedExperimentIds","deserializedFields","resultObject","field","_persistSearchStateFi2","deserializeFn","deserializeFieldsFromQueryString","omitBy","isNil","assign","useUpdateExperimentPageSearchFacets","partialFacets","newParams","_persistSearchStateFi","serializeFn","serializeFieldsToQueryString","useShouldShowCombinedRunsTab","shouldEnableTracingUI","ExperimentViewRunsControlsFilters","updateViewState","onDownloadCsv","additionalControls","viewMaximized","autoRefreshEnabled","hideEmptyCharts","setUrlSearchFacets","showCombinedRuns","pageViewMode","setViewModeInURL","updateUIState","useUpdateExperimentViewUIState","isComparingExperiments","isCreateRunWithNotebookModalOpen","setCreateRunWithNotebookModalOpenValue","startTimeColumnLabels","getStartTimeColumnDisplayName","currentLifecycleFilterValue","currentStartTimeFilterLabel","displaySidebarToggleButton","datasetSummaries","datasetsByExperimentId","hasDatasets","flexWrap","SegmentedControlGroup","SegmentedControlButton","ListIcon","ChartLineIcon","newSearchFilter","startTimeKey","datasetSummary","multiSelect","showTagAfterValueCount","summary","DialogComboboxOptionListCheckboxItem","datasetSummariesEqual","newDatasetsFilter","updateDatasetsFilter","textTransform","DropdownMenu","Root","Trigger","asChild","OverflowIcon","Content","IconWrapper","DownloadIcon","shouldEnableHidingChartsWithNoData","Separator","CheckboxItem","ItemIndicator","shouldEnableExperimentPageAutoRefresh","ToggleIconButton","pressed","previewPaneVisible","SidebarIcon","PreviewBadge","ExperimentViewRunsSortSelector","sortOptions","onSortKeyChanged","newOrderBy","newOrderAscending","SORT_DELIMITER_SYMBOL","COLUMN_SORT_BY_ASC","currentUIState","selectedColumns","currentSortSelectValue","COLUMN_SORT_BY_DESC","currentSortSelectLabel","sortOption","sortOptionLabel","extractedKeyName","sortLabelElement","SortAscendingIcon","SortDescendingIcon","handleChange","updatedValue","setOpen","onOpenChange","handleClear","minWidth","order","ArrowUpIcon","ArrowDownIcon","GROUP_KEY","GROUP_KEY_ATTRIBUTES","makeCanonicalSortKey","COLUMN_TYPES","ATTRIBUTES","GROUP_KEY_PARAMS","PARAMS","GROUP_KEY_METRICS","METRICS","GROUP_KEY_TAGS","TAGS","findMatching","filterQuery","v","createHighlightedNode","beforeStr","matchStr","afterStr","ExperimentViewRunsColumnSelector","columnSelectorVisible","onChangeColumnSelectorVisible","setFilter","searchInputRef","scrollableContainerRef","buttonRef","attributeColumnNames","isComparing","ATTRIBUTE_COLUMN_LABELS","USER","SOURCE","VERSION","MODELS","DESCRIPTION","unshift","EXPERIMENT_NAME","DATASET","getAttributeColumns","setCheckedColumns","updateFn","facets","newColumns","uniqueNewColumns","tagsKeyList","getVisibleTagKeyList","canonicalKeyNames","treeData","filteredAttributes","filteredParams","filteredMetrics","filteredTags","attributeKey","metricKey","_customColumnDef$disp","customColumnDef","customMetricBehaviorDefs","displayName","paramKey","tagKey","toggleGroup","keyList","k","toggleSingleKey","_scrollableContainerR","_searchInputRef$curre","scrollTo","preventScroll","scrollIntoView","block","behavior","onCheck","node","isCanonicalSortKeyOfType","columnType","extractCanonicalSortKey","canonicalKeysForGroup","searchInputKeyDown","treeElement","querySelector","dropdownContent","borderColor","_buttonRef$current","overflowY","overflowX","paddingBottom","whiteSpace","textOverflow","Tree","mode","defaultExpandedKeys","Dropdown","overlay","onVisibleChange","ColumnsIcon","ChevronDownIcon","COMPARE_RUNS_TOOLTIP_STORAGE_ITEM","ChartViewButtonTooltip","multipleRunsSelected","isTableMode","seenTooltipStore","isToolTipOpen","setToolTipOpen","hasSeenTooltipBefore","updateIsTooltipOpen","Popover","align","Arrow","ExperimentViewRunsModeSwitch","runsAreGrouped","hideBorder","viewMode","classNamePrefix","currentViewMode","activeTab","dangerouslyAppendEmotionCSS","activeKey","tabKey","defineMessages","minimum","maximum","average","attributes","tags","dataset","noParams","noTags","aggregationTooltip","noResults","GroupBySelectorBody","groupBy","useGroupedValuesInCharts","onUseGroupedValuesInChartsChange","attributeElementRef","tagElementRef","paramElementRef","inputElementRef","minimumLabel","maximumLabel","averageLabel","datasetLabel","runTags","MLFLOW_INTERNAL_PREFIX","aggregateFunction","RunGroupingAggregateFunction","Average","groupByKeys","currentAggregateFunctionLabel","filteredTagNames","tag","filteredParamNames","param","attributesMatchFilter","isEmpty","datasetsList","hasAnyResults","groupByToggle","groupByData","newGroupByKeys","isGroupedBy","stopPropagation","firstItem","GearIcon","side","shouldEnableToggleIndividualRunsInGroups","onCheckedChange","RadioGroup","onValueChange","aggregateFunctionString","newFunction","newGroupBy","RadioItem","Min","Max","Group","RunGroupingMode","Dataset","createRunsGroupByKey","groupByKey","paramName","Param","ExperimentViewRunsGroupBySelector","isLoading","normalizedGroupBy","normalizeRunsGroupByKey","ListBorderIcon","endIcon","XCircleFillIcon","textPlaceholder","typography","fontSizeSm","actionTertiaryTextHover","onPointerDownCapture","ExperimentViewRunsSortSelectorV2Body","onOptionSelected","firstElementRef","filteredSortOptions","setOrder","ascending","_inputElementRef$curr","_firstElementRef$curr","ExperimentViewRunsSortSelectorV2","metricKeys","paramKeys","attributeSortOptions","ATTRIBUTE_COLUMN_SORT_LABEL","sortLabelKey","ATTRIBUTE_COLUMN_SORT_KEY","metricsSortOptions","_customMetricBehavior","_customMetricBehavior2","paramsSortOptions","ExperimentViewRunsControls","_uiState$useGroupedVa","expandRows","updateExpandRows","setCompareRunsMode","isComparingRuns","isEvaluationMode","filteredParamKeys","filteredMetricKeys","filteredTagKeys","downloadRunsCsv","useRunSortOptions","ColumnSortByOrder","sortLabel","showActionButtons","showGroupBySelector","changeColumnSelectorVisible","toggleExpandedRows","multipleDatasetsArePresent","datasetsInRun","shouldUseNewExperimentPageSortSelector","ToggleButton","MLFlowAgGridImpl","MLFlowAgGridLoader","fallback","cssTheme","START_TIME_COLUMN_OFFSET","ALL","LAST_HOUR","LAST_24_HOURS","LAST_7_DAYS","LAST_30_DAYS","LAST_YEAR","createSearchRunsParams","referenceTime","pageToken","runViewType","ViewType","ACTIVE_ONLY","DELETED_ONLY","runsPinned","orderBy","createOrderByExpression","startTimeExpression","createStartTimeExpression","offset","datasetsFilterExpression","createDatasetsFilterExpression","createFilterExpression","activeFilters","shouldFetchParents","DATE","shouldNestChildrenAndFetchParents","RUNS_SEARCH_MAX_RESULTS","isSearchFacetsFilterUsed","currentSearchFacetsState","ColumnHeaderCell","enableSorting","canonicalSortKey","tableContext","updateSearchFacets","handleSortBy","newOrderByAsc","DateCellRenderer","runStatus","cellWrapper","formatTimestamp","RunStatusIcon","status","timeSinceStr","TrimmedText","maxSize","allowShowMore","trimmedText","substr","showMore","setShowMore","expandButton","RunDescriptionCellRenderer","description","getRunDescriptionFromTags","ExperimentNameCellRenderer","basename","ModelLink","isUc","registeredModelName","registeredModelVersion","flavors","artifactPath","RegisteredModelOkIcon","actionPrimaryBackgroundDefault","ModelsIcon","ModelRegistryRoutes","getModelVersionPageRoute","getRunPageRoute","renderModelName","displayFullName","ModelsCellRenderer","registeredModels","loggedModels","models","mergeLoggedAndRegisteredModels","Overflow","ModelsHeaderCellRenderer","VersionCellRenderer","version","renderSourceVersion","_path","_circle","hasOwnProperty","apply","SvgIconVisibleFill","svgRef","titleId","viewBox","fill","xmlns","d","stroke","cx","cy","strokeWidth","VisibleIcon","shouldUseNewRunRowsVisibilityModel","Icon","component","VisibleFillIcon","VisibleHollowIcon","MOUSE_DELAYS","mouseEnterDelay","mouseLeaveDelay","RunVisibilityControlButton","rowHidden","buttonHidden","button","VisibleOffIcon","opacity","grey400","visuallyHidden","RUNS_VISIBILITY_MODE","CUSTOM","iconFontSize","grey500","ExperimentViewRunsTableHeaderContext","runsHiddenMode","FIRST_10_RUNS","ExperimentViewRunsTableHeaderContextProvider","useExperimentViewRunsTableHeaderContext","labels","visibility","groups","unhide","pinning","unpin","pin","RowActionsCellRenderer","groupParentInfo","runDateAndNestInfo","visibilityControl","belongsToGroup","isGroupRow","isVisibilityButtonDisabled","RunRowVisibilityControl","Disabled","pinned","rowUuid","runUuidToToggle","isRowHidden","allRunsHidden","visibilityMessageDescriptor","pinningMessageDescriptor","isVisibilityButtonHidden","Hidden","isRemainingRunsGroup","actionsContainer","onToggleVisibility","actionCheckbox","showOnlyInCompareMode","pinnable","uuidToPin","existingState","PinFillIcon","PinIcon","prevProps","nextProps","_prevProps$data$group","_nextProps$data$group","RowActionsCellRendererSuppressKeyboardEvents","HTMLElement","classList","contains","appearance","cursor","RowActionsHeaderCellRendererV2","actionButton","HIDEALL","FIRST_20_RUNS","SHOWALL","RowActionsHeaderCellRenderer","_props$eGridHeader","selectAllCheckbox","eGridHeader","ariaLabel","GroupParentCellRenderer","getRunColor","useGetExperimentRunColor","saveRunColor","useSaveExperimentRunColor","onExpandToggle","groupId","doOpen","groupsExpanded","getRunGroupDisplayName","groupIsDisplayedInCharts","expanderOpen","ChevronRightIcon","RunColorPill","onChangeColor","colorValue","groupUuid","runUuids","RunNameCellRenderer","onExpand","hasExpander","childrenIds","renderingAsParent","hideRunColorControl","expanderWrapper","nestLevel","expanderButton","MinusBoxIcon","PlusSquareIcon","runLink","tabIndex","fontSizeBase","minHeight","textDecoration","LoadMoreRowRenderer","loadMoreRunsFunc","SingleDataset","datasetWithTags","onDatasetSelected","appendComma","inPopover","contextTag","MLFLOW_RUN_DATASET_CONTEXT_TAG","flexShrink","TableIcon","Close","DatasetsCellRenderer","datasets","containerElement","datasetsVisible","setDatasetsVisible","ellipsisVisible","setEllipsisVisible","clampedDatasets","datasetsLength","throttle","entry","availableHeight","contentRect","elementsFit","stackedHeight","clientHeight","availableWidth","stackedWidth","clientWidth","partiallyVisibleDatasets","resizeObserver","ResizeObserver","observe","disconnect","moreItemsToShow","datasetsToShow","paddingLeft","heightSm","DatasetsCellRendererSuppressKeyboardEvents","_ref10","HTMLButtonElement","AggregateMetricValueCell","_data$groupParentInfo","valueFormatted","cellClassIsOrderedBy","_colDef$headerCompone","colDef","headerComponentParams","getActionsColumnWidth","BASE_RUN_ACTIONS_COLUMN_WIDTH","createParamFieldName","EXPERIMENT_FIELD_PREFIX_PARAM","createMetricFieldName","EXPERIMENT_FIELD_PREFIX_METRIC","createTagFieldName","EXPERIMENT_FIELD_PREFIX_TAG","UntrackedSpinner","defaultKeyboardNavigationSuppressor","TAGS_TO_COLUMNS_MAP","RUN_NAME","getRowId","getRowIsLoadMore","rowNode","isLoadMoreRow","getAdjustableAttributeColumns","useRunsColumnDefinitions","compareExperiments","onTogglePin","tagKeyList","columnApi","cumulativeColumns","cachedMetricKeys","cachedParamKeys","cachedTagKeys","add","tagKeys","useCumulativeColumnKeys","usingCompactViewport","useMediaQuery","breakpoints","columnSet","columns","valueGetter","checkboxSelection","headerComponent","headerCheckboxSelection","headerName","cellClass","cellRenderer","cellRendererParams","maxWidth","resizable","suppressKeyboardEvent","isRunColumnDynamicSized","colId","headerTooltip","sortable","equals","runA","runB","_runA$groupParentInfo","_runB$groupParentInfo","cellClassRules","initialWidth","dateInfo1","dateInfo2","DURATION","experimentName1","experimentName2","initialHide","tags1","tags2","getSourceName","version1","version2","models1","models2","_customMetricColumnDe","_customMetricColumnDe2","customMetricColumnDef","getQualifiedEntityName","tooltipField","initialColumnWidth","valueFormatter","cellRendererSelector","is-previewable-cell","canonicalSortKeys","canonicalKey","setColumnVisible","EXPERIMENTS_DEFAULT_COLUMN_SETUP","autoSizePadding","menuIcon","suppressMenu","suppressMovable","ExperimentViewRunsEmptyTable","isFiltered","onClearFilters","noResultsWrapper","Empty","image","FilterIcon","LoggingRunsDocUrl","BeakerIcon","CLASS_OUT_OF_VIEWPORT","CLASS_IS_HIDDEN","CLASS_IS_MINIMIZED","AG_GRID_CLS","ExperimentViewRunsTableAddColumnCTA","gridContainerElement","isInitialized","moreRunsAvailable","moreAvailableRunsTableColumnCount","ctaRef","savedContainerRef","immediateMoreRunsAvailable","initialize","targetElement","rootElement","refLeftElem","refCenterElem","refHeaderElem","refBodyViewport","gridAreaWidth","leftColContainerWidth","leftColContainerHeight","centerColContainerWidth","colContainerHeight","headerHeight","_savedContainerRef$cu","_savedContainerRef$cu2","_savedContainerRef$cu3","_savedContainerRef$cu4","calculatedLeft","calculatedTop","remove","loadMoreRowHeight","calculatedHeight","columnContainer","buttonContainer","buttonIcon","caption","count","borderDecorative","borderTop","left","willChange","pointerEvents","strong","ExperimentViewRunsTableStatusBar","allRunsCount","statusBar","PreviewSidebar","headerText","empty","gridTemplateColumns","rowGap","agGridSelectRunRows","isSelected","gridApi","forEachNode","_node$data","runInfo","childRunDateInfo","childrenRunUuid","setSelected","useToggleRowVisibilityCallback","tableRows","immediateTableRows","toggleRowVisibility","groupOrRunUuid","runsHidden","_immediateTableRows$c","currentlyHiddenRows","currentToggledGroupInfo","newHiddenRows","currentGroupOrRunUuid","concat","ExperimentViewRunsTable","onAddColumnClicked","rowsData","runListHidden","setGridApi","setColumnApi","expandersVisible","row","_row$runDateAndNestIn","toggleRowExpanded","parentId","runsExpanded","currentRunsExpanded","togglePinnedRow","uuid","existingFacets","toggleRowVisibilityV2","toggleRowVisibilityV1","runUuidOrToggle","gridReadyHandler","api","handleRowSelected","onSelectionChange","selectedUUIDs","getSelectedRows","aggregate","curr","isParent","selectedRunRows","uniqBy","rowData","agGridSelectGroupRows","useExperimentTableSelectRowHandler","columnDefs","gridSizeHandler","sizeColumnsToFit","showLoadingOverlay","hideOverlay","setRowData","uniqueId","allAvailableColumnsCount","hasSelectedAllColumns","runUuidsMatchingFilter","useLayoutEffect","deselectAll","resetRowHeights","rowHeightGetterFn","EXPERIMENT_RUNS_TABLE_ROW_HEIGHT","datasetColumnId","getDatasetsCellHeight","datasetColumnShown","_data$datasets","datasetsCount","sidebarPreviewData","setSidebarPreviewData","handleCellClicked","_column$getParent","column","columnGroupId","getParent","getGroupId","header","getColId","displayAddColumnsCTA","displayPreviewSidebar","displayRunsTable","displayStatusBar","displayEmptyState","cellMouseOverHandler","cellMouseOutHandler","containerElementRef","highlightedClassName","onHighlightChange","highlightDataTrace","useRunsChartTraceHighlight","highlightFn","source","_containerElementRef$","_containerElementRef$2","existingHighlightedRowElement","rowElement","ChartsTraceHighlightSource","TABLE","dataTraceUuid","useRunsHighlightTableRow","agGridOverrides","defaultColDef","rowSelection","onGridReady","onSelectionChanged","getRowHeight","onRowSelected","suppressRowClickSelection","suppressColumnMoveAnimation","suppressScrollOnNewData","isFullWidthRow","fullWidthCellRenderer","fullWidthCellRendererParams","suppressFieldDotNotation","enableCellTextSelection","components","agColumnHeader","loadingOverlayComponent","SourceCellRenderer","suppressNoRowsOverlay","loadingOverlayComponentParams","showImmediately","rowBuffer","onCellClicked","onGridSizeChanged","onCellMouseOver","onCellMouseOut","gridColors","rowForeground","textPrimary","rowBackground","rowBackgroundHover","tableBackgroundUnselectedHover","rowBackgroundSelected","tableBackgroundSelectedDefault","rowBackgroundHoverSelected","tableBackgroundSelectedHover","columnSortedBy","blue400","headerBackground","backgroundSecondary","headerTextColor","headerGroupTextColor","headerBorderColor","checkboxBorderColor","checkboxBorderColorChecked","checkboxBackgroundColorChecked","overlayBackground","getGridColors","borderRight","borderBottom","ExperimentPageViewState","hiddenChildRunsSelected","artifactViewState","selectedTables","groupByCols","intersectingOnly","FETCHED_RUN_NOTIFICATION_KEY","useFetchedRunsNotification","notification","getMessage","allRuns","childRuns","fetchedRuns","existingRunInfos","runsWithParent","_run$data","runTagsList","EXPERIMENT_PARENT_ID_TAG","countFetchedRuns","close","duration","PromptEngineeringContext","getMissingParams","pendingDataLoading","getEvaluableRowCount","evaluateCell","evaluateAllClick","runColumnsBeingEvaluated","canEvaluateInRunColumn","toggleExpandedHeader","isHeaderExpanded","PromptEngineeringContextProvider","tableData","setIsHeaderExpanded","expanded","canEvaluateOnRun","requiredInput","groupByCellValues","startEvaluatingRunColumn","stopEvaluatingRunColumn","useEvaluateAllRows","evaluationTableData","currentTableData","currentRunsBeingEvaluated","setEvaluatedRuns","processQueueForRun","requiredInputs","nextEvaluableRow","tableRow","cellValues","containsAllParamValuesForRow","existingRunUuid","evaluationData","evaluationPendingDataLoadingByRunUuid","DEFAULT_PROMPTLAB_OUTPUT_COLUMN","missingParams","getAction","usePromptEngineeringContext","EvaluationRunHeaderModelIndicator","promptEvaluationDataForRun","gatewayKey","stopSequences","EvaluationRunHeaderDatasetIndicator","_run$datasets","handleDatasetSelected","ExperimentViewDatasetWithContext","displayTextAsLink","EvaluationTableHeader","groupHeaderContent","flexBasis","EvaluationRunHeaderCellRenderer","onHideRun","onDuplicateRun","evaluableRowCount","evaluateAllButtonEnabled","evaluatingAllInProgress","evaluateAllTooltipContent","ExperimentRoutes","EvaluationCellEvaluateButton","isRunEvaluable","missingParamsToEvaluate","missingParamList","onMouseDownCapture","onClickCapture","HighlightedText","highlight","parts","part","yellow200","EvaluationTextCellRenderer","_pendingDataLoading$r","_data$outputMetadataB","isGroupByColumn","isGatewayRoutesLoading","modelGatewayRoutesLoadingLegacy","isCellEvaluating","outputMetadata","outputMetadataByRunUuid","isPending","isPendingInputRow","structuredJSONValue","actionDefaultBackgroundHover","JsonPreview","json","highlightedText","bottom","evaluationTime","EVALUATION_ARTIFACTS_TEXT_COLUMN_WIDTH","initialWidthGroupBy","initialWidthOutput","EvaluationGroupByHeaderCellRenderer","truncate","bold","enlargedIconStyle","EvaluationTableActionsColumnRenderer","EvaluationTableActionsCellRenderer","onAddNewInputs","displayAddNewInputsButton","EvaluationImageCellRenderer","url","compressed_url","ImagePlot","imageUrl","compressedImageUrl","EvaluationArtifactCompareTable","resultList","groupByColumns","onCellClick","isPreviewPaneVisible","outputColumnName","isImageColumn","setColumns","pendingData","evaluationPendingDataByRunUuid","gridWrapperRef","handleHideRun","refreshHeader","handleDuplicateRun","clearFocusedCell","visibleRows","getRenderedNodes","refreshCells","force","rowNodes","showAddNewInputsModal","AddNewInputsModal","useEvaluationAddNewInputsModal","modalVisible","setModalVisible","requiredInputKeys","setRequiredInputKeys","setInputValues","allValuesProvided","inputName","successCallback","setSuccessCallback","setInputValue","requiredInputsForRuns","inputValuesWithRunNames","flat","runNames","okButtonProps","cancelText","hasMore","scrollGridToTop","_gridWrapperRef$curre","gridViewport","ensureIndexVisible","emptyMessage","getId","outputColumnIndicator","cols","rowIndex","col","isLastGroupByColumns","headerClass","isFirstColumn","runsContainHeaderMetadata","setHeaderHeight","getEvaluationArtifactsTableHeaderHeight","createTableStyles","suppressHorizontalScroll","TextRendererCellRenderer","GroupHeaderCellRenderer","RunHeaderCellRenderer","ActionsColumnRenderer","ActionsCellRenderer","ImageRendererCellRenderer","boxShadow","blue300","extractGroupByValuesFromEntry","groupByMappings","isString","groupByHashKey","keyValue","groupByValues","isMacKeyboard","_userAgentData","test","navigator","userAgentData","platform","systemModifierKey","useBrowserKeyShortcutListener","modifierKeys","fn","altOrOptKey","ctrlOrCmdKey","shiftKey","handler","altKey","addEventListener","removeEventListener","useEvaluationArtifactWriteBack","evaluationArtifactsBeingUploaded","evaluationDraftInputValues","isSyncingArtifacts","setSyncingArtifacts","discard","unsyncedDataEntriesCount","draftInputValuesCount","runsBeingSynchronizedCount","runArtifacts","isSynced","synchronizeArtifactData","evaluationArtifactsByRunUuid","runUuidsToUpdate","originalRunArtifacts","artifactTableRecords","MLFLOW_PROMPT_ENGINEERING_ARTIFACT_NAME","updatedArtifactFiles","originalTableRecord","transformedEntries","entryData","columnName","updatedArtifactFile","cloneDeep","rawArtifactFile","promises","uploadArtifactApi","newEvaluationTable","parseEvaluationTableArtifact","pendingUnevaluatedDraftInputValues","EvaluationSyncStatusElement","keyCombination","shouldDisplayEvaluationArtifactEmptyState","noEvalTablesLogged","userDeselectedAllColumns","areRunsSelected","areTablesSelected","EvaluationArtifactViewEmptyState","openInNewTab","_ref11","EvaluationArtifactCompareViewImpl","comparedRuns","setSelectedTables","setGroupByCols","setOutputColumn","useEvaluationArtifactViewState","showSearchSpinner","setShowSearchSpinner","debouncedFilter","setDebouncedFilter","setUserDeselectedAllColumns","handleTableToggle","currentValue","handleGroupByToggle","newValues","visibleRunsUuids","tables","tablesByRun","comparedRunRows","tablesInRun","extractLoggedTablesFromRunTags","allUniqueTables","tablesIntersection","tableName","_tablesByRun$runUuid","table","_evaluationData$evalu","evaluationArtifactsLoadingByRunUuid","imageColumns","artifactsByRun","comparedRunUuids","tableNames","columnsIntersection","allTableEntries","path","allColumnsForAllTables","column_string","tableColumns","useEvaluationArtifactColumns","useEvaluationArtifactTableData","pendingDataByRun","draftInputValues","comparedRunsUuids","outputCellsValueMap","groupByCellsValueMap","pendingRowKeys","draftInputValueSet","visibleGroupByValues","colName","draftInputRowKey","outputMetadataByCellsValueMap","runsWithEntries","baseEntries","parseFloat","cellsEntry","pendingEntries","pendingEntry","allRowKeys","existingTableRow","existingKey","filepath","compressed_filepath","LOG_TABLE_IMAGE_COLUMN_TYPE","getArtifactLocationUrl","promptLabInputVariableNames","allInputNames","tablesToFetch","getEvaluationTableArtifact","isViewConfigured","filteredRows","regexp","groupByValue","noColumnsSelected","columnNotAvailableAnymore","firstColumn","groupByColumnCandidates","availableGroupByColumns","availableOutputColumns","nextColumnCandidate","setTimeout","clearTimeout","gridTemplateRows","LegacySkeleton","columnGap","columnNames","FormattedJsonDisplay","EvaluationArtifactCompareView","createRunDataTrace","latestMetricsByRunUuid","paramsByRunUuid","tagsByRunUuid","imagesByRunUuid","_run$runInfo","_run$runDateAndNestIn","metrics","images","metricsHistory","RunsCompareImpl","experimentTags","compareRunSections","updateChartsUIState","useUpdateRunsChartsUIConfiguration","initiallyLoaded","setInitiallyLoaded","configuredCardConfig","setConfiguredCardConfig","search","setSearch","groupByNormalized","fullScreenChart","setFullScreenChart","startEditChart","chartCard","primaryMetricKey","automlEntry","AUTOML_EVALUATION_METRIC_TAG","mlflowPrimaryEntry","MLFLOW_EXPERIMENT_PRIMARY_METRIC_NAME","chartData","groupChartDataEntries","_group$groupParentInf","createGroupDataTrace","_run$groupParentInfo","_run$groupParentInfo2","_run$groupParentInfo3","metricsData","aggregatedMetricData","keyBy","maxStep","timestamp","aggregatedParamData","_run$runDateAndNestIn2","filteredImageData","LOG_IMAGE_TAG_INDICATOR","usePopulateImagesByRunUuid","runUuidsIsActive","_run$runInfo2","enabled","shouldEnableImageGridCharts","resultChartSet","resultSectionSet","RunsChartsCardConfig","getBaseChartAndSectionConfigs","useParallelCoordinatesChart","isResultUpdated","updateChartAndSectionConfigs","isAccordionReordered","toggleRunVisibility","confirmChartCardConfiguration","useConfirmChartCardConfigurationFn","removeChart","useRemoveRunsChartFn","reorderCharts","useReorderRunsChartsFn","insertCharts","useInsertRunsChartsFn","tooltipContextValue","RunsChartsTooltipWrapper","contextData","RunsChartsTooltipBody","DragAndDropProvider","RunsChartsSectionAccordion","addNewChartCard","metricSectionId","getEmptyChartCardByType","RunsChartsConfigureModal","chartRunData","config","onSubmit","configuredCard","RunsChartsFullScreenModal","tooltipComponent","RunsCompare","setter","RunsChartsUIConfigurationContextProvider","ExperimentViewRunsTableResizer","onResize","dragging","setDragging","ResizableBox","axis","resizeHandles","minConstraints","handle","ExperimentViewRunsTableResizerHandle","updateRunListHidden","onResizeStart","onResizeStop","Global","transition","actionDefaultBorderHover","ChevronLeftIcon","createCurrentTime","mountTime","setMilliseconds","ExperimentViewRuns","isLoadingRuns","loadMoreRuns","setViewState","expandRowsStore","paramsList","metricsList","modelVersionsByRunUuid","runData","newPartialViewState","currentViewState","addColumnClicked","setReferenceTime","isDrawerOpen","setIsDrawerOpen","selectedDatasetWithRun","setSelectedDatasetWithRun","useExperimentRunRows","nestChildren","notificationsFn","notificationContainer","useLegacyNotification","showFetchedRunsNotifications","tableAreaWidth","setTableAreaWidth","loadMoreRunsCallback","datasetSelected","isTabActive","useIsTabActive","usingGroupedValuesInCharts","tableElement","RunsChartsSetHighlightContextProvider","ExperimentViewDatasetDrawer","useFetchExperiments","getExperimentsContext","loadExperimentViewState","idKey","loadComponentState","createExperimentPageUIState","usePersistExperimentPageViewState","searchFacets","setSearchFacets","persistKey","persistedViewState","rebuiltViewState","saveComponentState","experimentRunsSelector","comparingExperiments","extractRunInfos","MODEL_VERSION_FILTER","ALL_RUNS","run_id","getRunInfo","getRunDatasets","rInfo","lifecycleStage","WITH_MODEL_VERSIONS","WTIHOUT_MODEL_VERSIONS","console","warn","datasetName","datasetDigest","datasetTag","metricKeysSet","paramKeysSet","runDatasetsByUuid","metricsByRunUuid","getLatestMetrics","metric","paramValues","getParams","getRunTags","firstExperimentId","getExperimentTags","createFetchRunsRequestParams","requestedFacets","useExperimentRuns","setRunsData","createEmptyRunsResult","setIsLoadingRuns","isInitialLoadingRuns","setIsInitialLoadingRuns","nextPageToken","setNextPageToken","cachedPinnedRuns","lastFetchedTime","lastRequestedParams","setResultRunsData","store","loadModelVersions","fetchModelVersionsForRuns","runsPayload","actionCreator","runsWithLogModelHistory","EXPERIMENT_LOG_MODEL_HISTORY_TAG","chunk","MAX_RUNS_IN_SEARCH_MODEL_VERSIONS_FILTER","runsChunk","action","searchModelVersionsApi","fetchRuns","fetchParams","thunkDispatch","getStore","isAutoRefreshing","loadMoreRunsApi","searchRunsApi","_options$discardResul","next_page_token","discardResultsFn","requestParams","refreshTimeoutRef","isLoadingImmediate","autoRefreshEnabledRef","currentResults","scheduleRefresh","hasBeenInitialized","timePassed","requestedPageCount","ceil","existingPageCount","useExperimentRunsAutoRefresh","useSharedExperimentViewState","uiStateSetter","experiment","searchParams","viewStateShareKey","EXPERIMENT_PAGE_VIEW_STATE_SHARE_URL_PARAM_KEY","isViewStateShared","sharedSearchFacetsState","setSharedSearchFacetsState","sharedUiState","setSharedUiState","sharedStateError","setSharedStateError","sharedStateErrorMessage","setSharedStateErrorMessage","shareViewTag","parsedSharedViewState","deserializePersistedState","EXPERIMENT_PAGE_UI_STATE_FIELDS","tryParseSharedStateFromTag","displayGlobalErrorNotification","uiStateInitializers","expandedEvaluationRunRowsUIStateInitializer","evaluationRunIds","_runsData$tagsList$in","_runsData$tagsList$in2","MLFLOW_RUN_TYPE_TAG","MLFLOW_RUN_TYPE_VALUE_EVALUATION","parentIdsOfEvaluationRunIds","_runsData$tagsList$in3","baseState","toolbarCommands","converter","getMarkdownConverter","getSanitizedHtmlContent","markdown","sanitized","sanitizeConvertedHtml","makeHtml","forceAnchorTagNewTab","ExperimentViewDescriptionNotes","editing","setEditing","setShowAddDescriptionButton","storedNote","_Object$values$find","NOTE_CONTENT_TAG","extractNoteFromTags","tmpNote","setTmpNote","selectedTab","setSelectedTab","isExpanded","setIsExpanded","COLLAPSE_MAX_HEIGHT","handleSubmitEditNote","updatedNote","lineHeight","lineHeightSm","flexGrow","overflowWrap","dangerouslySetInnerHTML","__html","ChevronUpIcon","ReactMde","minEditorHeight","maxEditorHeight","minPreviewHeight","onTabChange","newTab","generateMarkdownPreview","resolve","getIcon","SvgIcon","ExperimentViewCopyTitle","copyable","tooltips","ExperimentViewArtifactLocation","ExperimentViewCopyExperimentId","ExperimentViewCopyArtifactLocation","ExperimentViewHeader","showAddDescriptionButton","normalizedExperimentName","pop","feedbackFormUrl","EXPERIMENT_PAGE_FEEDBACK_URL","wordBreak","titleAddOns","overlayStyle","arrowPointAtCenter","NewWindowIcon","spacerSize","ExperimentViewTraces","TracesView","ExperimentView","ids","experimentsById","oldExperiments","newExperiments","firstExperiment","elementHeight","hideableElementHeight","observeHeight","resizeCallback","hideableElementsContainer","setHideableElementsContainer","setElementHeight","scrollHeight","useElementHeight","setUIState","seedInitialUIState","isFirstVisit","dispatchAction","useReducer","newState","currentPersistKey","newPersistKey","persistedStateFound","persistedUIState","newStateOrSelector","initializer","useInitializeUIState","first","isMaximized","runsRequestError","searchDatasetsApi","getErrorCode","ErrorCodes","PERMISSION_DENIED","RESOURCE_DOES_NOT_EXIST","NotFoundPage","ExperimentPageUIStateContextProvider","experimentViewWrapper","paragraph","NoExperimentView","noExperiments","ExperimentCliDocUrl","getExperimentActions","setCompareExperiments","HomePage","searchRequestId","hasExperiments","firstExp","getFirstActiveExperiment","Navigate","loadingState","customSpinner"],"sourceRoot":""}